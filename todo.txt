> \[], \[[]], \[[], []], ...
> change 'vec' object to column 'mat' object?

> logic operations fall back to Python logic ops or sympify arguments?

> remove \lim, \sum and definite \int vars from free_vars

> extended comparison 0 <= x < 1 (using and)
> ProductSet?

> importing modules to allow custom code execution

> better plotting limits specification

> AppliedUndef, in func and in _Mul
> Function ('f') (), Function ('f') (x), Function ('f') (x, y)
> var_prime in quick mode
> ODEs

> vector calculus
> nabla, laplacian

> random server port selection / fallback
> emptyset Unicode symbol

> break out state machine from server

> formatting: no spacing for nums - 3 x -> 3x?
> formatting: quick mode no spacing for vars x y z -> xyz?
> formatting: non-quick mode explicit tex spacing for vars var1 var2 -> var1\ var2?

> floor / ceiling

> display subscripts
> parse subscripts

> SYM.PY REFACTOR!

> plots as objects?
> no-evaluate version of Add and Mul (for tuples, lists and strings)?
> flush sys.stdout to msg before sending exception?
> function names allowed as variables on assignment?
> xlat different types and initializations of matrices?
> long variable name shortcut? $?
> derivative and integral of lambda functions?

> fix unparenthesized tuples in function arguments? Not possible during normal entry but might appear somehow anyway.

> sequence(factorial(k), (k,1,oo))
> ImageSet(Lambda(n, 2 n pi + pi/2), Integers)

> var assumptions
> Proper implementation of vectors with "\vec{x}" and "\hat{i}" variables
> systems of equations
> more graphical plots
> numpy support


Errors:


\[]
\[[]]
\[[], []]

text: {-1.0  in  True if {partialx+a+\infty zoo} else [1,\partial ] if \ln\partialx else {-1.0 or \partialx}*\[[],]}
ast:  ('piece', ((('=', 'in', ('#', '-1.0'), ('@', 'True')), ('+', (('@', 'dx'), ('@', 'a'), ('*', (('@', 'oo'), ('@', 'zoo')))))), (('[', (('#', '1'), ('@', 'partial'))), ('log', ('@', 'dx'))), (('*', (('or', (('#', '-1.0'), ('@', 'dx'))), ('mat', ((),)))), True)))
tex:  ('piece', ((('=', 'in', ('#', '-1.0'), ('@', 'True')), ('+', (('@', 'dx'), ('@', 'a'), ('*', (('@', 'oo'), ('@', 'zoo')))))), (('[', (('#', '1'), ('@', 'partial'))), ('log', ('@', 'dx'))), (('*', (('or', (('#', '-1.0'), ('@', 'dx'))), ('mat', ()))), True)))

text: \log_1e-100!() : {{1.0 \cdot \partialx}  \frac1e+100a'} : \[[{oo  .1},],[\{'str',\emptyset,False},],]
ast:  ('slice', ('+', (('log', ('@', 'e'), ('#', '1')), ('*', (('-', ('!', ('#', '100'))), (',', ()))))), ('+', (('*', (('#', '1.0'), ('@', 'dx'), ('/', ('#', '1'), ('@', 'e')))), ('*', (('#', '100'), ('@', 'a_prime'))))), ('vec', (('*', (('@', 'oo'), ('#', '0.1'))), ('set', (('"', 'str'), ('set', ()), ('@', 'False'))))))
tex:  ('slice', ('+', (('log', ('@', 'e'), ('#', '1')), ('-', ('*', (('!', ('#', '100')), (',', ())))))), ('+', (('*', (('#', '1.0'), ('@', 'dx'), ('/', ('#', '1'), ('@', 'e')))), ('*', (('#', '100'), ('@', 'a_prime'))))), ('vec', (('*', (('@', 'oo'), ('#', '0.1'))), ('set', (('"', 'str'), ('set', ()), ('@', 'False'))))))
nat:  ('slice', ('+', (('log', ('@', 'e'), ('#', '1')), ('-', ('*', (('!', ('#', '100')), (',', ())))))), ('+', (('*', (('#', '1.0'), ('@', 'dx'), ('/', ('#', '1'), ('@', 'e')))), ('*', (('#', '100'), ('@', 'a_prime'))))), ('vec', (('*', (('@', 'oo'), ('#', '0.1'))), ('set', (('"', 'str'), ('set', ()), ('@', 'False'))))))

text: x-y!()
ast:  ('+', (('@', 'x'), ('*', (('-', ('!', ('@', 'y'))), (',', ())))))
tex:  ('+', (('@', 'x'), ('-', ('*', (('!', ('@', 'y')), (',', ()))))))
nat:  ('+', (('@', 'x'), ('-', ('*', (('!', ('@', 'y')), (',', ()))))))

[{{{-1} \cdot {oo}}},{{{dx},{1.0},{oo}}},{partial^{8} / partialx^{3} partialx^{2} partialz^{3} {oo}}]
{-1} \cdot {oo}

-1 * a
x - y! ()

text: {{{-{lambda x: {1.0}}} \cdot {{{{c} \cdot {\emptyset} \cdot {b}}}!} \cdot {\[{{{-1.0} and {-1} and {a}}},{{\infty zoo}^{0}},{{"str"}  not in  {partialx}},]}}}
ast:  ('*', (('-', ('lamb', ('#', '1.0'), (('@', 'x'),))), ('!', ('*', (('@', 'c'), ('set', ()), ('@', 'b')))), ('vec', (('and', (('#', '-1.0'), ('#', '-1'), ('@', 'a'))), ('^', ('*', (('@', 'oo'), ('@', 'zoo'))), ('#', '0')), ('=', 'notin', ('"', 'str'), ('@', 'dx'))))))
tex:  ('-', ('*', (('lamb', ('#', '1.0'), (('@', 'x'),)), ('!', ('*', (('@', 'c'), ('set', ()), ('@', 'b')))), ('vec', (('and', (('#', '-1.0'), ('#', '-1'), ('@', 'a'))), ('^', ('*', (('@', 'oo'), ('@', 'zoo'))), ('#', '0')), ('=', 'notin', ('"', 'str'), ('@', 'dx')))))))
nat:  ('-', ('*', (('lamb', ('#', '1.0'), (('@', 'x'),)), ('!', ('*', (('@', 'c'), ('set', ()), ('@', 'b')))), ('vec', (('and', (('#', '-1.0'), ('#', '-1'), ('@', 'a'))), ('^', ('*', (('@', 'oo'), ('@', 'zoo'))), ('#', '0')), ('=', 'notin', ('"', 'str'), ('@', 'dx')))))))

{-{lambda x: 1}} * {{c \cdot b * a}!}

text: {-{lambda x: 1}} * {{c \cdot b * a}!}
ast:  ('*', (('-', ('lamb', ('#', '1'), (('@', 'x'),))), ('!', ('*', (('@', 'c'), ('@', 'b'), ('@', 'a'))))))
tex:  ('-', ('*', (('lamb', ('#', '1'), (('@', 'x'),)), ('!', ('*', (('@', 'c'), ('@', 'b'), ('@', 'a')))))))
nat:  ('-', ('*', (('lamb', ('#', '1'), (('@', 'x'),)), ('!', ('*', (('@', 'c'), ('@', 'b'), ('@', 'a')))))))

{x} * {{a}!}

text: -x * a!
ast:  ('*', (('-', ('@', 'x')), ('!', ('@', 'a'))))
tex:  ('-', ('*', (('@', 'x'), ('!', ('@', 'a')))))
nat:  ('-', ('*', (('@', 'x'), ('!', ('@', 'a')))))