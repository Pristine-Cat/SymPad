> Or, And and Not tex visual translation
> logic operations fall back to Python logic ops?


> remove \lim, \sum and definite \int vars from free_vars

> lambda parse set and py logic ops?

> unparenthesize py set operations

> extended comparison 0 <= x < 1 (using and)
> ProductSet?

> expr = x**2y**2, f = lambda x, y: expr

> importing modules to allow custom code execution

> better plotting limits specification

> AppliedUndef, in func and in _Mul
> Function ('f') (), Function ('f') (x), Function ('f') (x, y)
> ODEs

> vector calculus
> nabla, laplacian

> random server port selection / fallback
> emptyset Unicode symbol

> var_prime in quick mode

> break out state machine from server

> formatting: no spacing for nums - 3 x -> 3x?
> formatting: quick mode no spacing for vars x y z -> xyz?
> formatting: non-quick mode explicit tex spacing for vars var1 var2 -> var1\ var2?

> floor / ceiling

> display subscripts
> parse subscripts

> SYM.PY REFACTOR!

> plots as objects?
> no-evaluate version of Add and Mul (for tuples, lists and strings)?
> flush sys.stdout to msg before sending exception?
> function names allowed as variables on assignment?
> xlat different types and initializations of matrices?
> long variable name shortcut? $?
> derivative and integral of lambda functions?

> fix unparenthesized tuples in function arguments? Not possible during normal entry but might appear somehow anyway.

> sequence(factorial(k), (k,1,oo))
> ImageSet(Lambda(n, 2 n pi + pi/2), Integers)

> var assumptions
> Proper implementation of vectors with "\vec{x}" and "\hat{i}" variables
> systems of equations
> more graphical plots
> numpy support


Errors:


text: {{{\frac{{{oo}  {a'}  {\partial }}}{{oo : {False},oo : {'str'},partialx : {\emptyset}}}}+{\int {{}} dx}+{{{-{\emptyset}} \cdot {{'str'}!} \cdot {\left|{1.}\right|}}}}}
ast:  ('+', (('/', ('*', (('@', 'oo'), ('@', 'a_prime'), ('@', 'partial'))), ('dict', ((('@', 'oo'), ('@', 'False')), (('@', 'oo'), ('"', 'str')), (('@', 'dx'), ('set', ()))))), ('intg', ('dict', ()), ('@', 'dx')), ('*', (('-', ('set', ())), ('!', ('"', 'str')), ('|', ('#', '1.'))))))
tex:  ('+', (('/', ('*', (('@', 'oo'), ('@', 'a_prime'), ('@', 'partial'))), ('dict', ((('@', 'oo'), ('@', 'False')), (('@', 'oo'), ('"', 'str')), (('@', 'dx'), ('set', ()))))), ('intg', ('dict', ()), ('@', 'dx')), ('*', (('-', ('*', (('set', ()), ('!', ('"', 'str'))))), ('|', ('#', '1.'))))))
nat:  ('+', (('/', ('*', (('@', 'oo'), ('@', 'a_prime'), ('@', 'partial'))), ('dict', ((('@', 'oo'), ('@', 'False')), (('@', 'oo'), ('"', 'str')), (('@', 'dx'), ('set', ()))))), ('intg', ('dict', ()), ('@', 'dx')), ('*', (('-', ('*', (('set', ()), ('!', ('"', 'str'))))), ('|', ('#', '1.'))))))

x + {{{-{\emptyset}} \cdot {{'str'}!} \cdot {\left|{1.}\right|}}}

text: x + {{{-{\emptyset}} \cdot {{str}!} \cdot {\left|{1.}\right|}}}
ast:  ('+', (('@', 'x'), ('*', (('-', ('set', ())), ('!', ('@', 'str')), ('|', ('#', '1.'))))))
tex:  ('+', (('@', 'x'), ('*', (('-', ('*', (('set', ()), ('!', ('@', 'str'))))), ('|', ('#', '1.'))))))
nat:  ('+', (('@', 'x'), ('*', (('-', ('*', (('set', ()), ('!', ('@', 'str'))))), ('|', ('#', '1.'))))))

x + {{{-a} \cdot {b!} \cdot {\left|c\right|}}}

text: x + {{{-a} \cdot {b!} \cdot {\left|c\right|}}}
ast:  ('+', (('@', 'x'), ('*', (('-', ('@', 'a')), ('!', ('@', 'b')), ('|', ('@', 'c'))))))
tex:  ('+', (('@', 'x'), ('*', (('-', ('*', (('@', 'a'), ('!', ('@', 'b'))))), ('|', ('@', 'c'))))))
nat:  ('+', (('@', 'x'), ('*', (('-', ('*', (('@', 'a'), ('!', ('@', 'b'))))), ('|', ('@', 'c'))))))

x + {{{-a} \cdot {b!} \cdot c}}

text: x - a b!
ast:  ('+', (('@', 'x'), ('*', (('-', ('@', 'a')), ('!', ('@', 'b'))))))
tex:  ('+', (('@', 'x'), ('-', ('*', (('@', 'a'), ('!', ('@', 'b')))))))
nat:  ('+', (('@', 'x'), ('-', ('*', (('@', 'a'), ('!', ('@', 'b')))))))

x - a b!
