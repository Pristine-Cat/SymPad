> (x = y) no strip parentheses at top level
> extended comparison 0 <= x < 1 (using and)

> add .limit(), .diff() and .integrate() translations

> test_python module
> Add, Mul, etc... translate...

> remove \lim, \sum and definite \int vars from free_vars

> \[], \[[]], \[[], []], ...
> change 'vec' object to column 'mat' object?

> importing modules to allow custom code execution

> better plotting limits specification

> AppliedUndef, in func and in _Mul
> Function ('f') (), Function ('f') (x), Function ('f') (x, y)
> var_prime in quick mode
> ODEs

> vector calculus
> nabla, laplacian

> random server port selection / fallback
> emptyset Unicode symbol
> ProductSet?
> ImageSet?

> formatting: no spacing for nums - 3 x -> 3x?
> formatting: quick mode no spacing for vars x y z -> xyz?
> formatting: non-quick mode explicit tex spacing for vars var1 var2 -> var1\ var2?

> floor / ceiling

> display subscripts
> parse subscripts

> SYM.PY REFACTOR!

> 1 in x and other sets to accept symbols, how?
> plots as objects?
> flush sys.stdout to msg before sending exception?
> function names allowed as variables on assignment?
> xlat different types and initializations of matrices?
> long variable name shortcut? $?
> derivative and integral of lambda functions? lambdas as expressions?
> eliminate potentially pointless minus rewriting by moving negation in parse higherarchy?

> break out state machine from server

> fix instances unparenthesized tuples in function arguments? Not possible during normal entry but might appear somehow anyway.

> sequence (factorial (k), (k, 1, oo))
> ImageSet (Lambda (n, 2 n pi + pi / 2), Integers)

> var assumptions
> Proper implementation of vectors with "\vec{x}" and "\hat{i}" variables
> systems of equations
> more graphical plots
> numpy support


Errors:


text: {-1.0  in  True if {partialx+a+\infty zoo} else [1,\partial ] if \ln\partialx else {-1.0 or \partialx}*\[[],]}
ast:  ('piece', ((('=', 'in', ('#', '-1.0'), ('@', 'True')), ('+', (('@', 'dx'), ('@', 'a'), ('*', (('@', 'oo'), ('@', 'zoo')))))), (('[', (('#', '1'), ('@', 'partial'))), ('log', ('@', 'dx'))), (('*', (('or', (('#', '-1.0'), ('@', 'dx'))), ('mat', ((),)))), True)))
tex:  ('piece', ((('=', 'in', ('#', '-1.0'), ('@', 'True')), ('+', (('@', 'dx'), ('@', 'a'), ('*', (('@', 'oo'), ('@', 'zoo')))))), (('[', (('#', '1'), ('@', 'partial'))), ('log', ('@', 'dx'))), (('*', (('or', (('#', '-1.0'), ('@', 'dx'))), ('mat', ()))), True)))
\[]
\[[]]
\[[], []]


text: lambda: 1e-100 [a, 1, -1]^\emptyset : 1.0**{lambda x, y, z: 1e-100 and \[-1.0,]}
ast:  ('lamb', ('slice', ('^', ('idx', ('#', '1e-100'), (('@', 'a'), ('#', '1'), ('#', '-1'))), ('set', ())), ('^', ('#', '1.0'), ('lamb', ('and', (('#', '1e-100'), ('vec', (('#', '-1.0'),)))), (('@', 'x'), ('@', 'y'), ('@', 'z')))), None), ())
nat:  ('lamb', ('dict', ((('^', ('idx', ('#', '1e-100'), (('@', 'a'), ('#', '1'), ('#', '-1'))), ('set', ())), ('^', ('#', '1.0'), ('lamb', ('and', (('#', '1e-100'), ('vec', (('#', '-1.0'),)))), (('@', 'x'), ('@', 'y'), ('@', 'z'))))),)), ())


text: {{{{{\[[{False},{None},{"str"},],[{"str"},{\partial },{1e100},],[{\tilde\infty },{-1},{\partialx},],]}^{{{oo}  {oo}}}} == {\log_{\frac{1e+100}{d}}{\log{\partial x}}}}^^{lambda: {{{\int {\partialx} dx} \cdot {\{}} \cdot {\int {"str"} dx}}}}^^{{{-{-{a}}}*{{()}!}*{\sum_{x = {{{\partial }^^{None}}}}^{{{1.0}^^{1}}} {{True} : {oo} : {partialx}}}}}}}
ast:  ('^^', (('==', '==', ('^', ('mat', ((('@', 'False'), ('@', 'None'), ('"', 'str')), (('"', 'str'), ('@', 'partial'), ('#', '1e+100')), (('@', 'zoo'), ('#', '-1'), ('@', 'dx')))), ('*', (('@', 'oo'), ('@', 'oo')))), ('log', ('log', ('@', 'dx')), ('/', ('#', '1e+100'), ('@', 'd')))), ('lamb', ('*', (('intg', ('@', 'dx'), ('@', 'dx')), ('set', ()), ('intg', ('"', 'str'), ('@', 'dx')))), ()), ('-', ('-', ('*', (('@', 'a'), ('!', (',', ())), ('sum', ('slice', ('@', 'True'), ('@', 'oo'), ('@', 'dx')), ('@', 'x'), ('^^', (('@', 'partial'), ('@', 'None'))), ('^^', (('#', '1.0'), ('#', '1'))))))))))
tex:  ('^^', (('==', '==', ('^', ('mat', ((('@', 'False'), ('@', 'None'), ('"', 'str')), (('"', 'str'), ('@', 'partial'), ('#', '1e+100')), (('@', 'zoo'), ('#', '-1'), ('@', 'dx')))), ('*', (('@', 'oo'), ('@', 'oo')))), ('log', ('log', ('@', 'dx')), ('/', ('#', '1e+100'), ('@', 'd')))), ('lamb', ('*', (('intg', ('@', 'dx'), ('@', 'dx')), ('set', ()), ('intg', ('"', 'str'), ('@', 'dx')))), ()), ('-', ('-', ('*', (('!', ('func', 'a', ())), ('sum', ('slice', ('@', 'True'), ('@', 'oo'), ('@', 'dx')), ('@', 'x'), ('^^', (('@', 'partial'), ('@', 'None'))), ('^^', (('#', '1.0'), ('#', '1'))))))))))
nat:  ('^^', (('==', '==', ('^', ('mat', ((('@', 'False'), ('@', 'None'), ('"', 'str')), (('"', 'str'), ('@', 'partial'), ('#', '1e+100')), (('@', 'zoo'), ('#', '-1'), ('@', 'dx')))), ('*', (('@', 'oo'), ('@', 'oo')))), ('log', ('log', ('@', 'dx')), ('/', ('#', '1e+100'), ('@', 'd')))), ('lamb', ('*', (('intg', ('@', 'dx'), ('@', 'dx')), ('set', ()), ('intg', ('"', 'str'), ('@', 'dx')))), ()), ('-', ('-', ('*', (('!', ('func', 'a', ())), ('sum', ('slice', ('@', 'True'), ('@', 'oo'), ('@', 'dx')), ('@', 'x'), ('^^', (('@', 'partial'), ('@', 'None'))), ('^^', (('#', '1.0'), ('#', '1'))))))))))


text: \sum_{x = (\sum_{x = partialx}^1e100 .1)}^{lambda x: \tilde\infty  or lambda: \emptyset} \frac{1.^^None^^oo}{"str" and True}
ast:  ('sum', ('/', ('^^', (('#', '1.'), ('@', 'None'), ('@', 'oo'))), ('and', (('"', 'str'), ('@', 'True')))), ('@', 'x'), ('sum', ('*', (('@', 'e100'), ('#', '0.1'))), ('@', 'x'), ('@', 'dx'), ('#', '1')), ('lamb', ('slice', ('or', (('@', 'zoo'), ('@', 'lambda'))), ('set', ()), None), (('@', 'x'),)))
nat:  ('sum', ('/', ('^^', (('#', '1.'), ('@', 'None'), ('@', 'oo'))), ('and', (('"', 'str'), ('@', 'True')))), ('@', 'x'), ('sum', ('*', (('@', 'e100'), ('#', '0.1'))), ('@', 'x'), ('@', 'dx'), ('#', '1')), ('lamb', ('dict', ((('or', (('@', 'zoo'), ('@', 'lambda'))), ('set', ())),)), (('@', 'x'),)))