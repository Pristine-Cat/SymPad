> change 'vec' object to column 'mat' object?

> remove \lim, \sum and definite \int vars from free_vars

> ' differential operator
> var_prime in quick mode
> AppliedUndef, in func and in _Mul
> Function ('f') (), Function ('f') (x), Function ('f') (x, y)
> ODEs

> len (ast.comma) -> ast.comma.len

> importing modules to allow custom code execution

> better plotting limits specification

> test_python module

> vector calculus
> nabla, laplacian

> random server port selection / fallback
> emptyset Unicode symbol
> ProductSet?
> ImageSet?

> formatting: no spacing for nums - 3 x -> 3x?
> formatting: quick mode no spacing for vars x y z -> xyz?
> formatting: non-quick mode explicit tex spacing for vars var1 var2 -> var1\ var2?

> floor / ceiling

> display subscripts
> parse subscripts

> SYM.PY REFACTOR!

> 1 in x and other sets to accept symbols, how?
> plots as objects?
> flush sys.stdout to msg before sending exception?
> function names allowed as variables on assignment?
> xlat different types and initializations of matrices?
> long variable name shortcut? $?
> derivative and integral of lambda functions? lambdas as expressions?
> eliminate potentially pointless minus rewriting by moving negation in parse higherarchy?

> break out state machine from server

> fix instances unparenthesized tuples in function arguments? Not possible during normal entry but might appear somehow anyway.

> sequence (factorial (k), (k, 1, oo))
> ImageSet (Lambda (n, 2 n pi + pi / 2), Integers)

> var assumptions
> Proper implementation of vectors with "\vec{x}" and "\hat{i}" variables
> systems of equations
> more graphical plots
> numpy support


Errors:


text: \sum_{x = \ln\left|1e+100 [-1.0, 1e+100]\right|}^lambda x: {-\tilde\infty *{b \cdot \partialx}} \[[{None \cdot \partial x},{not dx},],[\partial ^\partialx,\partial x^'str',],] / \lim_{x \to -1.0 if False else \partialy if 1. else \partialx if xyzd} Sum (c, (x, \infty zoo, xyzd))
ast:  ('slice', ('sum', ('*', (('@', 'ambda'), ('@', 'x'))), ('@', 'x'), ('log', ('|', ('idx', ('#', '1e+100'), (('#', '-1.0'), ('#', '1e+100'))))), ('@', 'l')), ('/', ('*', (('-', ('*', (('@', 'zoo'), ('@', 'b'), ('@', 'dx')))), ('mat', ((('*', (('@', 'None'), ('@', 'dx'))), ('not', ('@', 'dx'))), (('*', (('^', ('@', 'partial'), ('@', 'partial')), ('@', 'x'))), ('^', ('@', 'dx'), ('"', 'str'))))))), ('lim', ('func', 'Sum', (('@', 'c'), (',', (('@', 'x'), ('*', (('@', 'oo'), ('@', 'zoo'))), ('@', 'xyzd'))))), ('@', 'x'), ('piece', ((('#', '-1.0'), ('@', 'False')), (('@', 'dy'), ('#', '1.')), (('@', 'dx'), ('@', 'xyzd')))))), None)
tex:  ('slice', ('sum', ('*', (('@', 'ambda'), ('@', 'x'))), ('@', 'x'), ('log', ('|', ('idx', ('#', '1e+100'), (('#', '-1.0'), ('#', '1e+100'))))), ('@', 'l')), ('/', ('-', ('*', (('@', 'zoo'), ('@', 'b'), ('@', 'dx'), ('mat', ((('*', (('@', 'None'), ('@', 'dx'))), ('not', ('@', 'dx'))), (('*', (('^', ('@', 'partial'), ('@', 'partial')), ('@', 'x'))), ('^', ('@', 'dx'), ('"', 'str')))))))), ('lim', ('func', 'Sum', (('@', 'c'), (',', (('@', 'x'), ('*', (('@', 'oo'), ('@', 'zoo'))), ('@', 'xyzd'))))), ('@', 'x'), ('piece', ((('#', '-1.0'), ('@', 'False')), (('@', 'dy'), ('#', '1.')), (('@', 'dx'), ('@', 'xyzd')))))), None)
nat:  ('slice', ('sum', ('*', (('@', 'ambda'), ('@', 'x'))), ('@', 'x'), ('log', ('|', ('idx', ('#', '1e+100'), (('#', '-1.0'), ('#', '1e+100'))))), ('@', 'l')), ('/', ('-', ('*', (('@', 'zoo'), ('@', 'b'), ('@', 'dx'), ('mat', ((('*', (('@', 'None'), ('@', 'dx'))), ('not', ('@', 'dx'))), (('*', (('^', ('@', 'partial'), ('@', 'partial')), ('@', 'x'))), ('^', ('@', 'dx'), ('"', 'str')))))))), ('lim', ('func', 'Sum', (('@', 'c'), (',', (('@', 'x'), ('*', (('@', 'oo'), ('@', 'zoo'))), ('@', 'xyzd'))))), ('@', 'x'), ('piece', ((('#', '-1.0'), ('@', 'False')), (('@', 'dy'), ('#', '1.')), (('@', 'dx'), ('@', 'xyzd')))))), None)

\sum_{x = \ln\left|1e+100 [-1.0, 1e+100]\right|}^lambda x: {-\tilde\infty *{b \cdot \partialx}} \[[{None \cdot \partial x},{not dx},],[\partial ^\partialx,\partial x^'str',],] / \lim_{x \to -1.0 if False else \partialy if 1. else \partialx if xyzd} Sum (c, (x, \infty zoo, xyzd))
\sum_{x = 0}^lambda x: {-z} a / y
{-x} y / z