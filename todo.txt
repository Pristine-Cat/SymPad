> boolalg.BooleanTrue.as_coeff_Mul  = lambda self, rational = False: (S.One, self)
> boolalg.BooleanFalse.as_coeff_Mul = lambda self, rational = False: (S.Zero, self)

> true and false
> patch into sympy arithmetic operation with bools
> boolean coercion to number types
> logic operations fall back to Python logic ops?

> lambda parse set and py logic ops?

> Python or, and and not
> unparenthesize py set operations

> extended comparison 0 <= x < 1 (using and)
> ProductSet?

> expr = x**2y**2, f = lambda x, y: expr

> importing modules to allow custom code execution

> better plotting limits specification

> AppliedUndef, in func and in _Mul
> Function ('f') (), Function ('f') (x), Function ('f') (x, y)
> ODEs

> vector calculus
> nabla, laplacian

> random server port selection / fallback
> emptyset Unicode symbol

> var_prime in quick mode

> break out state machine from server

> formatting: no spacing for nums - 3 x -> 3x?
> formatting: quick mode no spacing for vars x y z -> xyz?
> formatting: non-quick mode explicit tex spacing for vars var1 var2 -> var1\ var2?

> floor / ceiling

> display subscripts
> parse subscripts

> SYM.PY REFACTOR!

> plots as objects?
> no-evaluate version of Add and Mul (for tuples, lists and strings)?
> flush sys.stdout to msg before sending exception?
> function names allowed as variables on assignment?
> xlat different types and initializations of matrices?
> long variable name shortcut? $?
> derivative and integral of lambda functions?

> fix unparenthesized tuples in function arguments? Not possible during normal entry but might appear somehow anyway.

> sequence(factorial(k), (k,1,oo))
> ImageSet(Lambda(n, 2 n pi + pi/2), Integers)

> var assumptions
> Proper implementation of vectors with "\vec{x}" and "\hat{i}" variables
> systems of equations
> more graphical plots
> numpy support


Errors:


text: [Derivative(ln1.or*(partial*0 - 1.0) or 1.0*1.0, y, 3), sec(sqrt(1e+100*-1.0)), FiniteSet({} and 1e-100**(1/partialx) and Sum(1, (x, -1, True)))]
ast:  ('[', (('func', 'Derivative', (('or', (('*', (('.', ('@', 'ln1'), 'or'), ('+', (('*', (('@', 'partial'), ('#', '0'))), ('#', '-1.0'))))), ('*', (('#', '1.0'), ('#', '1.0'))))), ('@', 'y'), ('#', '3'))), ('func', 'sec', (('sqrt', ('*', (('#', '1e+100'), ('#', '-1.0')))),)), ('func', 'FiniteSet', (('and', (('dict', ()), ('^', ('#', '1e-100'), ('/', ('#', '1'), ('@', 'dx'))), ('func', 'Sum', (('#', '1'), (',', (('@', 'x'), ('#', '-1'), ('@', 'True'))))))),))))
nat:  ('[', (('func', 'Derivative', (('or', (('.', ('@', 'ln1'), 'or', (('+', (('*', (('@', 'partial'), ('#', '0'))), ('#', '-1.0'))),)), ('*', (('#', '1.0'), ('#', '1.0'))))), ('@', 'y'), ('#', '3'))), ('func', 'sec', (('sqrt', ('*', (('#', '1e+100'), ('#', '-1.0')))),)), ('func', 'FiniteSet', (('and', (('dict', ()), ('^', ('#', '1e-100'), ('/', ('#', '1'), ('@', 'dx'))), ('func', 'Sum', (('#', '1'), (',', (('@', 'x'), ('#', '-1'), ('@', 'True'))))))),))))

text: None**-1.0**\[[\emptyset,],[0,],[\partial x,],] / {not \[None,\emptyset,]}
ast:  ('/', ('^', ('@', 'None'), ('-', ('^', ('#', '1.0'), ('mat', ((('set', ()),), (('#', '0'),), (('@', 'dx'),)))))), ('not', ('vec', (('@', 'None'), ('set', ())))))
tex:  ('/', ('^', ('@', 'None'), ('-', ('^', ('#', '1.0'), ('vec', (('set', ()), ('#', '0'), ('@', 'dx')))))), ('not', ('vec', (('@', 'None'), ('set', ())))))

text: \int_\lim_{x \to 1} oo^{not 1e100}^\{{partialx+dx},{\partialx*.1},partialx!} \log_\left|partialx\right|{1 \cdot False} dx
ast:  ('intg', ('*', (('@', 'x'), ('lim', ('*', (('^', ('^', ('@', 'oo'), ('not', ('#', '1e+100'))), ('set', (('+', (('@', 'dx'), ('@', 'dx'))), ('*', (('@', 'dx'), ('#', '0.1'))), ('!', ('@', 'dx'))))), ('log', ('@', 'x')), ('|', ('@', 'dx')), ('#', '1'), ('@', 'False'))), ('@', 'x'), ('#', '1')))), ('@', 'dx'))
nat:  ('intg', ('*', (('@', 'x'), ('lim', ('*', (('^', ('^', ('@', 'oo'), ('not', ('#', '1e+100'))), ('set', (('+', (('@', 'dx'), ('@', 'dx'))), ('*', (('@', 'dx'), ('#', '0.1'))), ('!', ('@', 'dx'))))), ('log', ('@', 'x')), ('|', ('@', 'dx')), ('#', '1'), ('@', 'False'), ('@', 'dx'))), ('@', 'x'), ('#', '1')))), ('@', ''))

text: Piecewise((((Union(1.0, 0.1)) / d)**3 / (dy**1*dz**2*False)*Union(Complement(0, 1), Complement(1, 0)) = Union(Complement(a, Union(-1, oo, a_prime)), Complement(Union(-1, oo, a_prime), a))*log1.if*(Union(Complement(Union(Complement(False, dx), Complement(dx, False)), FiniteSet()), Complement(FiniteSet(), Union(Complement(False, dx), Complement(dx, False))))), FiniteSet((1e-100 or 1.0 or True, a[FiniteSet(), 1., -1.0], 1 in dx), False**1*e100*partialx**a)))
ast:  ('func', 'Piecewise', ((',', (('=', '=', ('*', (('/', ('^', ('/', ('func', 'Union', (('#', '1.0'), ('#', '0.1'))), ('@', 'd')), ('#', '3')), ('*', (('^', ('@', 'dy'), ('#', '1')), ('^', ('@', 'dz'), ('#', '2')), ('@', 'False')))), ('func', 'Union', (('func', 'Complement', (('#', '0'), ('#', '1'))), ('func', 'Complement', (('#', '1'), ('#', '0'))))))), ('*', (('func', 'Union', (('func', 'Complement', (('@', 'a'), ('func', 'Union', (('#', '-1'), ('@', 'oo'), ('@', 'a_prime'))))), ('func', 'Complement', (('func', 'Union', (('#', '-1'), ('@', 'oo'), ('@', 'a_prime'))), ('@', 'a'))))), ('.', ('@', 'log1'), 'if'), ('func', 'Union', (('func', 'Complement', (('func', 'Union', (('func', 'Complement', (('@', 'False'), ('@', 'dx'))), ('func', 'Complement', (('@', 'dx'), ('@', 'False'))))), ('func', 'FiniteSet', ()))), ('func', 'Complement', (('func', 'FiniteSet', ()), ('func', 'Union', (('func', 'Complement', (('@', 'False'), ('@', 'dx'))), ('func', 'Complement', (('@', 'dx'), ('@', 'False')))))))))))), ('func', 'FiniteSet', ((',', (('or', (('#', '1e-100'), ('#', '1.0'), ('@', 'True'))), ('idx', ('@', 'a'), (('func', 'FiniteSet', ()), ('#', '1.'), ('#', '-1.0'))), ('=', 'in', ('#', '1'), ('@', 'dx')))), ('*', (('^', ('@', 'False'), ('#', '1')), ('@', 'e100'), ('^', ('@', 'dx'), ('@', 'a')))))))),))
nat:  ('func', 'Piecewise', ((',', (('=', '=', ('*', (('/', ('^', ('/', ('func', 'Union', (('#', '1.0'), ('#', '0.1'))), ('@', 'd')), ('#', '3')), ('*', (('^', ('@', 'dy'), ('#', '1')), ('^', ('@', 'dz'), ('#', '2')), ('@', 'False')))), ('func', 'Union', (('func', 'Complement', (('#', '0'), ('#', '1'))), ('func', 'Complement', (('#', '1'), ('#', '0'))))))), ('*', (('func', 'Union', (('func', 'Complement', (('@', 'a'), ('func', 'Union', (('#', '-1'), ('@', 'oo'), ('@', 'a_prime'))))), ('func', 'Complement', (('func', 'Union', (('#', '-1'), ('@', 'oo'), ('@', 'a_prime'))), ('@', 'a'))))), ('.', ('@', 'log1'), 'if', (('func', 'Union', (('func', 'Complement', (('func', 'Union', (('func', 'Complement', (('@', 'False'), ('@', 'dx'))), ('func', 'Complement', (('@', 'dx'), ('@', 'False'))))), ('func', 'FiniteSet', ()))), ('func', 'Complement', (('func', 'FiniteSet', ()), ('func', 'Union', (('func', 'Complement', (('@', 'False'), ('@', 'dx'))), ('func', 'Complement', (('@', 'dx'), ('@', 'False'))))))))),))))), ('func', 'FiniteSet', ((',', (('or', (('#', '1e-100'), ('#', '1.0'), ('@', 'True'))), ('idx', ('@', 'a'), (('func', 'FiniteSet', ()), ('#', '1.'), ('#', '-1.0'))), ('=', 'in', ('#', '1'), ('@', 'dx')))), ('*', (('^', ('@', 'False'), ('#', '1')), ('@', 'e100'), ('^', ('@', 'dx'), ('@', 'a')))))))),))

text: {({\frac{({1},{1.},{0})}{{{1e-100} and {\partial }}}},{{-{-1}}^{{1} : {\partial x} : {0}}})}
ast:  (',', (('/', (',', (('#', '1'), ('#', '1.'), ('#', '0'))), ('and', (('#', '1e-100'), ('@', 'partial')))), ('^', ('-', ('#', '-1')), ('slice', ('#', '1'), ('@', 'dx'), ('#', '0')))))
nat:  (',', (('/', (',', (('#', '1'), ('#', '1.'), ('#', '0'))), ('and', (('#', '1e-100'), ('@', 'partial')))), ('slice', ('^', ('-', ('#', '-1')), ('#', '1')), ('@', 'dx'), ('#', '0'))))