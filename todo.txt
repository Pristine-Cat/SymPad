> VarNulls, especially in matrices
> \[], \[[]], \[[], []], ...
> change 'vec' object to column 'mat' object?

> remove \lim, \sum and definite \int vars from free_vars

> ' differential operator
> var_prime in quick mode
> AppliedUndef, in func and in _Mul
> Function ('f') (), Function ('f') (x), Function ('f') (x, y)
> ODEs

> len (ast.comma) -> ast.comma.len

> importing modules to allow custom code execution

> better plotting limits specification

> test_python module

> vector calculus
> nabla, laplacian

> random server port selection / fallback
> emptyset Unicode symbol
> ProductSet?
> ImageSet?

> formatting: no spacing for nums - 3 x -> 3x?
> formatting: quick mode no spacing for vars x y z -> xyz?
> formatting: non-quick mode explicit tex spacing for vars var1 var2 -> var1\ var2?

> floor / ceiling

> display subscripts
> parse subscripts

> SYM.PY REFACTOR!

> 1 in x and other sets to accept symbols, how?
> plots as objects?
> flush sys.stdout to msg before sending exception?
> function names allowed as variables on assignment?
> xlat different types and initializations of matrices?
> long variable name shortcut? $?
> derivative and integral of lambda functions? lambdas as expressions?
> eliminate potentially pointless minus rewriting by moving negation in parse higherarchy?

> break out state machine from server

> fix instances unparenthesized tuples in function arguments? Not possible during normal entry but might appear somehow anyway.

> sequence (factorial (k), (k, 1, oo))
> ImageSet (Lambda (n, 2 n pi + pi / 2), Integers)

> var assumptions
> Proper implementation of vectors with "\vec{x}" and "\hat{i}" variables
> systems of equations
> more graphical plots
> numpy support


Errors:


text: \[{-1 : xyzd : oo and {dz||True} and \{\infty zoo,partialx,1e-100}} [\[[-\infty zoo,\int \partialx dx,\frac1e1001e+100,],[dz**a,\log_1None,dx : dz : b,],], \log_\frac1.1e+100\infty zoo if 1.0 else False if 'str'],\[[],],Sum ({\tilde\infty *"str"}!, (x, \[[{dz \cdot \infty zoo},],[(False,dz),],], {xyzd if partialx else \partial ||[]})),]

text: {-1.0  in  True if {partialx+a+\infty zoo} else [1,\partial ] if \ln\partialx else {-1.0 or \partialx}*\[[],]}
ast:  ('piece', ((('=', 'in', ('#', '-1.0'), ('@', 'True')), ('+', (('@', 'dx'), ('@', 'a'), ('*', (('@', 'oo'), ('@', 'zoo')))))), (('[', (('#', '1'), ('@', 'partial'))), ('log', ('@', 'dx'))), (('*', (('or', (('#', '-1.0'), ('@', 'dx'))), ('mat', ((),)))), True)))
tex:  ('piece', ((('=', 'in', ('#', '-1.0'), ('@', 'True')), ('+', (('@', 'dx'), ('@', 'a'), ('*', (('@', 'oo'), ('@', 'zoo')))))), (('[', (('#', '1'), ('@', 'partial'))), ('log', ('@', 'dx'))), (('*', (('or', (('#', '-1.0'), ('@', 'dx'))), ('mat', ()))), True)))
\[]
\[[]]
\[[], []]


text: \{\fracNonedx**{dx} : {{partialx||dy}+{b or 'str'}}}
ast:  ('set', (('slice', ('*', (('/', ('@', 'N'), ('@', 'o')), ('^', ('@', 'nedx'), ('@', 'dx')))), ('+', (('||', (('@', 'dx'), ('@', 'dy'))), ('or', (('@', 'b'), ('"', 'str'))))), None),))
tex:  ('dict', ((('*', (('/', ('@', 'N'), ('@', 'o')), ('^', ('@', 'nedx'), ('@', 'dx')))), ('+', (('||', (('@', 'dx'), ('@', 'dy'))), ('or', (('@', 'b'), ('"', 'str')))))),))
nat:  ('dict', ((('*', (('/', ('@', 'N'), ('@', 'o')), ('^', ('@', 'nedx'), ('@', 'dx')))), ('+', (('||', (('@', 'dx'), ('@', 'dy'))), ('or', (('@', 'b'), ('"', 'str')))))),))


text:    \[[\log_lambda x, y, z: \int .1 dxSum ({.1&&\emptyset&&partial}, (x, \log_False\partial , {1e-100+\partial x+-1})),{{\left|"str"\right|+1e+100 / dy}*{-1.0^^dx^^\partialx}^{\partial ||1.0||2}},],[[{{\emptyset : \partialx,b : \tilde\infty ,1 : 2} and "str"^1e-100},Sum (\partialx, (x, 1e-100, 0)) [-1.],{a : \left|\partial \right|,partial : {None  partialx}}],{\sqrt[1e100]partialx == \left|\emptyset\right|^^sqrt\[[dy,False,.1,],[\partialy,1.,oo,],[\emptyset,0,1e+100,],]^^Limit (d^{4} / dz^{1} dz^{2} dy^{1} c, x, \sum_{x = \infty zoo}^partial False)},],]
textpy:  Matrix([[log(ambda) / log(l)*x, y, slice(z, Integral(0.1, xSum)*(Intersection(0.1, FiniteSet(), partial), (x, log(alse) / log(F)*partial, 1e-100 + partialx - 1))), (abs('str') + 1e+100/dy)*Union(Complement(Union(Complement(-1.0, dx), Complement(dx, -1.0)), partialx), Complement(partialx, Union(Complement(-1.0, dx), Complement(dx, -1.0))))**Union(partial, 1.0, 2)], [[And({FiniteSet(): partialx, b: zoo, 1: 2}, 'str'**1*e - 100), Sum(partialx, (x, 1e-100, 0))[-1.], {a: abs(partial), partial: None*partialx}], Eq(partialx**(1/1e+100), Union(Complement(Union(Complement(abs(FiniteSet()), sqrt(Matrix([[dy, False, 0.1], [partialy, 1., oo], [FiniteSet(), 0, 1e+100]]))), Complement(sqrt(Matrix([[dy, False, 0.1], [partialy, 1., oo], [FiniteSet(), 0, 1e+100]])), abs(FiniteSet()))), Limit(Derivative(c, z, 1, z, 2, y, 1), x, Sum(artial*False, (x, oo*zoo, p)))), Complement(Limit(Derivative(c, z, 1, z, 2, y, 1), x, Sum(artial*False, (x, oo*zoo, p))), Union(Complement(abs(FiniteSet()), sqrt(Matrix([[dy, False, 0.1], [partialy, 1., oo], [FiniteSet(), 0, 1e+100]]))), Complement(sqrt(Matrix([[dy, False, 0.1], [partialy, 1., oo], [FiniteSet(), 0, 1e+100]])), abs(FiniteSet())))))), , ]])

text: \[[\log_lambda x, y, z: \int .1 dxSum ({.1&&\emptyset&&partial}, (x, \log_False\partial , {1e-100+\partial x+-1})),{{\left|"str"\right|+1e+100 / dy}*{-1.0^^dx^^\partialx}^{\partial ||1.0||2}},],[[{{\emptyset : \partialx,b : \tilde\infty ,1 : 2} and "str"^1e-100},Sum (\partialx, (x, 1e-100, 0)) [-1.],{a : \left|\partial \right|,partial : {None  partialx}}],{\sqrt[1e100]partialx == \left|\emptyset\right|^^sqrt\[[dy,False,.1,],[\partialy,1.,oo,],[\emptyset,0,1e+100,],]^^Limit (d^{4} / dz^{1} dz^{2} dy^{1} c, x, \sum_{x = \infty zoo}^partial False)},],]
ast:  ('mat', ((('*', (('log', ('@', 'ambda'), ('@', 'l')), ('@', 'x'))), ('@', 'y'), ('slice', ('@', 'z'), ('*', (('intg', ('#', '0.1'), ('@', 'dxSum')), (',', (('&&', (('#', '0.1'), ('set', ()), ('@', 'partial'))), (',', (('@', 'x'), ('*', (('log', ('@', 'alse'), ('@', 'F')), ('@', 'partial'))), ('+', (('#', '1e-100'), ('@', 'dx'), ('#', '-1'))))))))), None), ('*', (('+', (('|', ('"', 'str')), ('/', ('#', '1e+100'), ('@', 'dy')))), ('^', ('^^', (('#', '-1.0'), ('@', 'dx'), ('@', 'dx'))), ('||', (('@', 'partial'), ('#', '1.0'), ('#', '2'))))))), (('[', (('and', (('dict', ((('set', ()), ('@', 'dx')), (('@', 'b'), ('@', 'zoo')), (('#', '1'), ('#', '2')))), ('+', (('*', (('^', ('"', 'str'), ('#', '1')), ('@', 'e'))), ('#', '-100'))))), ('idx', ('func', 'Sum', (('@', 'dx'), (',', (('@', 'x'), ('#', '1e-100'), ('#', '0'))))), (('#', '-1.'),)), ('dict', ((('@', 'a'), ('|', ('@', 'partial'))), (('@', 'partial'), ('*', (('@', 'None'), ('@', 'dx')))))))), ('<>', ('sqrt', ('@', 'dx'), ('#', '1e+100')), (('==', ('^^', (('|', ('set', ())), ('sqrt', ('mat', ((('@', 'dy'), ('@', 'False'), ('#', '0.1')), (('@', 'dy'), ('#', '1.'), ('@', 'oo')), (('set', ()), ('#', '0'), ('#', '1e+100'))))), ('func', 'Limit', (('diff', ('@', 'c'), (('^', ('@', 'dz'), ('#', '1')), ('^', ('@', 'dz'), ('#', '2')), ('^', ('@', 'dy'), ('#', '1')))), ('@', 'x'), ('sum', ('*', (('@', 'artial'), ('@', 'False'))), ('@', 'x'), ('*', (('@', 'oo'), ('@', 'zoo'))), ('@', 'p'))))))),)), ('@', ''), ('@', ''))))
tex:  ('mat', ((('*', (('log', ('@', 'ambda'), ('@', 'l')), ('@', 'x'))), ('@', 'y'), ('slice', ('@', 'z'), ('*', (('intg', ('#', '0.1'), ('@', 'dxSum')), (',', (('&&', (('#', '0.1'), ('set', ()), ('@', 'partial'))), (',', (('@', 'x'), ('*', (('log', ('@', 'alse'), ('@', 'F')), ('@', 'partial'))), ('+', (('#', '1e-100'), ('@', 'dx'), ('#', '-1'))))))))), None), ('*', (('+', (('|', ('"', 'str')), ('/', ('#', '1e+100'), ('@', 'dy')))), ('^', ('^^', (('#', '-1.0'), ('@', 'dx'), ('@', 'dx'))), ('||', (('@', 'partial'), ('#', '1.0'), ('#', '2'))))))), (('[', (('and', (('dict', ((('set', ()), ('@', 'dx')), (('@', 'b'), ('@', 'zoo')), (('#', '1'), ('#', '2')))), ('+', (('*', (('^', ('"', 'str'), ('#', '1')), ('@', 'e'))), ('#', '-100'))))), ('idx', ('func', 'Sum', (('@', 'dx'), (',', (('@', 'x'), ('#', '1e-100'), ('#', '0'))))), (('#', '-1.'),)), ('dict', ((('@', 'a'), ('|', ('@', 'partial'))), (('@', 'partial'), ('*', (('@', 'None'), ('@', 'dx')))))))), ('<>', ('sqrt', ('@', 'dx'), ('#', '1e+100')), (('==', ('^^', (('|', ('set', ())), ('sqrt', ('mat', ((('@', 'dy'), ('@', 'False'), ('#', '0.1')), (('@', 'dy'), ('#', '1.'), ('@', 'oo')), (('set', ()), ('#', '0'), ('#', '1e+100'))))), ('func', 'Limit', (('diff', ('@', 'c'), (('^', ('@', 'dz'), ('#', '1')), ('^', ('@', 'dz'), ('#', '2')), ('^', ('@', 'dy'), ('#', '1')))), ('@', 'x'), ('sum', ('*', (('@', 'artial'), ('@', 'False'))), ('@', 'x'), ('*', (('@', 'oo'), ('@', 'zoo'))), ('@', 'p'))))))),)), ('dict', ()), ('dict', ()))))

\[[\log_lambda x, y, z: \int .1 dxSum ({.1&&\emptyset&&partial}, (x, \log_False\partial , {1e-100+\partial x+-1})),{{\left|"str"\right|+1e+100 / dy}*{-1.0^^dx^^\partialx}^{\partial ||1.0||2}},],[[{{\emptyset : \partialx,b : \tilde\infty ,1 : 2} and "str"^1e-100},Sum (\partialx, (x, 1e-100, 0)) [-1.],{a : \left|\partial \right|,partial : {None  partialx}}],{\sqrt[1e100]partialx == \left|\emptyset\right|^^sqrt\[[dy,False,.1,],[\partialy,1.,oo,],[\emptyset,0,1e+100,],]^^Limit (d^{4} / dz^{1} dz^{2} dy^{1} c, x, \sum_{x = \infty zoo}^partial False)},],]
\[[\log_lambda x, y, z: \int .1 dx,a,],[b,c,],]
\[[\log_lambda x, y, z: \int 1 dx,a,],[b,c,],]

