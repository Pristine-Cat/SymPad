#!/usr/bin/env python

import unittest

from sast import AST
from sparser import Parser
from sym import *

parser = Parser ()

def sparser (text):
	return parser.parse (text) [0]

def ast2tex2ast (ast):
	return sparser (ast2tex (ast))

def ast2nat2ast (ast):
	return sparser (ast2nat (ast))

def ast2py2ast (ast):
	return sparser (ast2py (ast))

def ast2spt2ast (ast):
	return spt2ast (ast2spt (ast, doit = True))

p = sparser

class Test (unittest.TestCase):
	def test_sparser (self):
		self.assertEqual (p ('1'), ('#', '1'))
		self.assertEqual (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901'), ('#', '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901'))
		self.assertEqual (p ('x'), ('@', 'x'))
		self.assertEqual (p ('-1'), ('#', '-1'))
		self.assertEqual (p ('-x'), ('-', ('@', 'x')))
		self.assertEqual (p ('{x}'), ('@', 'x'))
		self.assertEqual (p ('{{x}}'), ('@', 'x'))
		self.assertEqual (p ('()'), ('(', (',', ())))
		self.assertEqual (p ('(x)'), ('(', ('@', 'x')))
		self.assertEqual (p ('(x,)'), ('(', (',', (('@', 'x'),))))
		self.assertEqual (p ('(x,y)'), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (p ('(x,y,)'), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (p ('[]'), ('[', ()))
		self.assertEqual (p ('[x]'), ('[', (('@', 'x'),)))
		self.assertEqual (p ('[x,]'), ('[', (('@', 'x'),)))
		self.assertEqual (p ('[x,y]'), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (p ('[x,y,]'), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (p ('"x\\x20\\n"'), ('"', 'x \n'))
		self.assertEqual (p ("'x\\x20\\n'"), ('"', 'x \n'))
		self.assertEqual (p ('|x|'), ('|', ('@', 'x')))
		self.assertEqual (p ('x!'), ('!', ('@', 'x')))
		self.assertEqual (p ('x+y'), ('+', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (p ('x-y'), ('+', (('@', 'x'), ('-', ('@', 'y')))))
		self.assertEqual (p ('x*y'), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (p ('xy'), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (p ('x(y)'), ('*', (('@', 'x'), ('(', ('@', 'y')))))
		self.assertEqual (p ('x/y'), ('/', ('@', 'x'), ('@', 'y')))
		self.assertEqual (p ('x^y'), ('^', ('@', 'x'), ('@', 'y')))
		self.assertEqual (p ('log x'), ('log', ('@', 'x')))
		self.assertEqual (p ('log {x}'), ('log', ('@', 'x')))
		self.assertEqual (p ('log (x)'), ('log', ('(', ('@', 'x'))))
		self.assertEqual (p ('\\log_2 x'), ('log', ('@', 'x'), ('#', '2')))
		self.assertEqual (p ('\\log_2 {x}'), ('log', ('@', 'x'), ('#', '2')))
		self.assertEqual (p ('\\log_2 (x)'), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (p ('sqrt x'), ('sqrt', ('@', 'x')))
		self.assertEqual (p ('sqrt {x}'), ('sqrt', ('@', 'x')))
		self.assertEqual (p ('sqrt (x)'), ('sqrt', ('(', ('@', 'x'))))
		self.assertEqual (p ('sqrt[3] x'), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (p ('sqrt[3] {x}'), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (p ('sqrt[3] (x)'), ('sqrt', ('(', ('@', 'x')), ('#', '3')))
		self.assertEqual (p ('sin x'), ('func', 'sin', ('@', 'x')))
		self.assertEqual (p ('sin^2 x'), ('^', ('func', 'sin', ('@', 'x')), ('#', '2')))
		self.assertEqual (p ('sin (x)'), ('func', 'sin', ('(', ('@', 'x'))))
		self.assertEqual (p ('sin (x)^2'), ('^', ('func', 'sin', ('(', ('@', 'x'))), ('#', '2')))
		self.assertEqual (p ('{sin x}^2'), ('^', ('func', 'sin', ('@', 'x')), ('#', '2')))
		self.assertEqual (p ('sin**2 x'), ('^', ('func', 'sin', ('@', 'x')), ('#', '2')))
		self.assertEqual (p ('sin**-1 x'), ('func', 'asin', ('@', 'x')))
		self.assertEqual (p ('\\lim_{x\\to0} 1/x'), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (p ('\\lim_{x\\to0^+} 1/x'), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (p ('\\lim_{x\\to0**-} 1/x'), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (p ('Limit (1/x, x, 0)'), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (p ('Limit (1/x, x, 0, "-")'), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (p ('Limit (1/x, x, 0, dir="+-")'), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (p ('\\sum_{n=0}^\\infty x^n/n!'), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', '\\infty')))
		self.assertEqual (p ('Sum (x^n/n!, (n, 0, oo))'), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', '\\infty')))
		self.assertEqual (p ('d/dx x**2y**2z'), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('@', 'dx'),)))
		self.assertEqual (p ('d^2/dx^2 x^2y**2z'), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')),)))
		self.assertEqual (p ('d^3/dx^2dy x^2y**2z'), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'))))
		self.assertEqual (p ('\\partial^4/\\partialx^2\\partial y\\partialz x^2y**2z'), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', '\\partial x'), ('#', '2')), ('@', '\\partial y'), ('@', '\\partial z'))))
		self.assertEqual (p ('Derivative (x^2y**2z, x, 2, y, z)'), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'), ('@', 'dz'))))
		self.assertEqual (p ('\\int dx'), ('intg', None, ('@', 'dx')))
		self.assertEqual (p ('\\int x dx'), ('intg', ('@', 'x'), ('@', 'dx')))
		self.assertEqual (p ('\\int_0^1 x dx'), ('intg', ('@', 'x'), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (p ('\\int_0^1 \\int y dy dx'), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (p ('Integral (\\int y dy, (x, 0, 1))'), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (p ('{1,}'), ('vec', (('#', '1'),)))
		self.assertEqual (p ('{1,2}'), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (p ('{1,2,}'), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (p ('{{1,},}'), ('mat', ((('#', '1'),),)))
		self.assertEqual (p ('{{1,},{2,}}'), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (p ('{{1,},{2,},}'), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]'), ('mat', ((('#', '1'),),)))
		self.assertEqual (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}'), ('mat', ((('#', '1'),),)))
		self.assertEqual (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}'), ('mat', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}'), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}'), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (p ('-1**x'), ('-', ('^', ('#', '1'), ('@', 'x'))))
		self.assertEqual (p ('{-1}**x'), ('^', ('#', '-1'), ('@', 'x')))
		self.assertEqual (p ('-{-1}**x'), ('-', ('^', ('#', '-1'), ('@', 'x'))))
		self.assertEqual (p ('(-1)**x'), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (p ('-(-1)**x'), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (p ('{1,2}!'), ('!', ('vec', (('#', '1'), ('#', '2')))))
		self.assertEqual (p ('{{0,1},{1,0}}**x'), ('^', ('mat', ((('#', '0'), ('#', '1')), (('#', '1'), ('#', '0')))), ('@', 'x')))
		self.assertEqual (p ('{{1,2},{3,4}}!'), ('!', ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4'))))))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.T'), ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.T.T'), ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'), 'T'))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.T.T.T'), ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'), 'T'), 'T'))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.transpose ()'), ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', (',', ())))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()'), ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', (',', ())), 'transpose', (',', ())))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()'), ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', (',', ())), 'transpose', (',', ())), 'transpose', (',', ())))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()'), ('.', ('.', ('.', ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', (',', ())), 'transpose', (',', ())), 'T'), 'T'), 'transpose', (',', ())), 'transpose', (',', ())))
		self.assertEqual (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}'), ('*', (('mat', ((('@', 'A'), ('@', 'B')), (('@', 'C'), ('@', 'D')))), ('vec', (('@', 'x'), ('@', 'y'))))))
		self.assertEqual (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\Gamma \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\zeta \\beta \\phi \\Sigma'), ('*', (('@', '\\Theta'), ('@', '\\Lambda'), ('@', '\\xi'), ('@', '\\Omega'), ('@', '\\alpha'), ('@', '\\theta'), ('@', '\\Phi'), ('@', '\\gamma'), ('@', '\\nu'), ('@', '\\Gamma'), ('@', '\\delta'), ('@', '\\rho'), ('@', '\\lambda'), ('@', '\\iota'), ('@', '\\chi'), ('@', '\\psi'), ('@', '\\Psi'), ('@', '\\Xi'), ('@', '\\tau'), ('@', '\\mu'), ('@', '\\sigma'), ('@', '\\omega'), ('@', '\\kappa'), ('@', '\\upsilon'), ('@', '\\eta'), ('@', '\\Pi'), ('@', '\\epsilon'), ('@', '\\Delta'), ('@', '\\Upsilon'), ('@', '\\zeta'), ('@', '\\beta'), ('@', '\\phi'), ('@', '\\Sigma'))))

	def test_ast2tex (self):
		self.assertEqual (ast2tex (p ('1')), '1')
		self.assertEqual (ast2tex (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')
		self.assertEqual (ast2tex (p ('x')), 'x')
		self.assertEqual (ast2tex (p ('-1')), '-1')
		self.assertEqual (ast2tex (p ('-x')), '-x')
		self.assertEqual (ast2tex (p ('{x}')), 'x')
		self.assertEqual (ast2tex (p ('{{x}}')), 'x')
		self.assertEqual (ast2tex (p ('()')), '\\left( \\right)')
		self.assertEqual (ast2tex (p ('(x)')), '\\left(x \\right)')
		self.assertEqual (ast2tex (p ('(x,)')), '\\left(x, \\right)')
		self.assertEqual (ast2tex (p ('(x,y)')), '\\left(x, y \\right)')
		self.assertEqual (ast2tex (p ('(x,y,)')), '\\left(x, y \\right)')
		self.assertEqual (ast2tex (p ('[]')), '\\left[ \\right]')
		self.assertEqual (ast2tex (p ('[x]')), '\\left[x \\right]')
		self.assertEqual (ast2tex (p ('[x,]')), '\\left[x \\right]')
		self.assertEqual (ast2tex (p ('[x,y]')), '\\left[x, y \\right]')
		self.assertEqual (ast2tex (p ('[x,y,]')), '\\left[x, y \\right]')
		self.assertEqual (ast2tex (p ('"x\\x20\\n"')), "\\text{'x \\n'}")
		self.assertEqual (ast2tex (p ("'x\\x20\\n'")), "\\text{'x \\n'}")
		self.assertEqual (ast2tex (p ('|x|')), '\\left|x \\right|')
		self.assertEqual (ast2tex (p ('x!')), 'x!')
		self.assertEqual (ast2tex (p ('x+y')), 'x + y')
		self.assertEqual (ast2tex (p ('x-y')), 'x - y')
		self.assertEqual (ast2tex (p ('x*y')), 'x y')
		self.assertEqual (ast2tex (p ('xy')), 'x y')
		self.assertEqual (ast2tex (p ('x(y)')), 'x \\left(y \\right)')
		self.assertEqual (ast2tex (p ('x/y')), '\\frac{x}{y}')
		self.assertEqual (ast2tex (p ('x^y')), 'x^y')
		self.assertEqual (ast2tex (p ('log x')), '\\ln\\left(x \\right)')
		self.assertEqual (ast2tex (p ('log {x}')), '\\ln\\left(x \\right)')
		self.assertEqual (ast2tex (p ('log (x)')), '\\ln\\left(x \\right)')
		self.assertEqual (ast2tex (p ('\\log_2 x')), '\\log_2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('\\log_2 {x}')), '\\log_2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('\\log_2 (x)')), '\\log_2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('sqrt x')), '\\sqrt{x}')
		self.assertEqual (ast2tex (p ('sqrt {x}')), '\\sqrt{x}')
		self.assertEqual (ast2tex (p ('sqrt (x)')), '\\sqrt{x}')
		self.assertEqual (ast2tex (p ('sqrt[3] x')), '\\sqrt[3]{x}')
		self.assertEqual (ast2tex (p ('sqrt[3] {x}')), '\\sqrt[3]{x}')
		self.assertEqual (ast2tex (p ('sqrt[3] (x)')), '\\sqrt[3]{x}')
		self.assertEqual (ast2tex (p ('sin x')), '\\sin\\left(x \\right)')
		self.assertEqual (ast2tex (p ('sin^2 x')), '\\sin^2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('sin (x)')), '\\sin\\left(x \\right)')
		self.assertEqual (ast2tex (p ('sin (x)^2')), '\\sin^2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('{sin x}^2')), '\\sin^2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('sin**2 x')), '\\sin^2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('sin**-1 x')), '\\sin^{-1}\\left(x \\right)')
		self.assertEqual (ast2tex (p ('\\lim_{x\\to0} 1/x')), '\\lim_{x \\to 0} \\frac{1}{x}')
		self.assertEqual (ast2tex (p ('\\lim_{x\\to0^+} 1/x')), '\\lim_{x \\to 0^+} \\frac{1}{x}')
		self.assertEqual (ast2tex (p ('\\lim_{x\\to0**-} 1/x')), '\\lim_{x \\to 0^-} \\frac{1}{x}')
		self.assertEqual (ast2tex (p ('Limit (1/x, x, 0)')), '\\lim_{x \\to 0^+} \\frac{1}{x}')
		self.assertEqual (ast2tex (p ('Limit (1/x, x, 0, "-")')), '\\lim_{x \\to 0^-} \\frac{1}{x}')
		self.assertEqual (ast2tex (p ('Limit (1/x, x, 0, dir="+-")')), '\\lim_{x \\to 0} \\frac{1}{x}')
		self.assertEqual (ast2tex (p ('\\sum_{n=0}^\\infty x^n/n!')), '\\sum_{n = 0}^\\infty \\frac{x^n}{n!}')
		self.assertEqual (ast2tex (p ('Sum (x^n/n!, (n, 0, oo))')), '\\sum_{n = 0}^\\infty \\frac{x^n}{n!}')
		self.assertEqual (ast2tex (p ('d/dx x**2y**2z')), '\\frac{d}{dx}\\left(x^2 y^2 z \\right)')
		self.assertEqual (ast2tex (p ('d^2/dx^2 x^2y**2z')), '\\frac{d^2}{dx^2}\\left(x^2 y^2 z \\right)')
		self.assertEqual (ast2tex (p ('d^3/dx^2dy x^2y**2z')), '\\frac{\\partial^3}{\\partial x^2\\partial y}\\left(x^2 y^2 z \\right)')
		self.assertEqual (ast2tex (p ('\\partial^4/\\partialx^2\\partial y\\partialz x^2y**2z')), '\\frac{\\partial^4}{\\partial x^2\\partial y\\partial z}\\left(x^2 y^2 z \\right)')
		self.assertEqual (ast2tex (p ('Derivative (x^2y**2z, x, 2, y, z)')), '\\frac{\\partial^4}{\\partial x^2\\partial y\\partial z}\\left(x^2 y^2 z \\right)')
		self.assertEqual (ast2tex (p ('\\int dx')), '\\int \\ dx')
		self.assertEqual (ast2tex (p ('\\int x dx')), '\\int x \\ dx')
		self.assertEqual (ast2tex (p ('\\int_0^1 x dx')), '\\int_0^1 x \\ dx')
		self.assertEqual (ast2tex (p ('\\int_0^1 \\int y dy dx')), '\\int_0^1 \\int y \\ dy \\ dx')
		self.assertEqual (ast2tex (p ('Integral (\\int y dy, (x, 0, 1))')), '\\int_0^1 \\int y \\ dy \\ dx')
		self.assertEqual (ast2tex (p ('{1,}')), '\\begin{bmatrix} 1 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('{1,2}')), '\\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('{1,2,}')), '\\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('{{1,},}')), '\\begin{bmatrix} 1 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('{{1,},{2,}}')), '\\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('{{1,},{2,},}')), '\\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), '\\begin{bmatrix} 1 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), '\\begin{bmatrix} 1 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), '\\begin{bmatrix} 1 & 2 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), '\\begin{bmatrix} 1 & 2 \\\\ 3 & 4 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), '\\begin{bmatrix} 1 & 2 \\\\ 3 & 4 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('-1**x')), '-1^x')
		self.assertEqual (ast2tex (p ('{-1}**x')), '\\left(-1 \\right)^x')
		self.assertEqual (ast2tex (p ('-{-1}**x')), '-\\left(-1 \\right)^x')
		self.assertEqual (ast2tex (p ('(-1)**x')), '\\left(-1 \\right)^x')
		self.assertEqual (ast2tex (p ('-(-1)**x')), '-\\left(-1 \\right)^x')
		self.assertEqual (ast2tex (p ('{1,2}!')), '\\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}!')
		self.assertEqual (ast2tex (p ('{{0,1},{1,0}}**x')), '{\\begin{bmatrix} 0 & 1 \\\\ 1 & 0 \\end{bmatrix}}^x')
		self.assertEqual (ast2tex (p ('{{1,2},{3,4}}!')), '\\begin{bmatrix} 1 & 2 \\\\ 3 & 4 \\end{bmatrix}!')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.T')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.\\text{T}')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.T.T')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.\\text{T}.\\text{T}')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.T.T.T')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.\\text{T}.\\text{T}.\\text{T}')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.transpose ()')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.\\text{transpose}\\left( \\right)')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.\\text{transpose}\\left( \\right).\\text{transpose}\\left( \\right)')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.\\text{transpose}\\left( \\right).\\text{transpose}\\left( \\right).\\text{transpose}\\left( \\right)')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.\\text{transpose}\\left( \\right).\\text{transpose}\\left( \\right).\\text{T}.\\text{T}.\\text{transpose}\\left( \\right).\\text{transpose}\\left( \\right)')
		self.assertEqual (ast2tex (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), '\\begin{bmatrix} A & B \\\\ C & D \\end{bmatrix} \\cdot \\begin{bmatrix} x \\\\ y \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\Gamma \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\zeta \\beta \\phi \\Sigma')), '\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\Gamma \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\zeta \\beta \\phi \\Sigma')

	def test_ast2nat (self):
		self.assertEqual (ast2nat (p ('1')), '1')
		self.assertEqual (ast2nat (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')
		self.assertEqual (ast2nat (p ('x')), 'x')
		self.assertEqual (ast2nat (p ('-1')), '-1')
		self.assertEqual (ast2nat (p ('-x')), '-x')
		self.assertEqual (ast2nat (p ('{x}')), 'x')
		self.assertEqual (ast2nat (p ('{{x}}')), 'x')
		self.assertEqual (ast2nat (p ('()')), '()')
		self.assertEqual (ast2nat (p ('(x)')), '(x)')
		self.assertEqual (ast2nat (p ('(x,)')), '(x,)')
		self.assertEqual (ast2nat (p ('(x,y)')), '(x, y)')
		self.assertEqual (ast2nat (p ('(x,y,)')), '(x, y)')
		self.assertEqual (ast2nat (p ('[]')), '[]')
		self.assertEqual (ast2nat (p ('[x]')), '[x]')
		self.assertEqual (ast2nat (p ('[x,]')), '[x]')
		self.assertEqual (ast2nat (p ('[x,y]')), '[x, y]')
		self.assertEqual (ast2nat (p ('[x,y,]')), '[x, y]')
		self.assertEqual (ast2nat (p ('"x\\x20\\n"')), "'x \\n'")
		self.assertEqual (ast2nat (p ("'x\\x20\\n'")), "'x \\n'")
		self.assertEqual (ast2nat (p ('|x|')), '|x|')
		self.assertEqual (ast2nat (p ('x!')), 'x!')
		self.assertEqual (ast2nat (p ('x+y')), 'x + y')
		self.assertEqual (ast2nat (p ('x-y')), 'x - y')
		self.assertEqual (ast2nat (p ('x*y')), 'xy')
		self.assertEqual (ast2nat (p ('xy')), 'xy')
		self.assertEqual (ast2nat (p ('x(y)')), 'x(y)')
		self.assertEqual (ast2nat (p ('x/y')), 'x/y')
		self.assertEqual (ast2nat (p ('x^y')), 'x**y')
		self.assertEqual (ast2nat (p ('log x')), 'ln(x)')
		self.assertEqual (ast2nat (p ('log {x}')), 'ln(x)')
		self.assertEqual (ast2nat (p ('log (x)')), 'ln(x)')
		self.assertEqual (ast2nat (p ('\\log_2 x')), '\\log_2(x)')
		self.assertEqual (ast2nat (p ('\\log_2 {x}')), '\\log_2(x)')
		self.assertEqual (ast2nat (p ('\\log_2 (x)')), '\\log_2(x)')
		self.assertEqual (ast2nat (p ('sqrt x')), '\\sqrt{x}')
		self.assertEqual (ast2nat (p ('sqrt {x}')), '\\sqrt{x}')
		self.assertEqual (ast2nat (p ('sqrt (x)')), '\\sqrt{x}')
		self.assertEqual (ast2nat (p ('sqrt[3] x')), '\\sqrt[3]{x}')
		self.assertEqual (ast2nat (p ('sqrt[3] {x}')), '\\sqrt[3]{x}')
		self.assertEqual (ast2nat (p ('sqrt[3] (x)')), '\\sqrt[3]{x}')
		self.assertEqual (ast2nat (p ('sin x')), 'sin(x)')
		self.assertEqual (ast2nat (p ('sin^2 x')), 'sin^2(x)')
		self.assertEqual (ast2nat (p ('sin (x)')), 'sin(x)')
		self.assertEqual (ast2nat (p ('sin (x)^2')), 'sin^2(x)')
		self.assertEqual (ast2nat (p ('{sin x}^2')), 'sin^2(x)')
		self.assertEqual (ast2nat (p ('sin**2 x')), 'sin^2(x)')
		self.assertEqual (ast2nat (p ('sin**-1 x')), 'asin(x)')
		self.assertEqual (ast2nat (p ('\\lim_{x\\to0} 1/x')), '\\lim_{x \\to 0} 1/x')
		self.assertEqual (ast2nat (p ('\\lim_{x\\to0^+} 1/x')), '\\lim_{x \\to 0**+} 1/x')
		self.assertEqual (ast2nat (p ('\\lim_{x\\to0**-} 1/x')), '\\lim_{x \\to 0**-} 1/x')
		self.assertEqual (ast2nat (p ('Limit (1/x, x, 0)')), '\\lim_{x \\to 0**+} 1/x')
		self.assertEqual (ast2nat (p ('Limit (1/x, x, 0, "-")')), '\\lim_{x \\to 0**-} 1/x')
		self.assertEqual (ast2nat (p ('Limit (1/x, x, 0, dir="+-")')), '\\lim_{x \\to 0} 1/x')
		self.assertEqual (ast2nat (p ('\\sum_{n=0}^\\infty x^n/n!')), '\\sum_{n=0}^oo x**n / n!')
		self.assertEqual (ast2nat (p ('Sum (x^n/n!, (n, 0, oo))')), '\\sum_{n=0}^oo x**n / n!')
		self.assertEqual (ast2nat (p ('d/dx x**2y**2z')), 'd/dx(x**2y**2z)')
		self.assertEqual (ast2nat (p ('d^2/dx^2 x^2y**2z')), 'd^2/dx**2(x**2y**2z)')
		self.assertEqual (ast2nat (p ('d^3/dx^2dy x^2y**2z')), 'd^3/dx**2dy(x**2y**2z)')
		self.assertEqual (ast2nat (p ('\\partial^4/\\partialx^2\\partial y\\partialz x^2y**2z')), '\\partial^4/\\partial x**2\\partial y\\partial z(x**2y**2z)')
		self.assertEqual (ast2nat (p ('Derivative (x^2y**2z, x, 2, y, z)')), 'd^4/dx**2dydz(x**2y**2z)')
		self.assertEqual (ast2nat (p ('\\int dx')), '\\int dx')
		self.assertEqual (ast2nat (p ('\\int x dx')), '\\int x dx')
		self.assertEqual (ast2nat (p ('\\int_0^1 x dx')), '\\int_0^1 x dx')
		self.assertEqual (ast2nat (p ('\\int_0^1 \\int y dy dx')), '\\int_0^1 \\int y dy dx')
		self.assertEqual (ast2nat (p ('Integral (\\int y dy, (x, 0, 1))')), '\\int_0^1 \\int y dy dx')
		self.assertEqual (ast2nat (p ('{1,}')), '{1,}')
		self.assertEqual (ast2nat (p ('{1,2}')), '{1,2}')
		self.assertEqual (ast2nat (p ('{1,2,}')), '{1,2}')
		self.assertEqual (ast2nat (p ('{{1,},}')), '{{1,},}')
		self.assertEqual (ast2nat (p ('{{1,},{2,}}')), '{{1,},{2,}}')
		self.assertEqual (ast2nat (p ('{{1,},{2,},}')), '{{1,},{2,}}')
		self.assertEqual (ast2nat (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), '{{1,},}')
		self.assertEqual (ast2nat (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), '{{1,},}')
		self.assertEqual (ast2nat (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), '{{1,2},}')
		self.assertEqual (ast2nat (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), '{{1,2},{3,4}}')
		self.assertEqual (ast2nat (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), '{{1,2},{3,4}}')
		self.assertEqual (ast2nat (p ('-1**x')), '-1**x')
		self.assertEqual (ast2nat (p ('{-1}**x')), '(-1)**x')
		self.assertEqual (ast2nat (p ('-{-1}**x')), '-(-1)**x')
		self.assertEqual (ast2nat (p ('(-1)**x')), '(-1)**x')
		self.assertEqual (ast2nat (p ('-(-1)**x')), '-(-1)**x')
		self.assertEqual (ast2nat (p ('{1,2}!')), '{1,2}!')
		self.assertEqual (ast2nat (p ('{{0,1},{1,0}}**x')), '{{0,1},{1,0}}**x')
		self.assertEqual (ast2nat (p ('{{1,2},{3,4}}!')), '{{1,2},{3,4}}!')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.T')), '{{1,2,3},{4,5,6}}.T')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.T.T')), '{{1,2,3},{4,5,6}}.T.T')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.T.T.T')), '{{1,2,3},{4,5,6}}.T.T.T')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.transpose ()')), '{{1,2,3},{4,5,6}}.transpose()')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), '{{1,2,3},{4,5,6}}.transpose().transpose()')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), '{{1,2,3},{4,5,6}}.transpose().transpose().transpose()')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), '{{1,2,3},{4,5,6}}.transpose().transpose().T.T.transpose().transpose()')
		self.assertEqual (ast2nat (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), '{{A,B},{C,D}} {x,y}')
		self.assertEqual (ast2nat (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\Gamma \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\zeta \\beta \\phi \\Sigma')), '\\Theta\\Lambda\\xi\\Omega\\alpha\\theta\\Phi\\gamma\\nu\\Gamma\\delta\\rho\\lambda\\iota\\chi\\psi\\Psi\\Xi\\tau\\mu\\sigma\\omega\\kappa\\upsilon\\eta\\Pi\\epsilon\\Delta\\Upsilon\\zeta\\beta\\phi\\Sigma')

	def test_ast2py (self):
		self.assertEqual (ast2py (p ('1')), '1')
		self.assertEqual (ast2py (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')
		self.assertEqual (ast2py (p ('x')), 'x')
		self.assertEqual (ast2py (p ('-1')), '-1')
		self.assertEqual (ast2py (p ('-x')), '-x')
		self.assertEqual (ast2py (p ('{x}')), 'x')
		self.assertEqual (ast2py (p ('{{x}}')), 'x')
		self.assertEqual (ast2py (p ('()')), '()')
		self.assertEqual (ast2py (p ('(x)')), '(x)')
		self.assertEqual (ast2py (p ('(x,)')), '(x,)')
		self.assertEqual (ast2py (p ('(x,y)')), '(x, y)')
		self.assertEqual (ast2py (p ('(x,y,)')), '(x, y)')
		self.assertEqual (ast2py (p ('[]')), '[]')
		self.assertEqual (ast2py (p ('[x]')), '[x]')
		self.assertEqual (ast2py (p ('[x,]')), '[x]')
		self.assertEqual (ast2py (p ('[x,y]')), '[x, y]')
		self.assertEqual (ast2py (p ('[x,y,]')), '[x, y]')
		self.assertEqual (ast2py (p ('"x\\x20\\n"')), "'x \\n'")
		self.assertEqual (ast2py (p ("'x\\x20\\n'")), "'x \\n'")
		self.assertEqual (ast2py (p ('|x|')), 'abs(x)')
		self.assertEqual (ast2py (p ('x!')), 'factorial(x)')
		self.assertEqual (ast2py (p ('x+y')), 'x + y')
		self.assertEqual (ast2py (p ('x-y')), 'x - y')
		self.assertEqual (ast2py (p ('x*y')), 'x*y')
		self.assertEqual (ast2py (p ('xy')), 'x*y')
		self.assertEqual (ast2py (p ('x(y)')), 'x*(y)')
		self.assertEqual (ast2py (p ('x/y')), 'x/y')
		self.assertEqual (ast2py (p ('x^y')), 'x**y')
		self.assertEqual (ast2py (p ('log x')), 'log(x)')
		self.assertEqual (ast2py (p ('log {x}')), 'log(x)')
		self.assertEqual (ast2py (p ('log (x)')), 'log(x)')
		self.assertEqual (ast2py (p ('\\log_2 x')), 'log(x) / log(2)')
		self.assertEqual (ast2py (p ('\\log_2 {x}')), 'log(x) / log(2)')
		self.assertEqual (ast2py (p ('\\log_2 (x)')), 'log(x) / log(2)')
		self.assertEqual (ast2py (p ('sqrt x')), 'sqrt(x)')
		self.assertEqual (ast2py (p ('sqrt {x}')), 'sqrt(x)')
		self.assertEqual (ast2py (p ('sqrt (x)')), 'sqrt(x)')
		self.assertEqual (ast2py (p ('sqrt[3] x')), 'x**(1/3)')
		self.assertEqual (ast2py (p ('sqrt[3] {x}')), 'x**(1/3)')
		self.assertEqual (ast2py (p ('sqrt[3] (x)')), 'x**(1/3)')
		self.assertEqual (ast2py (p ('sin x')), 'sin(x)')
		self.assertEqual (ast2py (p ('sin^2 x')), 'sin(x)**2')
		self.assertEqual (ast2py (p ('sin (x)')), 'sin(x)')
		self.assertEqual (ast2py (p ('sin (x)^2')), 'sin(x)**2')
		self.assertEqual (ast2py (p ('{sin x}^2')), 'sin(x)**2')
		self.assertEqual (ast2py (p ('sin**2 x')), 'sin(x)**2')
		self.assertEqual (ast2py (p ('sin**-1 x')), 'asin(x)')
		self.assertEqual (ast2py (p ('\\lim_{x\\to0} 1/x')), "Limit(1/x, x, 0, dir='+-')")
		self.assertEqual (ast2py (p ('\\lim_{x\\to0^+} 1/x')), 'Limit(1/x, x, 0)')
		self.assertEqual (ast2py (p ('\\lim_{x\\to0**-} 1/x')), "Limit(1/x, x, 0, dir='-')")
		self.assertEqual (ast2py (p ('Limit (1/x, x, 0)')), 'Limit(1/x, x, 0)')
		self.assertEqual (ast2py (p ('Limit (1/x, x, 0, "-")')), "Limit(1/x, x, 0, dir='-')")
		self.assertEqual (ast2py (p ('Limit (1/x, x, 0, dir="+-")')), "Limit(1/x, x, 0, dir='+-')")
		self.assertEqual (ast2py (p ('\\sum_{n=0}^\\infty x^n/n!')), 'Sum(x**n / factorial(n), (n, 0, oo))')
		self.assertEqual (ast2py (p ('Sum (x^n/n!, (n, 0, oo))')), 'Sum(x**n / factorial(n), (n, 0, oo))')
		self.assertEqual (ast2py (p ('d/dx x**2y**2z')), 'Derivative(x**2*y**2*z, x)')
		self.assertEqual (ast2py (p ('d^2/dx^2 x^2y**2z')), 'Derivative(x**2*y**2*z, x, 2)')
		self.assertEqual (ast2py (p ('d^3/dx^2dy x^2y**2z')), 'Derivative(x**2*y**2*z, x, 2, y)')
		self.assertEqual (ast2py (p ('\\partial^4/\\partialx^2\\partial y\\partialz x^2y**2z')), 'Derivative(x**2*y**2*z, x, 2, y, z)')
		self.assertEqual (ast2py (p ('Derivative (x^2y**2z, x, 2, y, z)')), 'Derivative(x**2*y**2*z, x, 2, y, z)')
		self.assertEqual (ast2py (p ('\\int dx')), 'Integral(1, x)')
		self.assertEqual (ast2py (p ('\\int x dx')), 'Integral(x, x)')
		self.assertEqual (ast2py (p ('\\int_0^1 x dx')), 'Integral(x, (x, 0, 1))')
		self.assertEqual (ast2py (p ('\\int_0^1 \\int y dy dx')), 'Integral(Integral(y, y), (x, 0, 1))')
		self.assertEqual (ast2py (p ('Integral (\\int y dy, (x, 0, 1))')), 'Integral(Integral(y, y), (x, 0, 1))')
		self.assertEqual (ast2py (p ('{1,}')), 'Matrix([[1]])')
		self.assertEqual (ast2py (p ('{1,2}')), 'Matrix([[1],[2]])')
		self.assertEqual (ast2py (p ('{1,2,}')), 'Matrix([[1],[2]])')
		self.assertEqual (ast2py (p ('{{1,},}')), 'Matrix([[1]])')
		self.assertEqual (ast2py (p ('{{1,},{2,}}')), 'Matrix([[1],[2]])')
		self.assertEqual (ast2py (p ('{{1,},{2,},}')), 'Matrix([[1],[2]])')
		self.assertEqual (ast2py (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), 'Matrix([[1]])')
		self.assertEqual (ast2py (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), 'Matrix([[1]])')
		self.assertEqual (ast2py (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), 'Matrix([[1,2]])')
		self.assertEqual (ast2py (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), 'Matrix([[1,2],[3,4]])')
		self.assertEqual (ast2py (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), 'Matrix([[1,2],[3,4]])')
		self.assertEqual (ast2py (p ('-1**x')), '-1**x')
		self.assertEqual (ast2py (p ('{-1}**x')), '(-1)**x')
		self.assertEqual (ast2py (p ('-{-1}**x')), '-(-1)**x')
		self.assertEqual (ast2py (p ('(-1)**x')), '(-1)**x')
		self.assertEqual (ast2py (p ('-(-1)**x')), '-(-1)**x')
		self.assertEqual (ast2py (p ('{1,2}!')), 'factorial(Matrix([[1],[2]]))')
		self.assertEqual (ast2py (p ('{{0,1},{1,0}}**x')), 'Matrix([[0,1],[1,0]])**x')
		self.assertEqual (ast2py (p ('{{1,2},{3,4}}!')), 'factorial(Matrix([[1,2],[3,4]]))')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.T')), 'Matrix([[1,2,3],[4,5,6]]).T')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.T.T')), 'Matrix([[1,2,3],[4,5,6]]).T.T')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.T.T.T')), 'Matrix([[1,2,3],[4,5,6]]).T.T.T')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.transpose ()')), 'Matrix([[1,2,3],[4,5,6]]).transpose()')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), 'Matrix([[1,2,3],[4,5,6]]).transpose().transpose()')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), 'Matrix([[1,2,3],[4,5,6]]).transpose().transpose().transpose()')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), 'Matrix([[1,2,3],[4,5,6]]).transpose().transpose().T.T.transpose().transpose()')
		self.assertEqual (ast2py (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), 'Matrix([[A,B],[C,D]])*Matrix([[x],[y]])')
		self.assertEqual (ast2py (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\Gamma \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\zeta \\beta \\phi \\Sigma')), '_Theta*_Lambda*_xi*_Omega*_alpha*_theta*_Phi*_gamma*_nu*_Gamma*_delta*_rho*_lambda*_iota*_chi*_psi*_Psi*_Xi*_tau*_mu*_sigma*_omega*_kappa*_upsilon*_eta*_Pi*_epsilon*_Delta*_Upsilon*_zeta*_beta*_phi*_Sigma')

	def test_ast2tex2ast (self):
		self.assertEqual (ast2tex2ast (p ('1')), ('#', '1'))
		self.assertEqual (ast2tex2ast (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), ('#', '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901'))
		self.assertEqual (ast2tex2ast (p ('x')), ('@', 'x'))
		self.assertEqual (ast2tex2ast (p ('-1')), ('#', '-1'))
		self.assertEqual (ast2tex2ast (p ('-x')), ('-', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('{x}')), ('@', 'x'))
		self.assertEqual (ast2tex2ast (p ('{{x}}')), ('@', 'x'))
		self.assertEqual (ast2tex2ast (p ('()')), ('(', (',', ())))
		self.assertEqual (ast2tex2ast (p ('(x)')), ('(', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('(x,)')), ('(', (',', (('@', 'x'),))))
		self.assertEqual (ast2tex2ast (p ('(x,y)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2tex2ast (p ('(x,y,)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2tex2ast (p ('[]')), ('[', ()))
		self.assertEqual (ast2tex2ast (p ('[x]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2tex2ast (p ('[x,]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2tex2ast (p ('[x,y]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('[x,y,]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('"x\\x20\\n"')), ('"', 'x \n'))
		self.assertEqual (ast2tex2ast (p ("'x\\x20\\n'")), ('"', 'x \n'))
		self.assertEqual (ast2tex2ast (p ('|x|')), ('|', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('x!')), ('!', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('x+y')), ('+', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('x-y')), ('+', (('@', 'x'), ('-', ('@', 'y')))))
		self.assertEqual (ast2tex2ast (p ('x*y')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('xy')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('x(y)')), ('*', (('@', 'x'), ('(', ('@', 'y')))))
		self.assertEqual (ast2tex2ast (p ('x/y')), ('/', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2tex2ast (p ('x^y')), ('^', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2tex2ast (p ('log x')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('log {x}')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('log (x)')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('\\log_2 x')), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('\\log_2 {x}')), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('\\log_2 (x)')), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('sqrt x')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('sqrt {x}')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('sqrt (x)')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('sqrt[3] x')), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (ast2tex2ast (p ('sqrt[3] {x}')), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (ast2tex2ast (p ('sqrt[3] (x)')), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (ast2tex2ast (p ('sin x')), ('func', 'sin', ('(', ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('sin^2 x')), ('^', ('func', 'sin', ('(', ('@', 'x'))), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('sin (x)')), ('func', 'sin', ('(', ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('sin (x)^2')), ('^', ('func', 'sin', ('(', ('@', 'x'))), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('{sin x}^2')), ('^', ('func', 'sin', ('(', ('@', 'x'))), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('sin**2 x')), ('^', ('func', 'sin', ('(', ('@', 'x'))), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('sin**-1 x')), ('func', 'asin', ('(', ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('\\lim_{x\\to0} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (ast2tex2ast (p ('\\lim_{x\\to0^+} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (ast2tex2ast (p ('\\lim_{x\\to0**-} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (ast2tex2ast (p ('Limit (1/x, x, 0)')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (ast2tex2ast (p ('Limit (1/x, x, 0, "-")')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (ast2tex2ast (p ('Limit (1/x, x, 0, dir="+-")')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (ast2tex2ast (p ('\\sum_{n=0}^\\infty x^n/n!')), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', '\\infty')))
		self.assertEqual (ast2tex2ast (p ('Sum (x^n/n!, (n, 0, oo))')), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', '\\infty')))
		self.assertEqual (ast2tex2ast (p ('d/dx x**2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('@', 'dx'),)))
		self.assertEqual (ast2tex2ast (p ('d^2/dx^2 x^2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', 'dx'), ('#', '2')),)))
		self.assertEqual (ast2tex2ast (p ('d^3/dx^2dy x^2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', '\\partial x'), ('#', '2')), ('@', '\\partial y'))))
		self.assertEqual (ast2tex2ast (p ('\\partial^4/\\partialx^2\\partial y\\partialz x^2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', '\\partial x'), ('#', '2')), ('@', '\\partial y'), ('@', '\\partial z'))))
		self.assertEqual (ast2tex2ast (p ('Derivative (x^2y**2z, x, 2, y, z)')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', '\\partial x'), ('#', '2')), ('@', '\\partial y'), ('@', '\\partial z'))))
		self.assertEqual (ast2tex2ast (p ('\\int dx')), ('intg', None, ('@', 'dx')))
		self.assertEqual (ast2tex2ast (p ('\\int x dx')), ('intg', ('@', 'x'), ('@', 'dx')))
		self.assertEqual (ast2tex2ast (p ('\\int_0^1 x dx')), ('intg', ('@', 'x'), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2tex2ast (p ('\\int_0^1 \\int y dy dx')), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2tex2ast (p ('Integral (\\int y dy, (x, 0, 1))')), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2tex2ast (p ('{1,}')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2tex2ast (p ('{1,2}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2tex2ast (p ('{1,2,}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2tex2ast (p ('{{1,},}')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2tex2ast (p ('{{1,},{2,}}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2tex2ast (p ('{{1,},{2,},}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2tex2ast (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2tex2ast (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2tex2ast (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), ('mat', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (ast2tex2ast (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2tex2ast (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2tex2ast (p ('-1**x')), ('-', ('^', ('#', '1'), ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('{-1}**x')), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('-{-1}**x')), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('(-1)**x')), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('-(-1)**x')), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('{1,2}!')), ('!', ('mat', ((('#', '1'),), (('#', '2'),)))))
		self.assertEqual (ast2tex2ast (p ('{{0,1},{1,0}}**x')), ('^', ('mat', ((('#', '0'), ('#', '1')), (('#', '1'), ('#', '0')))), ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('{{1,2},{3,4}}!')), ('!', ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4'))))))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.T')), ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.T.T')), ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'), 'T'))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.T.T.T')), ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'), 'T'), 'T'))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.transpose ()')), ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', (',', ())))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', (',', ())), 'transpose', (',', ())))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', (',', ())), 'transpose', (',', ())), 'transpose', (',', ())))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), ('.', ('.', ('.', ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', (',', ())), 'transpose', (',', ())), 'T'), 'T'), 'transpose', (',', ())), 'transpose', (',', ())))
		self.assertEqual (ast2tex2ast (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), ('*', (('mat', ((('@', 'A'), ('@', 'B')), (('@', 'C'), ('@', 'D')))), ('mat', ((('@', 'x'),), (('@', 'y'),))))))
		self.assertEqual (ast2tex2ast (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\Gamma \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\zeta \\beta \\phi \\Sigma')), ('*', (('@', '\\Theta'), ('@', '\\Lambda'), ('@', '\\xi'), ('@', '\\Omega'), ('@', '\\alpha'), ('@', '\\theta'), ('@', '\\Phi'), ('@', '\\gamma'), ('@', '\\nu'), ('@', '\\Gamma'), ('@', '\\delta'), ('@', '\\rho'), ('@', '\\lambda'), ('@', '\\iota'), ('@', '\\chi'), ('@', '\\psi'), ('@', '\\Psi'), ('@', '\\Xi'), ('@', '\\tau'), ('@', '\\mu'), ('@', '\\sigma'), ('@', '\\omega'), ('@', '\\kappa'), ('@', '\\upsilon'), ('@', '\\eta'), ('@', '\\Pi'), ('@', '\\epsilon'), ('@', '\\Delta'), ('@', '\\Upsilon'), ('@', '\\zeta'), ('@', '\\beta'), ('@', '\\phi'), ('@', '\\Sigma'))))

	def test_ast2nat2ast (self):
		self.assertEqual (ast2nat2ast (p ('1')), ('#', '1'))
		self.assertEqual (ast2nat2ast (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), ('#', '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901'))
		self.assertEqual (ast2nat2ast (p ('x')), ('@', 'x'))
		self.assertEqual (ast2nat2ast (p ('-1')), ('#', '-1'))
		self.assertEqual (ast2nat2ast (p ('-x')), ('-', ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('{x}')), ('@', 'x'))
		self.assertEqual (ast2nat2ast (p ('{{x}}')), ('@', 'x'))
		self.assertEqual (ast2nat2ast (p ('()')), ('(', (',', ())))
		self.assertEqual (ast2nat2ast (p ('(x)')), ('(', ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('(x,)')), ('(', (',', (('@', 'x'),))))
		self.assertEqual (ast2nat2ast (p ('(x,y)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2nat2ast (p ('(x,y,)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2nat2ast (p ('[]')), ('[', ()))
		self.assertEqual (ast2nat2ast (p ('[x]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2nat2ast (p ('[x,]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2nat2ast (p ('[x,y]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('[x,y,]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('"x\\x20\\n"')), ('"', 'x \n'))
		self.assertEqual (ast2nat2ast (p ("'x\\x20\\n'")), ('"', 'x \n'))
		self.assertEqual (ast2nat2ast (p ('|x|')), ('|', ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('x!')), ('!', ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('x+y')), ('+', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('x-y')), ('+', (('@', 'x'), ('-', ('@', 'y')))))
		self.assertEqual (ast2nat2ast (p ('x*y')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('xy')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('x(y)')), ('*', (('@', 'x'), ('(', ('@', 'y')))))
		self.assertEqual (ast2nat2ast (p ('x/y')), ('/', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2nat2ast (p ('x^y')), ('^', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2nat2ast (p ('log x')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('log {x}')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('log (x)')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('\\log_2 x')), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('\\log_2 {x}')), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('\\log_2 (x)')), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('sqrt x')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('sqrt {x}')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('sqrt (x)')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('sqrt[3] x')), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (ast2nat2ast (p ('sqrt[3] {x}')), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (ast2nat2ast (p ('sqrt[3] (x)')), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (ast2nat2ast (p ('sin x')), ('func', 'sin', ('(', ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('sin^2 x')), ('^', ('func', 'sin', ('(', ('@', 'x'))), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('sin (x)')), ('func', 'sin', ('(', ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('sin (x)^2')), ('^', ('func', 'sin', ('(', ('@', 'x'))), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('{sin x}^2')), ('^', ('func', 'sin', ('(', ('@', 'x'))), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('sin**2 x')), ('^', ('func', 'sin', ('(', ('@', 'x'))), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('sin**-1 x')), ('func', 'asin', ('(', ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('\\lim_{x\\to0} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (ast2nat2ast (p ('\\lim_{x\\to0^+} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (ast2nat2ast (p ('\\lim_{x\\to0**-} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (ast2nat2ast (p ('Limit (1/x, x, 0)')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (ast2nat2ast (p ('Limit (1/x, x, 0, "-")')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (ast2nat2ast (p ('Limit (1/x, x, 0, dir="+-")')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (ast2nat2ast (p ('\\sum_{n=0}^\\infty x^n/n!')), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', '\\infty')))
		self.assertEqual (ast2nat2ast (p ('Sum (x^n/n!, (n, 0, oo))')), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', '\\infty')))
		self.assertEqual (ast2nat2ast (p ('d/dx x**2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('@', 'dx'),)))
		self.assertEqual (ast2nat2ast (p ('d^2/dx^2 x^2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', 'dx'), ('#', '2')),)))
		self.assertEqual (ast2nat2ast (p ('d^3/dx^2dy x^2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'))))
		self.assertEqual (ast2nat2ast (p ('\\partial^4/\\partialx^2\\partial y\\partialz x^2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', '\\partial x'), ('#', '2')), ('@', '\\partial y'), ('@', '\\partial z'))))
		self.assertEqual (ast2nat2ast (p ('Derivative (x^2y**2z, x, 2, y, z)')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'), ('@', 'dz'))))
		self.assertEqual (ast2nat2ast (p ('\\int dx')), ('intg', None, ('@', 'dx')))
		self.assertEqual (ast2nat2ast (p ('\\int x dx')), ('intg', ('@', 'x'), ('@', 'dx')))
		self.assertEqual (ast2nat2ast (p ('\\int_0^1 x dx')), ('intg', ('@', 'x'), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2nat2ast (p ('\\int_0^1 \\int y dy dx')), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2nat2ast (p ('Integral (\\int y dy, (x, 0, 1))')), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2nat2ast (p ('{1,}')), ('vec', (('#', '1'),)))
		self.assertEqual (ast2nat2ast (p ('{1,2}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2nat2ast (p ('{1,2,}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2nat2ast (p ('{{1,},}')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2nat2ast (p ('{{1,},{2,}}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2nat2ast (p ('{{1,},{2,},}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2nat2ast (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2nat2ast (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2nat2ast (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), ('mat', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (ast2nat2ast (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2nat2ast (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2nat2ast (p ('-1**x')), ('-', ('^', ('#', '1'), ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('{-1}**x')), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('-{-1}**x')), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('(-1)**x')), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('-(-1)**x')), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('{1,2}!')), ('!', ('vec', (('#', '1'), ('#', '2')))))
		self.assertEqual (ast2nat2ast (p ('{{0,1},{1,0}}**x')), ('^', ('mat', ((('#', '0'), ('#', '1')), (('#', '1'), ('#', '0')))), ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('{{1,2},{3,4}}!')), ('!', ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4'))))))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.T')), ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.T.T')), ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'), 'T'))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.T.T.T')), ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'), 'T'), 'T'))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.transpose ()')), ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', (',', ())))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', (',', ())), 'transpose', (',', ())))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', (',', ())), 'transpose', (',', ())), 'transpose', (',', ())))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), ('.', ('.', ('.', ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', (',', ())), 'transpose', (',', ())), 'T'), 'T'), 'transpose', (',', ())), 'transpose', (',', ())))
		self.assertEqual (ast2nat2ast (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), ('*', (('mat', ((('@', 'A'), ('@', 'B')), (('@', 'C'), ('@', 'D')))), ('vec', (('@', 'x'), ('@', 'y'))))))
		self.assertEqual (ast2nat2ast (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\Gamma \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\zeta \\beta \\phi \\Sigma')), ('*', (('@', '\\Theta'), ('@', '\\Lambda'), ('@', '\\xi'), ('@', '\\Omega'), ('@', '\\alpha'), ('@', '\\theta'), ('@', '\\Phi'), ('@', '\\gamma'), ('@', '\\nu'), ('@', '\\Gamma'), ('@', '\\delta'), ('@', '\\rho'), ('@', '\\lambda'), ('@', '\\iota'), ('@', '\\chi'), ('@', '\\psi'), ('@', '\\Psi'), ('@', '\\Xi'), ('@', '\\tau'), ('@', '\\mu'), ('@', '\\sigma'), ('@', '\\omega'), ('@', '\\kappa'), ('@', '\\upsilon'), ('@', '\\eta'), ('@', '\\Pi'), ('@', '\\epsilon'), ('@', '\\Delta'), ('@', '\\Upsilon'), ('@', '\\zeta'), ('@', '\\beta'), ('@', '\\phi'), ('@', '\\Sigma'))))

	def test_ast2py2ast (self):
		self.assertEqual (ast2py2ast (p ('1')), ('#', '1'))
		self.assertEqual (ast2py2ast (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), ('#', '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901'))
		self.assertEqual (ast2py2ast (p ('x')), ('@', 'x'))
		self.assertEqual (ast2py2ast (p ('-1')), ('#', '-1'))
		self.assertEqual (ast2py2ast (p ('-x')), ('-', ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('{x}')), ('@', 'x'))
		self.assertEqual (ast2py2ast (p ('{{x}}')), ('@', 'x'))
		self.assertEqual (ast2py2ast (p ('()')), ('(', (',', ())))
		self.assertEqual (ast2py2ast (p ('(x)')), ('(', ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('(x,)')), ('(', (',', (('@', 'x'),))))
		self.assertEqual (ast2py2ast (p ('(x,y)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2py2ast (p ('(x,y,)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2py2ast (p ('[]')), ('[', ()))
		self.assertEqual (ast2py2ast (p ('[x]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2py2ast (p ('[x,]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2py2ast (p ('[x,y]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('[x,y,]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('"x\\x20\\n"')), ('"', 'x \n'))
		self.assertEqual (ast2py2ast (p ("'x\\x20\\n'")), ('"', 'x \n'))
		self.assertEqual (ast2py2ast (p ('|x|')), ('|', ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('x!')), ('!', ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('x+y')), ('+', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('x-y')), ('+', (('@', 'x'), ('-', ('@', 'y')))))
		self.assertEqual (ast2py2ast (p ('x*y')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('xy')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('x(y)')), ('*', (('@', 'x'), ('(', ('@', 'y')))))
		self.assertEqual (ast2py2ast (p ('x/y')), ('/', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2py2ast (p ('x^y')), ('^', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2py2ast (p ('log x')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('log {x}')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('log (x)')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('\\log_2 x')), ('/', ('log', ('(', ('@', 'x'))), ('log', ('(', ('#', '2')))))
		self.assertEqual (ast2py2ast (p ('\\log_2 {x}')), ('/', ('log', ('(', ('@', 'x'))), ('log', ('(', ('#', '2')))))
		self.assertEqual (ast2py2ast (p ('\\log_2 (x)')), ('/', ('log', ('(', ('@', 'x'))), ('log', ('(', ('#', '2')))))
		self.assertEqual (ast2py2ast (p ('sqrt x')), ('sqrt', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('sqrt {x}')), ('sqrt', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('sqrt (x)')), ('sqrt', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('sqrt[3] x')), ('^', ('@', 'x'), ('(', ('/', ('#', '1'), ('#', '3')))))
		self.assertEqual (ast2py2ast (p ('sqrt[3] {x}')), ('^', ('@', 'x'), ('(', ('/', ('#', '1'), ('#', '3')))))
		self.assertEqual (ast2py2ast (p ('sqrt[3] (x)')), ('^', ('@', 'x'), ('(', ('/', ('#', '1'), ('#', '3')))))
		self.assertEqual (ast2py2ast (p ('sin x')), ('func', 'sin', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('sin^2 x')), ('^', ('func', 'sin', ('(', ('@', 'x'))), ('#', '2')))
		self.assertEqual (ast2py2ast (p ('sin (x)')), ('func', 'sin', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('sin (x)^2')), ('^', ('func', 'sin', ('(', ('@', 'x'))), ('#', '2')))
		self.assertEqual (ast2py2ast (p ('{sin x}^2')), ('^', ('func', 'sin', ('(', ('@', 'x'))), ('#', '2')))
		self.assertEqual (ast2py2ast (p ('sin**2 x')), ('^', ('func', 'sin', ('(', ('@', 'x'))), ('#', '2')))
		self.assertEqual (ast2py2ast (p ('sin**-1 x')), ('func', 'asin', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('\\lim_{x\\to0} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (ast2py2ast (p ('\\lim_{x\\to0^+} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (ast2py2ast (p ('\\lim_{x\\to0**-} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (ast2py2ast (p ('Limit (1/x, x, 0)')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (ast2py2ast (p ('Limit (1/x, x, 0, "-")')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (ast2py2ast (p ('Limit (1/x, x, 0, dir="+-")')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (ast2py2ast (p ('\\sum_{n=0}^\\infty x^n/n!')), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', '\\infty')))
		self.assertEqual (ast2py2ast (p ('Sum (x^n/n!, (n, 0, oo))')), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', '\\infty')))
		self.assertEqual (ast2py2ast (p ('d/dx x**2y**2z')), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('@', 'dx'),)))
		self.assertEqual (ast2py2ast (p ('d^2/dx^2 x^2y**2z')), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')),)))
		self.assertEqual (ast2py2ast (p ('d^3/dx^2dy x^2y**2z')), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'))))
		self.assertEqual (ast2py2ast (p ('\\partial^4/\\partialx^2\\partial y\\partialz x^2y**2z')), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'), ('@', 'dz'))))
		self.assertEqual (ast2py2ast (p ('Derivative (x^2y**2z, x, 2, y, z)')), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'), ('@', 'dz'))))
		self.assertEqual (ast2py2ast (p ('\\int dx')), ('intg', ('#', '1'), ('@', 'dx')))
		self.assertEqual (ast2py2ast (p ('\\int x dx')), ('intg', ('@', 'x'), ('@', 'dx')))
		self.assertEqual (ast2py2ast (p ('\\int_0^1 x dx')), ('intg', ('@', 'x'), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2py2ast (p ('\\int_0^1 \\int y dy dx')), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2py2ast (p ('Integral (\\int y dy, (x, 0, 1))')), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2py2ast (p ('{1,}')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2py2ast (p ('{1,2}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2py2ast (p ('{1,2,}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2py2ast (p ('{{1,},}')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2py2ast (p ('{{1,},{2,}}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2py2ast (p ('{{1,},{2,},}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2py2ast (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2py2ast (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2py2ast (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), ('mat', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (ast2py2ast (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2py2ast (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2py2ast (p ('-1**x')), ('-', ('^', ('#', '1'), ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('{-1}**x')), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('-{-1}**x')), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('(-1)**x')), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('-(-1)**x')), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('{1,2}!')), ('!', ('mat', ((('#', '1'),), (('#', '2'),)))))
		self.assertEqual (ast2py2ast (p ('{{0,1},{1,0}}**x')), ('^', ('mat', ((('#', '0'), ('#', '1')), (('#', '1'), ('#', '0')))), ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('{{1,2},{3,4}}!')), ('!', ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4'))))))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.T')), ('func', 'Matrix', ('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'T')))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.T.T')), ('func', 'Matrix', ('.', ('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'T'), 'T')))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.T.T.T')), ('func', 'Matrix', ('.', ('.', ('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'T'), 'T'), 'T')))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.transpose ()')), ('*', (('func', 'Matrix', ('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'transpose')), ('(', (',', ())))))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), ('*', (('func', 'Matrix', ('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'transpose')), ('.', ('(', (',', ())), 'transpose'), ('(', (',', ())))))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), ('*', (('func', 'Matrix', ('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'transpose')), ('.', ('(', (',', ())), 'transpose'), ('.', ('(', (',', ())), 'transpose'), ('(', (',', ())))))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), ('*', (('func', 'Matrix', ('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'transpose')), ('.', ('(', (',', ())), 'transpose'), ('.', ('.', ('.', ('(', (',', ())), 'T'), 'T'), 'transpose'), ('.', ('(', (',', ())), 'transpose'), ('(', (',', ())))))
		self.assertEqual (ast2py2ast (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), ('*', (('mat', ((('@', 'A'), ('@', 'B')), (('@', 'C'), ('@', 'D')))), ('mat', ((('@', 'x'),), (('@', 'y'),))))))
		self.assertEqual (ast2py2ast (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\Gamma \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\zeta \\beta \\phi \\Sigma')), ('*', (('@', '\\Theta'), ('@', '\\Lambda'), ('@', '\\xi'), ('@', '\\Omega'), ('@', '\\alpha'), ('@', '\\theta'), ('@', '\\Phi'), ('@', '\\gamma'), ('@', '\\nu'), ('@', '\\Gamma'), ('@', '\\delta'), ('@', '\\rho'), ('@', '\\lambda'), ('@', '\\iota'), ('@', '\\chi'), ('@', '\\psi'), ('@', '\\Psi'), ('@', '\\Xi'), ('@', '\\tau'), ('@', '\\mu'), ('@', '\\sigma'), ('@', '\\omega'), ('@', '\\kappa'), ('@', '\\upsilon'), ('@', '\\eta'), ('@', '\\Pi'), ('@', '\\epsilon'), ('@', '\\Delta'), ('@', '\\Upsilon'), ('@', '\\zeta'), ('@', '\\beta'), ('@', '\\phi'), ('@', '\\Sigma'))))

	def test_ast2spt2ast (self):
		self.assertEqual (ast2spt2ast (p ('1')), ('#', '1'))
		self.assertEqual (ast2spt2ast (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), ('#', '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901'))
		self.assertEqual (ast2spt2ast (p ('x')), ('@', 'x'))
		self.assertEqual (ast2spt2ast (p ('-1')), ('#', '-1'))
		self.assertEqual (ast2spt2ast (p ('-x')), ('-', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('{x}')), ('@', 'x'))
		self.assertEqual (ast2spt2ast (p ('{{x}}')), ('@', 'x'))
		self.assertEqual (ast2spt2ast (p ('()')), ('(', (',', ())))
		self.assertEqual (ast2spt2ast (p ('(x)')), ('@', 'x'))
		self.assertEqual (ast2spt2ast (p ('(x,)')), ('(', (',', (('@', 'x'),))))
		self.assertEqual (ast2spt2ast (p ('(x,y)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2spt2ast (p ('(x,y,)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2spt2ast (p ('[]')), ('[', ()))
		self.assertEqual (ast2spt2ast (p ('[x]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2spt2ast (p ('[x,]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2spt2ast (p ('[x,y]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('[x,y,]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('"x\\x20\\n"')), ('"', 'x \n'))
		self.assertEqual (ast2spt2ast (p ("'x\\x20\\n'")), ('"', 'x \n'))
		self.assertEqual (ast2spt2ast (p ('|x|')), ('|', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('x!')), ('!', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('x+y')), ('+', (('@', 'y'), ('@', 'x'))))
		self.assertEqual (ast2spt2ast (p ('x-y')), ('+', (('-', ('@', 'y')), ('@', 'x'))))
		self.assertEqual (ast2spt2ast (p ('x*y')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('xy')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('x(y)')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('x/y')), ('/', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2spt2ast (p ('x^y')), ('^', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2spt2ast (p ('log x')), ('log', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('log {x}')), ('log', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('log (x)')), ('log', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('\\log_2 x')), ('/', ('log', ('@', 'x')), ('log', ('#', '2'))))
		self.assertEqual (ast2spt2ast (p ('\\log_2 {x}')), ('/', ('log', ('@', 'x')), ('log', ('#', '2'))))
		self.assertEqual (ast2spt2ast (p ('\\log_2 (x)')), ('/', ('log', ('@', 'x')), ('log', ('#', '2'))))
		self.assertEqual (ast2spt2ast (p ('sqrt x')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('sqrt {x}')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('sqrt (x)')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('sqrt[3] x')), ('^', ('@', 'x'), ('/', ('#', '1'), ('#', '3'))))
		self.assertEqual (ast2spt2ast (p ('sqrt[3] {x}')), ('^', ('@', 'x'), ('/', ('#', '1'), ('#', '3'))))
		self.assertEqual (ast2spt2ast (p ('sqrt[3] (x)')), ('^', ('@', 'x'), ('/', ('#', '1'), ('#', '3'))))
		self.assertEqual (ast2spt2ast (p ('sin x')), ('func', 'sin', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('sin^2 x')), ('^', ('func', 'sin', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2spt2ast (p ('sin (x)')), ('func', 'sin', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('sin (x)^2')), ('^', ('func', 'sin', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2spt2ast (p ('{sin x}^2')), ('^', ('func', 'sin', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2spt2ast (p ('sin**2 x')), ('^', ('func', 'sin', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2spt2ast (p ('sin**-1 x')), ('func', 'asin', ('@', 'x')))
		self.assertRaises (ValueError, ast2spt2ast, p ('\\lim_{x\\to0} 1/x'))
		self.assertEqual (ast2spt2ast (p ('\\lim_{x\\to0^+} 1/x')), ('@', '\\infty'))
		self.assertEqual (ast2spt2ast (p ('\\lim_{x\\to0**-} 1/x')), ('-', ('@', '\\infty')))
		self.assertEqual (ast2spt2ast (p ('Limit (1/x, x, 0)')), ('@', '\\infty'))
		self.assertEqual (ast2spt2ast (p ('Limit (1/x, x, 0, "-")')), ('-', ('@', '\\infty')))
		self.assertRaises (ValueError, ast2spt2ast, p ('Limit (1/x, x, 0, dir="+-")'))
		self.assertEqual (ast2spt2ast (p ('\\sum_{n=0}^\\infty x^n/n!')), ('^', ('@', 'e'), ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('Sum (x^n/n!, (n, 0, oo))')), ('^', ('@', 'e'), ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('d/dx x**2y**2z')), ('*', (('#', '2'), ('@', 'x'), ('@', 'z'), ('^', ('@', 'y'), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('d^2/dx^2 x^2y**2z')), ('*', (('#', '2'), ('@', 'z'), ('^', ('@', 'y'), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('d^3/dx^2dy x^2y**2z')), ('*', (('#', '4'), ('@', 'y'), ('@', 'z'))))
		self.assertEqual (ast2spt2ast (p ('\\partial^4/\\partialx^2\\partial y\\partialz x^2y**2z')), ('*', (('#', '4'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('Derivative (x^2y**2z, x, 2, y, z)')), ('*', (('#', '4'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('\\int dx')), ('@', 'x'))
		self.assertEqual (ast2spt2ast (p ('\\int x dx')), ('*', (('/', ('#', '1'), ('#', '2')), ('^', ('@', 'x'), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('\\int_0^1 x dx')), ('/', ('#', '1'), ('#', '2')))
		self.assertEqual (ast2spt2ast (p ('\\int_0^1 \\int y dy dx')), ('*', (('/', ('#', '1'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('Integral (\\int y dy, (x, 0, 1))')), ('*', (('/', ('#', '1'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('{1,}')), ('#', '1'))
		self.assertEqual (ast2spt2ast (p ('{1,2}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2spt2ast (p ('{1,2,}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2spt2ast (p ('{{1,},}')), ('#', '1'))
		self.assertEqual (ast2spt2ast (p ('{{1,},{2,}}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2spt2ast (p ('{{1,},{2,},}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2spt2ast (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), ('#', '1'))
		self.assertEqual (ast2spt2ast (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), ('#', '1'))
		self.assertEqual (ast2spt2ast (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), ('mat', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (ast2spt2ast (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2spt2ast (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2spt2ast (p ('-1**x')), ('#', '-1'))
		self.assertEqual (ast2spt2ast (p ('{-1}**x')), ('^', ('#', '-1'), ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('-{-1}**x')), ('-', ('^', ('#', '-1'), ('@', 'x'))))
		self.assertEqual (ast2spt2ast (p ('(-1)**x')), ('^', ('#', '-1'), ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('-(-1)**x')), ('-', ('^', ('#', '-1'), ('@', 'x'))))
		self.assertEqual (ast2spt2ast (p ('{1,2}!')), ('!', ('mat', ((('#', '1'),), (('#', '2'),)))))
		self.assertEqual (ast2spt2ast (p ('{{0,1},{1,0}}**x')), ('mat', ((('+', (('*', (('/', ('#', '1'), ('#', '2')), ('^', ('#', '-1'), ('@', 'x')))), ('/', ('#', '1'), ('#', '2')))), ('+', (('*', (('-', ('/', ('#', '1'), ('#', '2'))), ('^', ('#', '-1'), ('@', 'x')))), ('/', ('#', '1'), ('#', '2'))))), (('+', (('*', (('-', ('/', ('#', '1'), ('#', '2'))), ('^', ('#', '-1'), ('@', 'x')))), ('/', ('#', '1'), ('#', '2')))), ('+', (('*', (('/', ('#', '1'), ('#', '2')), ('^', ('#', '-1'), ('@', 'x')))), ('/', ('#', '1'), ('#', '2'))))))))
		self.assertEqual (ast2spt2ast (p ('{{1,2},{3,4}}!')), ('!', ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4'))))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.T')), ('mat', ((('#', '1'), ('#', '4')), (('#', '2'), ('#', '5')), (('#', '3'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.T.T')), ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.T.T.T')), ('mat', ((('#', '1'), ('#', '4')), (('#', '2'), ('#', '5')), (('#', '3'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.transpose ()')), ('mat', ((('#', '1'), ('#', '4')), (('#', '2'), ('#', '5')), (('#', '3'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), ('mat', ((('#', '1'), ('#', '4')), (('#', '2'), ('#', '5')), (('#', '3'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), ('mat', ((('+', (('*', (('@', 'B'), ('@', 'y'))), ('*', (('@', 'A'), ('@', 'x'))))),), (('+', (('*', (('@', 'D'), ('@', 'y'))), ('*', (('@', 'C'), ('@', 'x'))))),))))
		self.assertEqual (ast2spt2ast (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\Gamma \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\zeta \\beta \\phi \\Sigma')), ('*', (('@', '\\Delta'), ('@', '\\Gamma'), ('@', '\\Lambda'), ('@', '\\Omega'), ('@', '\\Phi'), ('@', '\\Pi'), ('@', '\\Psi'), ('@', '\\Sigma'), ('@', '\\Theta'), ('@', '\\Upsilon'), ('@', '\\Xi'), ('@', '\\alpha'), ('@', '\\beta'), ('@', '\\chi'), ('@', '\\delta'), ('@', '\\epsilon'), ('@', '\\eta'), ('@', '\\gamma'), ('@', '\\iota'), ('@', '\\kappa'), ('@', '\\lambda'), ('@', '\\mu'), ('@', '\\nu'), ('@', '\\omega'), ('@', '\\phi'), ('@', '\\psi'), ('@', '\\rho'), ('@', '\\sigma'), ('@', '\\tau'), ('@', '\\theta'), ('@', '\\upsilon'), ('@', '\\xi'), ('@', '\\zeta'))))

_EXPRESSIONS = """
1
-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901
x
-1
-x
{x}
{{x}}
()
(x)
(x,)
(x,y)
(x,y,)
[]
[x]
[x,]
[x,y]
[x,y,]
"x\\x20\\n"
'x\\x20\\n'
|x|
x!
x+y
x-y
x*y
xy
x(y)
x/y
x^y
log x
log {x}
log (x)
\\log_2 x
\\log_2 {x}
\\log_2 (x)
sqrt x
sqrt {x}
sqrt (x)
sqrt[3] x
sqrt[3] {x}
sqrt[3] (x)
sin x
sin^2 x
sin (x)
sin (x)^2
{sin x}^2
sin**2 x
sin**-1 x
\\lim_{x\\to0} 1/x
\\lim_{x\\to0^+} 1/x
\\lim_{x\\to0**-} 1/x
Limit (1/x, x, 0)
Limit (1/x, x, 0, "-")
Limit (1/x, x, 0, dir="+-")
\\sum_{n=0}^\\infty x^n/n!
Sum (x^n/n!, (n, 0, oo))
d/dx x**2y**2z
d^2/dx^2 x^2y**2z
d^3/dx^2dy x^2y**2z
\\partial^4/\\partialx^2\\partial y\\partialz x^2y**2z
Derivative (x^2y**2z, x, 2, y, z)
\\int dx
\\int x dx
\\int_0^1 x dx
\\int_0^1 \\int y dy dx
Integral (\\int y dy, (x, 0, 1))
{1,}
{1,2}
{1,2,}
{{1,},}
{{1,},{2,}}
{{1,},{2,},}
\\left[\\begin{matrix} 1 \\end{matrix}\\right]
\\begin{bmatrix} 1 \\\\ \\end{bmatrix}
\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}
\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}
\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}
-1**x
{-1}**x
-{-1}**x
(-1)**x
-(-1)**x
{1,2}!
{{0,1},{1,0}}**x
{{1,2},{3,4}}!
{{1,2,3},{4,5,6}}.T
{{1,2,3},{4,5,6}}.T.T
{{1,2,3},{4,5,6}}.T.T.T
{{1,2,3},{4,5,6}}.transpose ()
{{1,2,3},{4,5,6}}.transpose ().transpose ()
{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()
{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()
\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}
\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\Gamma \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\zeta \\beta \\phi \\Sigma
"""

if __name__ == '__main__':
	import os.path
	import subprocess
	import sys

	if len (sys.argv) == 1:
		subprocess.run ([sys.executable, '-m', 'unittest', '-v', os.path.basename (sys.argv [0])])
		sys.exit (0)

	elif sys.argv [1] == '--print':
		exprs = [s.strip () for s in _EXPRESSIONS.strip ().split ('\n')]

		for func in (sparser, ast2tex, ast2nat, ast2py, ast2tex2ast, ast2nat2ast, ast2py2ast, ast2spt2ast):
			print ()
			print (f'\tdef test_{func.__name__} (self):')

			for expr in exprs:
				try:
					if func == sparser:
						print (f'\t\tself.assertEqual (p ({expr!r}),', repr (p (expr)).replace ('\n', '') + ')')
					else:
						print (f'\t\tself.assertEqual ({func.__name__} (p ({expr!r})),', repr (func (p (expr))).replace ('\n', '') + ')')

				except Exception as e:
					print (f'\t\tself.assertRaises ({e.__class__.__name__}, {func.__name__}, p ({expr!r}))')
