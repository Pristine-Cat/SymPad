#!/usr/bin/env python

import unittest

import sympy as sp
from sast import AST
from sym import *
from sparser import Parser

SympifyError = sp.SympifyError
parser       = Parser ()

def sparser (text):
	return parser.parse (text) [0]

def ast2tex2ast (ast):
	return sparser (ast2tex (ast))

def ast2nat2ast (ast):
	return sparser (ast2nat (ast))

def ast2py2ast (ast):
	return sparser (ast2py (ast))

def ast2spt2ast (ast):
	return spt2ast (ast2spt (ast, doit = True))

p = sparser

class Test (unittest.TestCase):
	def test_sparser (self):
		self.assertEqual (p ('1'), ('#', '1'))
		self.assertEqual (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901'), ('#', '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901'))
		self.assertEqual (p ('x'), ('@', 'x'))
		self.assertEqual (p ('xy'), ('@', 'xy'))
		self.assertEqual (p ('dx'), ('@', 'dx'))
		self.assertEqual (p ('partialx'), ('@', 'partialx'))
		self.assertEqual (p ('\\partial x'), ('@', 'partialx'))
		self.assertEqual (p ('x d  y'), ('*', (('@', 'x'), ('@', 'd'), ('@', 'y'))))
		self.assertEqual (p ('x partial y'), ('*', (('@', 'x'), ('@', 'partial'), ('@', 'y'))))
		self.assertEqual (p ('x \\partial  y'), ('*', (('@', 'x'), ('@', 'partial'), ('@', 'y'))))
		self.assertEqual (p ('x dx dy y'), ('*', (('@', 'x'), ('@', 'dx'), ('@', 'dy'), ('@', 'y'))))
		self.assertEqual (p ('x partialx partialy y'), ('*', (('@', 'x'), ('@', 'partialx'), ('@', 'partialy'), ('@', 'y'))))
		self.assertEqual (p ("x'"), ('@', 'x_prime'))
		self.assertEqual (p ("x''"), ('@', 'x_prime_prime'))
		self.assertEqual (p ("x'''"), ('@', 'x_prime_prime_prime'))
		self.assertEqual (p ('-1'), ('#', '-1'))
		self.assertEqual (p ('-x'), ('-', ('@', 'x')))
		self.assertEqual (p ('{x}'), ('@', 'x'))
		self.assertEqual (p ('{{x}}'), ('@', 'x'))
		self.assertEqual (p ('()'), ('(', (',', ())))
		self.assertEqual (p ('(x)'), ('(', ('@', 'x')))
		self.assertEqual (p ('(x,)'), ('(', (',', (('@', 'x'),))))
		self.assertEqual (p ('(x,y)'), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (p ('(x,y,)'), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (p ('[]'), ('[', ()))
		self.assertEqual (p ('[x]'), ('[', (('@', 'x'),)))
		self.assertEqual (p ('[x,]'), ('[', (('@', 'x'),)))
		self.assertEqual (p ('[x,y]'), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (p ('[x,y,]'), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (p ('"x\\x20\\n"'), ('"', 'x \n'))
		self.assertEqual (p ("'x\\x20\\n'"), ('"', 'x \n'))
		self.assertEqual (p ("x''string'"), ('*', (('@', 'x_prime_prime'), ('@', 'string_prime'))))
		self.assertEqual (p ("x' 'string'"), ('*', (('@', 'x_prime'), ('"', 'string'))))
		self.assertEqual (p ('|x|'), ('|', ('@', 'x')))
		self.assertEqual (p ('x!'), ('!', ('@', 'x')))
		self.assertEqual (p ('x+y'), ('+', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (p ('x-y'), ('+', (('@', 'x'), ('-', ('@', 'y')))))
		self.assertEqual (p ('x*y'), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (p ('x y'), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (p ('x(y)'), ('*', (('@', 'x'), ('(', ('@', 'y')))))
		self.assertEqual (p ('x/y'), ('/', ('@', 'x'), ('@', 'y')))
		self.assertEqual (p ('x^y'), ('^', ('@', 'x'), ('@', 'y')))
		self.assertEqual (p ('log x'), ('log', ('@', 'x')))
		self.assertEqual (p ('log {x}'), ('log', ('@', 'x')))
		self.assertEqual (p ('log (x)'), ('log', ('(', ('@', 'x'))))
		self.assertEqual (p ('\\log_2 x'), ('log', ('@', 'x'), ('#', '2')))
		self.assertEqual (p ('\\log_2 {x}'), ('log', ('@', 'x'), ('#', '2')))
		self.assertEqual (p ('\\log_2 (x)'), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (p ('sqrt x'), ('sqrt', ('@', 'x')))
		self.assertEqual (p ('sqrt {x}'), ('sqrt', ('@', 'x')))
		self.assertEqual (p ('sqrt (x)'), ('sqrt', ('(', ('@', 'x'))))
		self.assertEqual (p ('sqrt[3] x'), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (p ('sqrt[3] {x}'), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (p ('sqrt[3] (x)'), ('sqrt', ('(', ('@', 'x')), ('#', '3')))
		self.assertEqual (p ('sin x'), ('func', 'sin', (('@', 'x'),)))
		self.assertEqual (p ('sin^2 x'), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (p ('sin (x)'), ('func', 'sin', (('@', 'x'),)))
		self.assertEqual (p ('sin (x)^2'), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (p ('{sin x}^2'), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (p ('sin**2 x'), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (p ('sin**-1 x'), ('func', 'asin', (('@', 'x'),)))
		self.assertEqual (p ('acos (x)'), ('func', 'acos', (('@', 'x'),)))
		self.assertEqual (p ('\\arccos (x)'), ('func', 'acos', (('@', 'x'),)))
		self.assertEqual (p ('\\lim_{x\\to0} 1/x'), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (p ('\\lim_{x\\to0^+} 1/x'), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (p ('\\lim_{x\\to0**-} 1/x'), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (p ('Limit (1/x, x, 0)'), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (p ('Limit (1/x, x, 0, "-")'), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (p ('Limit (1/x, x, 0, dir="+-")'), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (p ('\\sum_{n=0}^\\infty x^n/n!'), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', 'oo')))
		self.assertEqual (p ('Sum (x^n/n!, (n, 0, oo))'), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', 'oo')))
		self.assertEqual (p ('d/dx x**2y**2z'), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('@', 'dx'),)))
		self.assertEqual (p ('d^2/dx^2 x^2y**2z'), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')),)))
		self.assertEqual (p ('d^3/dx^2dy x^2y**2z'), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'))))
		self.assertEqual (p ('\\partial^4 / \\partial x^2\\partial y\\partial z x^2 y**2 z'), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'partialx'), ('#', '2')), ('@', 'partialy'), ('@', 'partialz'))))
		self.assertEqual (p ('Derivative (x^2y**2z, x, 2, y, z)'), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'), ('@', 'dz'))))
		self.assertEqual (p ('\\int dx'), ('intg', None, ('@', 'dx')))
		self.assertEqual (p ('\\int x dx'), ('intg', ('@', 'x'), ('@', 'dx')))
		self.assertEqual (p ('\\int_0^1 x dx'), ('intg', ('@', 'x'), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (p ('\\int_0^1 \\int y dy dx'), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (p ('Integral (\\int y dy, (x, 0, 1))'), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (p ('{1,}'), ('vec', (('#', '1'),)))
		self.assertEqual (p ('{1,2}'), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (p ('{1,2,}'), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (p ('{{1,},}'), ('vec', (('#', '1'),)))
		self.assertEqual (p ('{{1,},{2,}}'), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (p ('{{1,},{2,},}'), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]'), ('vec', (('#', '1'),)))
		self.assertEqual (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}'), ('vec', (('#', '1'),)))
		self.assertEqual (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}'), ('mat', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}'), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}'), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (p ('-1**x'), ('-', ('^', ('#', '1'), ('@', 'x'))))
		self.assertEqual (p ('{-1}**x'), ('^', ('#', '-1'), ('@', 'x')))
		self.assertEqual (p ('-{-1}**x'), ('-', ('^', ('#', '-1'), ('@', 'x'))))
		self.assertEqual (p ('(-1)**x'), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (p ('-(-1)**x'), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (p ('{1,2}!'), ('!', ('vec', (('#', '1'), ('#', '2')))))
		self.assertEqual (p ('{{0,1},{1,0}}**x'), ('^', ('mat', ((('#', '0'), ('#', '1')), (('#', '1'), ('#', '0')))), ('@', 'x')))
		self.assertEqual (p ('{{1,2},{3,4}}!'), ('!', ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4'))))))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.T'), ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.T.T'), ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'), 'T'))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.T.T.T'), ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'), 'T'), 'T'))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.transpose ()'), ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', ()))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()'), ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', ()), 'transpose', ()))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()'), ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', ()), 'transpose', ()), 'transpose', ()))
		self.assertEqual (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()'), ('.', ('.', ('.', ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', ()), 'transpose', ()), 'T'), 'T'), 'transpose', ()), 'transpose', ()))
		self.assertEqual (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}'), ('*', (('mat', ((('@', 'A'), ('@', 'B')), (('@', 'C'), ('@', 'D')))), ('vec', (('@', 'x'), ('@', 'y'))))))
		self.assertEqual (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\beta \\phi \\Sigma'), ('*', (('@', 'Theta'), ('@', 'Lambda'), ('@', 'xi'), ('@', 'Omega'), ('@', 'alpha'), ('@', 'theta'), ('@', 'Phi'), ('@', 'gamma'), ('@', 'nu'), ('@', 'delta'), ('@', 'rho'), ('@', 'lambda'), ('@', 'iota'), ('@', 'chi'), ('@', 'psi'), ('@', 'Psi'), ('@', 'Xi'), ('@', 'tau'), ('@', 'mu'), ('@', 'sigma'), ('@', 'omega'), ('@', 'kappa'), ('@', 'upsilon'), ('@', 'eta'), ('@', 'Pi'), ('@', 'epsilon'), ('@', 'Delta'), ('@', 'Upsilon'), ('@', 'beta'), ('@', 'phi'), ('@', 'Sigma'))))
		self.assertEqual (p ('1 if 2'), ('piece', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (p ('1 if 2 else 3'), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), True))))
		self.assertEqual (p ('1 if 2 else 3 if 4'), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (p ('1 if 2 else 3 if 4 else 5'), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), True))))
		self.assertEqual (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\end{cases}'), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), True))))
		self.assertEqual (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\\\ \\end{cases}'), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), True))))
		self.assertEqual (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{cases}'), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), ('#', '6')))))
		self.assertEqual (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\\\ \\end{cases}'), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), ('#', '6')))))
		self.assertEqual (p ('x**y.a'), ('^', ('@', 'x'), ('.', ('@', 'y'), 'a')))
		self.assertEqual (p ('x**y.a ()'), ('^', ('@', 'x'), ('.', ('@', 'y'), 'a', ())))
		self.assertEqual (p ('x**y.a.b'), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a'), 'b')))
		self.assertEqual (p ('x**y.a.b ()'), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a'), 'b', ())))
		self.assertEqual (p ('x**y.a ().b'), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a', ()), 'b')))
		self.assertEqual (p ('x**y.a ().b ()'), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a', ()), 'b', ())))
		self.assertEqual (p ('{1 if x < 0 else 3} if x < 1 else 5'), ('piece', ((('piece', ((('#', '1'), ('=', '<', ('@', 'x'), ('#', '0'))), (('#', '3'), True))), ('=', '<', ('@', 'x'), ('#', '1'))), (('#', '5'), True))))
		self.assertEqual (p ('1 if {True if x < 0 else False} else 5'), ('piece', ((('#', '1'), ('piece', ((('@', 'True'), ('=', '<', ('@', 'x'), ('#', '0'))), (('@', 'False'), True)))), (('#', '5'), True))))
		self.assertEqual (p ('1 if {True if x < 0 else False} else {7 if x < 1 else 5}'), ('piece', ((('#', '1'), ('piece', ((('@', 'True'), ('=', '<', ('@', 'x'), ('#', '0'))), (('@', 'False'), True)))), (('piece', ((('#', '7'), ('=', '<', ('@', 'x'), ('#', '1'))), (('#', '5'), True))), True))))
		self.assertEqual (p ('{1 if x < 0 else 9} if {True if x < 1 else False} else {7 if x < 2 else 5}'), ('piece', ((('piece', ((('#', '1'), ('=', '<', ('@', 'x'), ('#', '0'))), (('#', '9'), True))), ('piece', ((('@', 'True'), ('=', '<', ('@', 'x'), ('#', '1'))), (('@', 'False'), True)))), (('piece', ((('#', '7'), ('=', '<', ('@', 'x'), ('#', '2'))), (('#', '5'), True))), True))))
		self.assertEqual (p ('x.y!'), ('!', ('.', ('@', 'x'), 'y')))
		self.assertEqual (p ('x.y**2'), ('^', ('.', ('@', 'x'), 'y'), ('#', '2')))
		self.assertEqual (p ('x.y ()!'), ('!', ('.', ('@', 'x'), 'y', ())))
		self.assertEqual (p ('x.y ()**2'), ('^', ('.', ('@', 'x'), 'y', ()), ('#', '2')))
		self.assertEqual (p ('x**y.a!'), ('^', ('@', 'x'), ('!', ('.', ('@', 'y'), 'a'))))
		self.assertEqual (p ('x**y.a**2'), ('^', ('@', 'x'), ('^', ('.', ('@', 'y'), 'a'), ('#', '2'))))
		self.assertEqual (p ('x**y.a ()!'), ('^', ('@', 'x'), ('!', ('.', ('@', 'y'), 'a', ()))))
		self.assertEqual (p ('x**y.a ()**2'), ('^', ('@', 'x'), ('^', ('.', ('@', 'y'), 'a', ()), ('#', '2'))))
		self.assertEqual (p ('lambda: x'), ('lamb', ('@', 'x'), ()))
		self.assertEqual (p ('lambda x: x**2'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))
		self.assertEqual (p ('lambda x, y: x + y'), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))
		self.assertEqual (p ('a lambda: x'), ('*', (('@', 'a'), ('lamb', ('@', 'x'), ()))))
		self.assertEqual (p ('a lambda x: x**2'), ('*', (('@', 'a'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))))
		self.assertEqual (p ('a lambda x, y: x + y'), ('*', (('@', 'a'), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))))
		self.assertEqual (p ('1, lambda: x'), (',', (('#', '1'), ('lamb', ('@', 'x'), ()))))
		self.assertEqual (p ('1, lambda x: x**2'), (',', (('#', '1'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))))
		self.assertEqual (p ('1, lambda x, y: x + y'), (',', (('#', '1'), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))))
		self.assertEqual (p ('1, a lambda: x'), (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('@', 'x'), ()))))))
		self.assertEqual (p ('1, a lambda x: x**2'), (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))))))
		self.assertEqual (p ('1, a lambda x, y: x + y'), (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))))))
		self.assertEqual (p ('1, a lambda: x, 2'), (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('@', 'x'), ()))), ('#', '2'))))
		self.assertEqual (p ('1, a lambda x: x**2, 2'), (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))), ('#', '2'))))
		self.assertEqual (p ('1, a lambda x, y: x + y, 2'), (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))), ('#', '2'))))
		self.assertEqual (p ('\\left(\\left(\\right) \\mapsto x \\right)'), ('(', ('lamb', ('@', 'x'), ())))
		self.assertEqual (p ('\\left(\\left(x \\right) \\mapsto x^2 \\right)'), ('(', ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),))))
		self.assertEqual (p ('\\left(\\left(x, y \\right) \\mapsto x + y \\right)'), ('(', ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y')))))
		self.assertEqual (p ('eye (2).is_diagonal ()'), ('.', ('func', 'eye', (('#', '2'),)), 'is_diagonal', ()))

	def test_ast2tex (self):
		self.assertEqual (ast2tex (p ('1')), '1')
		self.assertEqual (ast2tex (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')
		self.assertEqual (ast2tex (p ('x')), 'x')
		self.assertEqual (ast2tex (p ('xy')), 'xy')
		self.assertEqual (ast2tex (p ('dx')), 'dx')
		self.assertEqual (ast2tex (p ('partialx')), '\\partial x')
		self.assertEqual (ast2tex (p ('\\partial x')), '\\partial x')
		self.assertEqual (ast2tex (p ('x d  y')), 'x\\ d\\ y')
		self.assertEqual (ast2tex (p ('x partial y')), 'x\\ \\partial\\ y')
		self.assertEqual (ast2tex (p ('x \\partial  y')), 'x\\ \\partial\\ y')
		self.assertEqual (ast2tex (p ('x dx dy y')), 'x\\ dx\\ dy\\ y')
		self.assertEqual (ast2tex (p ('x partialx partialy y')), 'x\\ \\partial x\\ \\partial y\\ y')
		self.assertEqual (ast2tex (p ("x'")), "x'")
		self.assertEqual (ast2tex (p ("x''")), "x''")
		self.assertEqual (ast2tex (p ("x'''")), "x'''")
		self.assertEqual (ast2tex (p ('-1')), '-1')
		self.assertEqual (ast2tex (p ('-x')), '-x')
		self.assertEqual (ast2tex (p ('{x}')), 'x')
		self.assertEqual (ast2tex (p ('{{x}}')), 'x')
		self.assertEqual (ast2tex (p ('()')), '\\left( \\right)')
		self.assertEqual (ast2tex (p ('(x)')), '\\left(x \\right)')
		self.assertEqual (ast2tex (p ('(x,)')), '\\left(x, \\right)')
		self.assertEqual (ast2tex (p ('(x,y)')), '\\left(x, y \\right)')
		self.assertEqual (ast2tex (p ('(x,y,)')), '\\left(x, y \\right)')
		self.assertEqual (ast2tex (p ('[]')), '\\left[ \\right]')
		self.assertEqual (ast2tex (p ('[x]')), '\\left[x \\right]')
		self.assertEqual (ast2tex (p ('[x,]')), '\\left[x \\right]')
		self.assertEqual (ast2tex (p ('[x,y]')), '\\left[x, y \\right]')
		self.assertEqual (ast2tex (p ('[x,y,]')), '\\left[x, y \\right]')
		self.assertEqual (ast2tex (p ('"x\\x20\\n"')), "\\text{'x \\n'}")
		self.assertEqual (ast2tex (p ("'x\\x20\\n'")), "\\text{'x \\n'}")
		self.assertEqual (ast2tex (p ("x''string'")), "x''\\ string'")
		self.assertEqual (ast2tex (p ("x' 'string'")), "x'\\ \\text{'string'}")
		self.assertEqual (ast2tex (p ('|x|')), '\\left|x \\right|')
		self.assertEqual (ast2tex (p ('x!')), 'x!')
		self.assertEqual (ast2tex (p ('x+y')), 'x + y')
		self.assertEqual (ast2tex (p ('x-y')), 'x - y')
		self.assertEqual (ast2tex (p ('x*y')), 'x y')
		self.assertEqual (ast2tex (p ('x y')), 'x y')
		self.assertEqual (ast2tex (p ('x(y)')), 'x \\left(y \\right)')
		self.assertEqual (ast2tex (p ('x/y')), '\\frac{x}{y}')
		self.assertEqual (ast2tex (p ('x^y')), 'x^y')
		self.assertEqual (ast2tex (p ('log x')), '\\ln\\left(x \\right)')
		self.assertEqual (ast2tex (p ('log {x}')), '\\ln\\left(x \\right)')
		self.assertEqual (ast2tex (p ('log (x)')), '\\ln\\left(x \\right)')
		self.assertEqual (ast2tex (p ('\\log_2 x')), '\\log_2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('\\log_2 {x}')), '\\log_2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('\\log_2 (x)')), '\\log_2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('sqrt x')), '\\sqrt{x}')
		self.assertEqual (ast2tex (p ('sqrt {x}')), '\\sqrt{x}')
		self.assertEqual (ast2tex (p ('sqrt (x)')), '\\sqrt{x}')
		self.assertEqual (ast2tex (p ('sqrt[3] x')), '\\sqrt[3]{x}')
		self.assertEqual (ast2tex (p ('sqrt[3] {x}')), '\\sqrt[3]{x}')
		self.assertEqual (ast2tex (p ('sqrt[3] (x)')), '\\sqrt[3]{x}')
		self.assertEqual (ast2tex (p ('sin x')), '\\sin\\left(x \\right)')
		self.assertEqual (ast2tex (p ('sin^2 x')), '\\sin^2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('sin (x)')), '\\sin\\left(x \\right)')
		self.assertEqual (ast2tex (p ('sin (x)^2')), '\\sin^2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('{sin x}^2')), '\\sin^2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('sin**2 x')), '\\sin^2\\left(x \\right)')
		self.assertEqual (ast2tex (p ('sin**-1 x')), '\\sin^{-1}\\left(x \\right)')
		self.assertEqual (ast2tex (p ('acos (x)')), '\\cos^{-1}\\left(x \\right)')
		self.assertEqual (ast2tex (p ('\\arccos (x)')), '\\cos^{-1}\\left(x \\right)')
		self.assertEqual (ast2tex (p ('\\lim_{x\\to0} 1/x')), '\\lim_{x \\to 0} \\frac{1}{x}')
		self.assertEqual (ast2tex (p ('\\lim_{x\\to0^+} 1/x')), '\\lim_{x \\to 0^+} \\frac{1}{x}')
		self.assertEqual (ast2tex (p ('\\lim_{x\\to0**-} 1/x')), '\\lim_{x \\to 0^-} \\frac{1}{x}')
		self.assertEqual (ast2tex (p ('Limit (1/x, x, 0)')), '\\lim_{x \\to 0^+} \\frac{1}{x}')
		self.assertEqual (ast2tex (p ('Limit (1/x, x, 0, "-")')), '\\lim_{x \\to 0^-} \\frac{1}{x}')
		self.assertEqual (ast2tex (p ('Limit (1/x, x, 0, dir="+-")')), '\\lim_{x \\to 0} \\frac{1}{x}')
		self.assertEqual (ast2tex (p ('\\sum_{n=0}^\\infty x^n/n!')), '\\sum_{n = 0}^\\infty \\frac{x^n}{n!}')
		self.assertEqual (ast2tex (p ('Sum (x^n/n!, (n, 0, oo))')), '\\sum_{n = 0}^\\infty \\frac{x^n}{n!}')
		self.assertEqual (ast2tex (p ('d/dx x**2y**2z')), '\\frac{d}{dx}\\left(x^2 y^2 z \\right)')
		self.assertEqual (ast2tex (p ('d^2/dx^2 x^2y**2z')), '\\frac{d^2}{dx^2}\\left(x^2 y^2 z \\right)')
		self.assertEqual (ast2tex (p ('d^3/dx^2dy x^2y**2z')), '\\frac{\\partial^3}{\\partial x^2\\partial y}\\left(x^2 y^2 z \\right)')
		self.assertEqual (ast2tex (p ('\\partial^4 / \\partial x^2\\partial y\\partial z x^2 y**2 z')), '\\frac{\\partial^4}{\\partial x^2\\partial y\\partial z}\\left(x^2 y^2 z \\right)')
		self.assertEqual (ast2tex (p ('Derivative (x^2y**2z, x, 2, y, z)')), '\\frac{\\partial^4}{\\partial x^2\\partial y\\partial z}\\left(x^2 y^2 z \\right)')
		self.assertEqual (ast2tex (p ('\\int dx')), '\\int \\ dx')
		self.assertEqual (ast2tex (p ('\\int x dx')), '\\int x \\ dx')
		self.assertEqual (ast2tex (p ('\\int_0^1 x dx')), '\\int_0^1 x \\ dx')
		self.assertEqual (ast2tex (p ('\\int_0^1 \\int y dy dx')), '\\int_0^1 \\int y \\ dy \\ dx')
		self.assertEqual (ast2tex (p ('Integral (\\int y dy, (x, 0, 1))')), '\\int_0^1 \\int y \\ dy \\ dx')
		self.assertEqual (ast2tex (p ('{1,}')), '\\begin{bmatrix} 1 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('{1,2}')), '\\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('{1,2,}')), '\\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('{{1,},}')), '\\begin{bmatrix} 1 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('{{1,},{2,}}')), '\\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('{{1,},{2,},}')), '\\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), '\\begin{bmatrix} 1 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), '\\begin{bmatrix} 1 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), '\\begin{bmatrix} 1 & 2 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), '\\begin{bmatrix} 1 & 2 \\\\ 3 & 4 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), '\\begin{bmatrix} 1 & 2 \\\\ 3 & 4 \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('-1**x')), '-1^x')
		self.assertEqual (ast2tex (p ('{-1}**x')), '\\left(-1 \\right)^x')
		self.assertEqual (ast2tex (p ('-{-1}**x')), '-\\left(-1 \\right)^x')
		self.assertEqual (ast2tex (p ('(-1)**x')), '\\left(-1 \\right)^x')
		self.assertEqual (ast2tex (p ('-(-1)**x')), '-\\left(-1 \\right)^x')
		self.assertEqual (ast2tex (p ('{1,2}!')), '\\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}!')
		self.assertEqual (ast2tex (p ('{{0,1},{1,0}}**x')), '{\\begin{bmatrix} 0 & 1 \\\\ 1 & 0 \\end{bmatrix}}^x')
		self.assertEqual (ast2tex (p ('{{1,2},{3,4}}!')), '\\begin{bmatrix} 1 & 2 \\\\ 3 & 4 \\end{bmatrix}!')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.T')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.T')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.T.T')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.T.T')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.T.T.T')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.T.T.T')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.transpose ()')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.\\operatorname{transpose}\\left( \\right)')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.\\operatorname{transpose}\\left( \\right).\\operatorname{transpose}\\left( \\right)')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.\\operatorname{transpose}\\left( \\right).\\operatorname{transpose}\\left( \\right).\\operatorname{transpose}\\left( \\right)')
		self.assertEqual (ast2tex (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), '\\begin{bmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{bmatrix}.\\operatorname{transpose}\\left( \\right).\\operatorname{transpose}\\left( \\right).T.T.\\operatorname{transpose}\\left( \\right).\\operatorname{transpose}\\left( \\right)')
		self.assertEqual (ast2tex (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), '\\begin{bmatrix} A & B \\\\ C & D \\end{bmatrix} \\cdot \\begin{bmatrix} x \\\\ y \\end{bmatrix}')
		self.assertEqual (ast2tex (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\beta \\phi \\Sigma')), '\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\beta \\phi \\Sigma')
		self.assertEqual (ast2tex (p ('1 if 2')), '\\begin{cases} 1 & \\text{for}\\: 2 \\end{cases}')
		self.assertEqual (ast2tex (p ('1 if 2 else 3')), '\\begin{cases} 1 & \\text{for}\\: 2 \\\\ 3 & \\text{otherwise} \\end{cases}')
		self.assertEqual (ast2tex (p ('1 if 2 else 3 if 4')), '\\begin{cases} 1 & \\text{for}\\: 2 \\\\ 3 & \\text{for}\\: 4 \\end{cases}')
		self.assertEqual (ast2tex (p ('1 if 2 else 3 if 4 else 5')), '\\begin{cases} 1 & \\text{for}\\: 2 \\\\ 3 & \\text{for}\\: 4 \\\\ 5 & \\text{otherwise} \\end{cases}')
		self.assertEqual (ast2tex (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\end{cases}')), '\\begin{cases} 1 & \\text{for}\\: 2 \\\\ 3 & \\text{for}\\: 4 \\\\ 5 & \\text{otherwise} \\end{cases}')
		self.assertEqual (ast2tex (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\\\ \\end{cases}')), '\\begin{cases} 1 & \\text{for}\\: 2 \\\\ 3 & \\text{for}\\: 4 \\\\ 5 & \\text{otherwise} \\end{cases}')
		self.assertEqual (ast2tex (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{cases}')), '\\begin{cases} 1 & \\text{for}\\: 2 \\\\ 3 & \\text{for}\\: 4 \\\\ 5 & \\text{for}\\: 6 \\end{cases}')
		self.assertEqual (ast2tex (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\\\ \\end{cases}')), '\\begin{cases} 1 & \\text{for}\\: 2 \\\\ 3 & \\text{for}\\: 4 \\\\ 5 & \\text{for}\\: 6 \\end{cases}')
		self.assertEqual (ast2tex (p ('x**y.a')), 'x^{y.a}')
		self.assertEqual (ast2tex (p ('x**y.a ()')), 'x^{y.\\operatorname{a}\\left( \\right)}')
		self.assertEqual (ast2tex (p ('x**y.a.b')), 'x^{y.a.b}')
		self.assertEqual (ast2tex (p ('x**y.a.b ()')), 'x^{y.a.\\operatorname{b}\\left( \\right)}')
		self.assertEqual (ast2tex (p ('x**y.a ().b')), 'x^{y.\\operatorname{a}\\left( \\right).b}')
		self.assertEqual (ast2tex (p ('x**y.a ().b ()')), 'x^{y.\\operatorname{a}\\left( \\right).\\operatorname{b}\\left( \\right)}')
		self.assertEqual (ast2tex (p ('{1 if x < 0 else 3} if x < 1 else 5')), '\\begin{cases} \\begin{cases} 1 & \\text{for}\\: x < 0 \\\\ 3 & \\text{otherwise} \\end{cases} & \\text{for}\\: x < 1 \\\\ 5 & \\text{otherwise} \\end{cases}')
		self.assertEqual (ast2tex (p ('1 if {True if x < 0 else False} else 5')), '\\begin{cases} 1 & \\text{for}\\: \\begin{cases} True & \\text{for}\\: x < 0 \\\\ False & \\text{otherwise} \\end{cases} \\\\ 5 & \\text{otherwise} \\end{cases}')
		self.assertEqual (ast2tex (p ('1 if {True if x < 0 else False} else {7 if x < 1 else 5}')), '\\begin{cases} 1 & \\text{for}\\: \\begin{cases} True & \\text{for}\\: x < 0 \\\\ False & \\text{otherwise} \\end{cases} \\\\ \\begin{cases} 7 & \\text{for}\\: x < 1 \\\\ 5 & \\text{otherwise} \\end{cases} & \\text{otherwise} \\end{cases}')
		self.assertEqual (ast2tex (p ('{1 if x < 0 else 9} if {True if x < 1 else False} else {7 if x < 2 else 5}')), '\\begin{cases} \\begin{cases} 1 & \\text{for}\\: x < 0 \\\\ 9 & \\text{otherwise} \\end{cases} & \\text{for}\\: \\begin{cases} True & \\text{for}\\: x < 1 \\\\ False & \\text{otherwise} \\end{cases} \\\\ \\begin{cases} 7 & \\text{for}\\: x < 2 \\\\ 5 & \\text{otherwise} \\end{cases} & \\text{otherwise} \\end{cases}')
		self.assertEqual (ast2tex (p ('x.y!')), '\\left(x.y \\right)!')
		self.assertEqual (ast2tex (p ('x.y**2')), '\\left(x.y \\right)^2')
		self.assertEqual (ast2tex (p ('x.y ()!')), '\\left(x.\\operatorname{y}\\left( \\right) \\right)!')
		self.assertEqual (ast2tex (p ('x.y ()**2')), '\\left(x.\\operatorname{y}\\left( \\right) \\right)^2')
		self.assertEqual (ast2tex (p ('x**y.a!')), 'x^{\\left(y.a \\right)!}')
		self.assertEqual (ast2tex (p ('x**y.a**2')), 'x^{\\left(y.a \\right)^2}')
		self.assertEqual (ast2tex (p ('x**y.a ()!')), 'x^{\\left(y.\\operatorname{a}\\left( \\right) \\right)!}')
		self.assertEqual (ast2tex (p ('x**y.a ()**2')), 'x^{\\left(y.\\operatorname{a}\\left( \\right) \\right)^2}')
		self.assertEqual (ast2tex (p ('lambda: x')), '\\left( \\right) \\mapsto x')
		self.assertEqual (ast2tex (p ('lambda x: x**2')), 'x \\mapsto x^2')
		self.assertEqual (ast2tex (p ('lambda x, y: x + y')), '\\left(x, y \\right) \\mapsto x + y')
		self.assertEqual (ast2tex (p ('a lambda: x')), 'a \\left(\\left( \\right) \\mapsto x \\right)')
		self.assertEqual (ast2tex (p ('a lambda x: x**2')), 'a \\left(x \\mapsto x^2 \\right)')
		self.assertEqual (ast2tex (p ('a lambda x, y: x + y')), 'a \\left(\\left(x, y \\right) \\mapsto x + y \\right)')
		self.assertEqual (ast2tex (p ('1, lambda: x')), '1, \\left( \\right) \\mapsto x')
		self.assertEqual (ast2tex (p ('1, lambda x: x**2')), '1, x \\mapsto x^2')
		self.assertEqual (ast2tex (p ('1, lambda x, y: x + y')), '1, \\left(x, y \\right) \\mapsto x + y')
		self.assertEqual (ast2tex (p ('1, a lambda: x')), '1, a \\left(\\left( \\right) \\mapsto x \\right)')
		self.assertEqual (ast2tex (p ('1, a lambda x: x**2')), '1, a \\left(x \\mapsto x^2 \\right)')
		self.assertEqual (ast2tex (p ('1, a lambda x, y: x + y')), '1, a \\left(\\left(x, y \\right) \\mapsto x + y \\right)')
		self.assertEqual (ast2tex (p ('1, a lambda: x, 2')), '1, a \\left(\\left( \\right) \\mapsto x \\right), 2')
		self.assertEqual (ast2tex (p ('1, a lambda x: x**2, 2')), '1, a \\left(x \\mapsto x^2 \\right), 2')
		self.assertEqual (ast2tex (p ('1, a lambda x, y: x + y, 2')), '1, a \\left(\\left(x, y \\right) \\mapsto x + y \\right), 2')
		self.assertEqual (ast2tex (p ('\\left(\\left(\\right) \\mapsto x \\right)')), '\\left(\\left( \\right) \\mapsto x \\right)')
		self.assertEqual (ast2tex (p ('\\left(\\left(x \\right) \\mapsto x^2 \\right)')), '\\left(x \\mapsto x^2 \\right)')
		self.assertEqual (ast2tex (p ('\\left(\\left(x, y \\right) \\mapsto x + y \\right)')), '\\left(\\left(x, y \\right) \\mapsto x + y \\right)')
		self.assertEqual (ast2tex (p ('eye (2).is_diagonal ()')), '\\begin{bmatrix} 1 & 0 \\\\ 0 & 1 \\end{bmatrix}.\\operatorname{is\\_diagonal}\\left( \\right)')

	def test_ast2nat (self):
		self.assertEqual (ast2nat (p ('1')), '1')
		self.assertEqual (ast2nat (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')
		self.assertEqual (ast2nat (p ('x')), 'x')
		self.assertEqual (ast2nat (p ('xy')), 'xy')
		self.assertEqual (ast2nat (p ('dx')), 'dx')
		self.assertEqual (ast2nat (p ('partialx')), 'partialx')
		self.assertEqual (ast2nat (p ('\\partial x')), 'partialx')
		self.assertEqual (ast2nat (p ('x d  y')), 'x d y')
		self.assertEqual (ast2nat (p ('x partial y')), 'x partial y')
		self.assertEqual (ast2nat (p ('x \\partial  y')), 'x partial y')
		self.assertEqual (ast2nat (p ('x dx dy y')), 'x dx dy y')
		self.assertEqual (ast2nat (p ('x partialx partialy y')), 'x partialx partialy y')
		self.assertEqual (ast2nat (p ("x'")), 'x_prime')
		self.assertEqual (ast2nat (p ("x''")), 'x_prime_prime')
		self.assertEqual (ast2nat (p ("x'''")), 'x_prime_prime_prime')
		self.assertEqual (ast2nat (p ('-1')), '-1')
		self.assertEqual (ast2nat (p ('-x')), '-x')
		self.assertEqual (ast2nat (p ('{x}')), 'x')
		self.assertEqual (ast2nat (p ('{{x}}')), 'x')
		self.assertEqual (ast2nat (p ('()')), '()')
		self.assertEqual (ast2nat (p ('(x)')), '(x)')
		self.assertEqual (ast2nat (p ('(x,)')), '(x,)')
		self.assertEqual (ast2nat (p ('(x,y)')), '(x, y)')
		self.assertEqual (ast2nat (p ('(x,y,)')), '(x, y)')
		self.assertEqual (ast2nat (p ('[]')), '[]')
		self.assertEqual (ast2nat (p ('[x]')), '[x]')
		self.assertEqual (ast2nat (p ('[x,]')), '[x]')
		self.assertEqual (ast2nat (p ('[x,y]')), '[x, y]')
		self.assertEqual (ast2nat (p ('[x,y,]')), '[x, y]')
		self.assertEqual (ast2nat (p ('"x\\x20\\n"')), "'x \\n'")
		self.assertEqual (ast2nat (p ("'x\\x20\\n'")), "'x \\n'")
		self.assertEqual (ast2nat (p ("x''string'")), 'x_prime_prime string_prime')
		self.assertEqual (ast2nat (p ("x' 'string'")), "x_prime 'string'")
		self.assertEqual (ast2nat (p ('|x|')), '{|x|}')
		self.assertEqual (ast2nat (p ('x!')), 'x!')
		self.assertEqual (ast2nat (p ('x+y')), 'x + y')
		self.assertEqual (ast2nat (p ('x-y')), 'x - y')
		self.assertEqual (ast2nat (p ('x*y')), 'x y')
		self.assertEqual (ast2nat (p ('x y')), 'x y')
		self.assertEqual (ast2nat (p ('x(y)')), 'x (y)')
		self.assertEqual (ast2nat (p ('x/y')), 'x/y')
		self.assertEqual (ast2nat (p ('x^y')), 'x**y')
		self.assertEqual (ast2nat (p ('log x')), 'ln(x)')
		self.assertEqual (ast2nat (p ('log {x}')), 'ln(x)')
		self.assertEqual (ast2nat (p ('log (x)')), 'ln(x)')
		self.assertEqual (ast2nat (p ('\\log_2 x')), '\\log_2(x)')
		self.assertEqual (ast2nat (p ('\\log_2 {x}')), '\\log_2(x)')
		self.assertEqual (ast2nat (p ('\\log_2 (x)')), '\\log_2(x)')
		self.assertEqual (ast2nat (p ('sqrt x')), 'sqrt(x)')
		self.assertEqual (ast2nat (p ('sqrt {x}')), 'sqrt(x)')
		self.assertEqual (ast2nat (p ('sqrt (x)')), 'sqrt(x)')
		self.assertEqual (ast2nat (p ('sqrt[3] x')), '\\sqrt[3]{x}')
		self.assertEqual (ast2nat (p ('sqrt[3] {x}')), '\\sqrt[3]{x}')
		self.assertEqual (ast2nat (p ('sqrt[3] (x)')), '\\sqrt[3]{x}')
		self.assertEqual (ast2nat (p ('sin x')), 'sin(x)')
		self.assertEqual (ast2nat (p ('sin^2 x')), 'sin**2(x)')
		self.assertEqual (ast2nat (p ('sin (x)')), 'sin(x)')
		self.assertEqual (ast2nat (p ('sin (x)^2')), 'sin**2(x)')
		self.assertEqual (ast2nat (p ('{sin x}^2')), 'sin**2(x)')
		self.assertEqual (ast2nat (p ('sin**2 x')), 'sin**2(x)')
		self.assertEqual (ast2nat (p ('sin**-1 x')), 'asin(x)')
		self.assertEqual (ast2nat (p ('acos (x)')), 'acos(x)')
		self.assertEqual (ast2nat (p ('\\arccos (x)')), 'acos(x)')
		self.assertEqual (ast2nat (p ('\\lim_{x\\to0} 1/x')), '\\lim_{x \\to 0} 1/x')
		self.assertEqual (ast2nat (p ('\\lim_{x\\to0^+} 1/x')), '\\lim_{x \\to 0**+} 1/x')
		self.assertEqual (ast2nat (p ('\\lim_{x\\to0**-} 1/x')), '\\lim_{x \\to 0**-} 1/x')
		self.assertEqual (ast2nat (p ('Limit (1/x, x, 0)')), '\\lim_{x \\to 0**+} 1/x')
		self.assertEqual (ast2nat (p ('Limit (1/x, x, 0, "-")')), '\\lim_{x \\to 0**-} 1/x')
		self.assertEqual (ast2nat (p ('Limit (1/x, x, 0, dir="+-")')), '\\lim_{x \\to 0} 1/x')
		self.assertEqual (ast2nat (p ('\\sum_{n=0}^\\infty x^n/n!')), '\\sum_{n=0}^{oo} x**n / n!')
		self.assertEqual (ast2nat (p ('Sum (x^n/n!, (n, 0, oo))')), '\\sum_{n=0}^{oo} x**n / n!')
		self.assertEqual (ast2nat (p ('d/dx x**2y**2z')), 'd / dx (x**2 y**2 z)')
		self.assertEqual (ast2nat (p ('d^2/dx^2 x^2y**2z')), 'd^2 / dx**2 (x**2 y**2 z)')
		self.assertEqual (ast2nat (p ('d^3/dx^2dy x^2y**2z')), 'd^3 / dx**2 dy (x**2 y**2 z)')
		self.assertEqual (ast2nat (p ('\\partial^4 / \\partial x^2\\partial y\\partial z x^2 y**2 z')), 'partial^4 / partialx**2 partialy partialz (x**2 y**2 z)')
		self.assertEqual (ast2nat (p ('Derivative (x^2y**2z, x, 2, y, z)')), 'd^4 / dx**2 dy dz (x**2 y**2 z)')
		self.assertEqual (ast2nat (p ('\\int dx')), '\\int dx')
		self.assertEqual (ast2nat (p ('\\int x dx')), '\\int x dx')
		self.assertEqual (ast2nat (p ('\\int_0^1 x dx')), '\\int_0^1 x dx')
		self.assertEqual (ast2nat (p ('\\int_0^1 \\int y dy dx')), '\\int_0^1 \\int y dy dx')
		self.assertEqual (ast2nat (p ('Integral (\\int y dy, (x, 0, 1))')), '\\int_0^1 \\int y dy dx')
		self.assertEqual (ast2nat (p ('{1,}')), '{1,}')
		self.assertEqual (ast2nat (p ('{1,2}')), '{1, 2}')
		self.assertEqual (ast2nat (p ('{1,2,}')), '{1, 2}')
		self.assertEqual (ast2nat (p ('{{1,},}')), '{1,}')
		self.assertEqual (ast2nat (p ('{{1,},{2,}}')), '{1, 2}')
		self.assertEqual (ast2nat (p ('{{1,},{2,},}')), '{1, 2}')
		self.assertEqual (ast2nat (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), '{1,}')
		self.assertEqual (ast2nat (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), '{1,}')
		self.assertEqual (ast2nat (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), '{{1, 2},}')
		self.assertEqual (ast2nat (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), '{{1, 2}, {3, 4}}')
		self.assertEqual (ast2nat (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), '{{1, 2}, {3, 4}}')
		self.assertEqual (ast2nat (p ('-1**x')), '-1**x')
		self.assertEqual (ast2nat (p ('{-1}**x')), '(-1)**x')
		self.assertEqual (ast2nat (p ('-{-1}**x')), '-(-1)**x')
		self.assertEqual (ast2nat (p ('(-1)**x')), '(-1)**x')
		self.assertEqual (ast2nat (p ('-(-1)**x')), '-(-1)**x')
		self.assertEqual (ast2nat (p ('{1,2}!')), '{1, 2}!')
		self.assertEqual (ast2nat (p ('{{0,1},{1,0}}**x')), '{{0, 1}, {1, 0}}**x')
		self.assertEqual (ast2nat (p ('{{1,2},{3,4}}!')), '{{1, 2}, {3, 4}}!')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.T')), '{{1, 2, 3}, {4, 5, 6}}.T')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.T.T')), '{{1, 2, 3}, {4, 5, 6}}.T.T')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.T.T.T')), '{{1, 2, 3}, {4, 5, 6}}.T.T.T')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.transpose ()')), '{{1, 2, 3}, {4, 5, 6}}.transpose()')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), '{{1, 2, 3}, {4, 5, 6}}.transpose().transpose()')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), '{{1, 2, 3}, {4, 5, 6}}.transpose().transpose().transpose()')
		self.assertEqual (ast2nat (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), '{{1, 2, 3}, {4, 5, 6}}.transpose().transpose().T.T.transpose().transpose()')
		self.assertEqual (ast2nat (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), '{{A, B}, {C, D}} {x, y}')
		self.assertEqual (ast2nat (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\beta \\phi \\Sigma')), 'Theta Lambda xi Omega alpha theta Phi gamma nu delta rho lambda iota chi psi Psi Xi tau mu sigma omega kappa upsilon eta Pi epsilon Delta Upsilon beta phi Sigma')
		self.assertEqual (ast2nat (p ('1 if 2')), '1 if 2')
		self.assertEqual (ast2nat (p ('1 if 2 else 3')), '1 if 2 else 3')
		self.assertEqual (ast2nat (p ('1 if 2 else 3 if 4')), '1 if 2 else 3 if 4')
		self.assertEqual (ast2nat (p ('1 if 2 else 3 if 4 else 5')), '1 if 2 else 3 if 4 else 5')
		self.assertEqual (ast2nat (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\end{cases}')), '1 if 2 else 3 if 4 else 5')
		self.assertEqual (ast2nat (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\\\ \\end{cases}')), '1 if 2 else 3 if 4 else 5')
		self.assertEqual (ast2nat (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{cases}')), '1 if 2 else 3 if 4 else 5 if 6')
		self.assertEqual (ast2nat (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\\\ \\end{cases}')), '1 if 2 else 3 if 4 else 5 if 6')
		self.assertEqual (ast2nat (p ('x**y.a')), 'x**y.a')
		self.assertEqual (ast2nat (p ('x**y.a ()')), 'x**y.a()')
		self.assertEqual (ast2nat (p ('x**y.a.b')), 'x**y.a.b')
		self.assertEqual (ast2nat (p ('x**y.a.b ()')), 'x**y.a.b()')
		self.assertEqual (ast2nat (p ('x**y.a ().b')), 'x**y.a().b')
		self.assertEqual (ast2nat (p ('x**y.a ().b ()')), 'x**y.a().b()')
		self.assertEqual (ast2nat (p ('{1 if x < 0 else 3} if x < 1 else 5')), '{1 if x < 0 else 3} if x < 1 else 5')
		self.assertEqual (ast2nat (p ('1 if {True if x < 0 else False} else 5')), '1 if {True if x < 0 else False} else 5')
		self.assertEqual (ast2nat (p ('1 if {True if x < 0 else False} else {7 if x < 1 else 5}')), '1 if {True if x < 0 else False} else {7 if x < 1 else 5}')
		self.assertEqual (ast2nat (p ('{1 if x < 0 else 9} if {True if x < 1 else False} else {7 if x < 2 else 5}')), '{1 if x < 0 else 9} if {True if x < 1 else False} else {7 if x < 2 else 5}')
		self.assertEqual (ast2nat (p ('x.y!')), '(x.y)!')
		self.assertEqual (ast2nat (p ('x.y**2')), '(x.y)**2')
		self.assertEqual (ast2nat (p ('x.y ()!')), '(x.y())!')
		self.assertEqual (ast2nat (p ('x.y ()**2')), '(x.y())**2')
		self.assertEqual (ast2nat (p ('x**y.a!')), 'x**(y.a)!')
		self.assertEqual (ast2nat (p ('x**y.a**2')), 'x**(y.a)**2')
		self.assertEqual (ast2nat (p ('x**y.a ()!')), 'x**(y.a())!')
		self.assertEqual (ast2nat (p ('x**y.a ()**2')), 'x**(y.a())**2')
		self.assertEqual (ast2nat (p ('lambda: x')), 'lambda: x')
		self.assertEqual (ast2nat (p ('lambda x: x**2')), 'lambda x: x**2')
		self.assertEqual (ast2nat (p ('lambda x, y: x + y')), 'lambda x, y: x + y')
		self.assertEqual (ast2nat (p ('a lambda: x')), 'a (lambda: x)')
		self.assertEqual (ast2nat (p ('a lambda x: x**2')), 'a (lambda x: x**2)')
		self.assertEqual (ast2nat (p ('a lambda x, y: x + y')), 'a (lambda x, y: x + y)')
		self.assertEqual (ast2nat (p ('1, lambda: x')), '1, lambda: x')
		self.assertEqual (ast2nat (p ('1, lambda x: x**2')), '1, lambda x: x**2')
		self.assertEqual (ast2nat (p ('1, lambda x, y: x + y')), '1, lambda x, y: x + y')
		self.assertEqual (ast2nat (p ('1, a lambda: x')), '1, a (lambda: x)')
		self.assertEqual (ast2nat (p ('1, a lambda x: x**2')), '1, a (lambda x: x**2)')
		self.assertEqual (ast2nat (p ('1, a lambda x, y: x + y')), '1, a (lambda x, y: x + y)')
		self.assertEqual (ast2nat (p ('1, a lambda: x, 2')), '1, a (lambda: x), 2')
		self.assertEqual (ast2nat (p ('1, a lambda x: x**2, 2')), '1, a (lambda x: x**2), 2')
		self.assertEqual (ast2nat (p ('1, a lambda x, y: x + y, 2')), '1, a (lambda x, y: x + y), 2')
		self.assertEqual (ast2nat (p ('\\left(\\left(\\right) \\mapsto x \\right)')), '(lambda: x)')
		self.assertEqual (ast2nat (p ('\\left(\\left(x \\right) \\mapsto x^2 \\right)')), '(lambda x: x**2)')
		self.assertEqual (ast2nat (p ('\\left(\\left(x, y \\right) \\mapsto x + y \\right)')), '(lambda x, y: x + y)')
		self.assertEqual (ast2nat (p ('eye (2).is_diagonal ()')), 'eye(2).is_diagonal()')

	def test_ast2py (self):
		self.assertEqual (ast2py (p ('1')), '1')
		self.assertEqual (ast2py (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')
		self.assertEqual (ast2py (p ('x')), 'x')
		self.assertEqual (ast2py (p ('xy')), 'xy')
		self.assertEqual (ast2py (p ('dx')), 'dx')
		self.assertEqual (ast2py (p ('partialx')), 'partialx')
		self.assertEqual (ast2py (p ('\\partial x')), 'partialx')
		self.assertEqual (ast2py (p ('x d  y')), 'x*d*y')
		self.assertEqual (ast2py (p ('x partial y')), 'x*partial*y')
		self.assertEqual (ast2py (p ('x \\partial  y')), 'x*partial*y')
		self.assertEqual (ast2py (p ('x dx dy y')), 'x*dx*dy*y')
		self.assertEqual (ast2py (p ('x partialx partialy y')), 'x*partialx*partialy*y')
		self.assertEqual (ast2py (p ("x'")), 'x_prime')
		self.assertEqual (ast2py (p ("x''")), 'x_prime_prime')
		self.assertEqual (ast2py (p ("x'''")), 'x_prime_prime_prime')
		self.assertEqual (ast2py (p ('-1')), '-1')
		self.assertEqual (ast2py (p ('-x')), '-x')
		self.assertEqual (ast2py (p ('{x}')), 'x')
		self.assertEqual (ast2py (p ('{{x}}')), 'x')
		self.assertEqual (ast2py (p ('()')), '()')
		self.assertEqual (ast2py (p ('(x)')), '(x)')
		self.assertEqual (ast2py (p ('(x,)')), '(x,)')
		self.assertEqual (ast2py (p ('(x,y)')), '(x, y)')
		self.assertEqual (ast2py (p ('(x,y,)')), '(x, y)')
		self.assertEqual (ast2py (p ('[]')), '[]')
		self.assertEqual (ast2py (p ('[x]')), '[x]')
		self.assertEqual (ast2py (p ('[x,]')), '[x]')
		self.assertEqual (ast2py (p ('[x,y]')), '[x, y]')
		self.assertEqual (ast2py (p ('[x,y,]')), '[x, y]')
		self.assertEqual (ast2py (p ('"x\\x20\\n"')), "'x \\n'")
		self.assertEqual (ast2py (p ("'x\\x20\\n'")), "'x \\n'")
		self.assertEqual (ast2py (p ("x''string'")), 'x_prime_prime*string_prime')
		self.assertEqual (ast2py (p ("x' 'string'")), "x_prime*'string'")
		self.assertEqual (ast2py (p ('|x|')), 'abs(x)')
		self.assertEqual (ast2py (p ('x!')), 'factorial(x)')
		self.assertEqual (ast2py (p ('x+y')), 'x + y')
		self.assertEqual (ast2py (p ('x-y')), 'x - y')
		self.assertEqual (ast2py (p ('x*y')), 'x*y')
		self.assertEqual (ast2py (p ('x y')), 'x*y')
		self.assertEqual (ast2py (p ('x(y)')), 'x*(y)')
		self.assertEqual (ast2py (p ('x/y')), 'x/y')
		self.assertEqual (ast2py (p ('x^y')), 'x**y')
		self.assertEqual (ast2py (p ('log x')), 'log(x)')
		self.assertEqual (ast2py (p ('log {x}')), 'log(x)')
		self.assertEqual (ast2py (p ('log (x)')), 'log(x)')
		self.assertEqual (ast2py (p ('\\log_2 x')), 'log(x) / log(2)')
		self.assertEqual (ast2py (p ('\\log_2 {x}')), 'log(x) / log(2)')
		self.assertEqual (ast2py (p ('\\log_2 (x)')), 'log(x) / log(2)')
		self.assertEqual (ast2py (p ('sqrt x')), 'sqrt(x)')
		self.assertEqual (ast2py (p ('sqrt {x}')), 'sqrt(x)')
		self.assertEqual (ast2py (p ('sqrt (x)')), 'sqrt(x)')
		self.assertEqual (ast2py (p ('sqrt[3] x')), 'x**(1/3)')
		self.assertEqual (ast2py (p ('sqrt[3] {x}')), 'x**(1/3)')
		self.assertEqual (ast2py (p ('sqrt[3] (x)')), 'x**(1/3)')
		self.assertEqual (ast2py (p ('sin x')), 'sin(x)')
		self.assertEqual (ast2py (p ('sin^2 x')), 'sin(x)**2')
		self.assertEqual (ast2py (p ('sin (x)')), 'sin(x)')
		self.assertEqual (ast2py (p ('sin (x)^2')), 'sin(x)**2')
		self.assertEqual (ast2py (p ('{sin x}^2')), 'sin(x)**2')
		self.assertEqual (ast2py (p ('sin**2 x')), 'sin(x)**2')
		self.assertEqual (ast2py (p ('sin**-1 x')), 'asin(x)')
		self.assertEqual (ast2py (p ('acos (x)')), 'acos(x)')
		self.assertEqual (ast2py (p ('\\arccos (x)')), 'acos(x)')
		self.assertEqual (ast2py (p ('\\lim_{x\\to0} 1/x')), "Limit(1/x, x, 0, dir='+-')")
		self.assertEqual (ast2py (p ('\\lim_{x\\to0^+} 1/x')), 'Limit(1/x, x, 0)')
		self.assertEqual (ast2py (p ('\\lim_{x\\to0**-} 1/x')), "Limit(1/x, x, 0, dir='-')")
		self.assertEqual (ast2py (p ('Limit (1/x, x, 0)')), 'Limit(1/x, x, 0)')
		self.assertEqual (ast2py (p ('Limit (1/x, x, 0, "-")')), "Limit(1/x, x, 0, dir='-')")
		self.assertEqual (ast2py (p ('Limit (1/x, x, 0, dir="+-")')), "Limit(1/x, x, 0, dir='+-')")
		self.assertEqual (ast2py (p ('\\sum_{n=0}^\\infty x^n/n!')), 'Sum(x**n / factorial(n), (n, 0, oo))')
		self.assertEqual (ast2py (p ('Sum (x^n/n!, (n, 0, oo))')), 'Sum(x**n / factorial(n), (n, 0, oo))')
		self.assertEqual (ast2py (p ('d/dx x**2y**2z')), 'Derivative(x**2*y**2*z, x)')
		self.assertEqual (ast2py (p ('d^2/dx^2 x^2y**2z')), 'Derivative(x**2*y**2*z, x, 2)')
		self.assertEqual (ast2py (p ('d^3/dx^2dy x^2y**2z')), 'Derivative(x**2*y**2*z, x, 2, y)')
		self.assertEqual (ast2py (p ('\\partial^4 / \\partial x^2\\partial y\\partial z x^2 y**2 z')), 'Derivative(x**2*y**2*z, x, 2, y, z)')
		self.assertEqual (ast2py (p ('Derivative (x^2y**2z, x, 2, y, z)')), 'Derivative(x**2*y**2*z, x, 2, y, z)')
		self.assertEqual (ast2py (p ('\\int dx')), 'Integral(1, x)')
		self.assertEqual (ast2py (p ('\\int x dx')), 'Integral(x, x)')
		self.assertEqual (ast2py (p ('\\int_0^1 x dx')), 'Integral(x, (x, 0, 1))')
		self.assertEqual (ast2py (p ('\\int_0^1 \\int y dy dx')), 'Integral(Integral(y, y), (x, 0, 1))')
		self.assertEqual (ast2py (p ('Integral (\\int y dy, (x, 0, 1))')), 'Integral(Integral(y, y), (x, 0, 1))')
		self.assertEqual (ast2py (p ('{1,}')), 'Matrix([[1]])')
		self.assertEqual (ast2py (p ('{1,2}')), 'Matrix([[1], [2]])')
		self.assertEqual (ast2py (p ('{1,2,}')), 'Matrix([[1], [2]])')
		self.assertEqual (ast2py (p ('{{1,},}')), 'Matrix([[1]])')
		self.assertEqual (ast2py (p ('{{1,},{2,}}')), 'Matrix([[1], [2]])')
		self.assertEqual (ast2py (p ('{{1,},{2,},}')), 'Matrix([[1], [2]])')
		self.assertEqual (ast2py (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), 'Matrix([[1]])')
		self.assertEqual (ast2py (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), 'Matrix([[1]])')
		self.assertEqual (ast2py (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), 'Matrix([[1, 2]])')
		self.assertEqual (ast2py (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), 'Matrix([[1, 2], [3, 4]])')
		self.assertEqual (ast2py (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), 'Matrix([[1, 2], [3, 4]])')
		self.assertEqual (ast2py (p ('-1**x')), '-1**x')
		self.assertEqual (ast2py (p ('{-1}**x')), '(-1)**x')
		self.assertEqual (ast2py (p ('-{-1}**x')), '-(-1)**x')
		self.assertEqual (ast2py (p ('(-1)**x')), '(-1)**x')
		self.assertEqual (ast2py (p ('-(-1)**x')), '-(-1)**x')
		self.assertEqual (ast2py (p ('{1,2}!')), 'factorial(Matrix([[1], [2]]))')
		self.assertEqual (ast2py (p ('{{0,1},{1,0}}**x')), 'Matrix([[0, 1], [1, 0]])**x')
		self.assertEqual (ast2py (p ('{{1,2},{3,4}}!')), 'factorial(Matrix([[1, 2], [3, 4]]))')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.T')), 'Matrix([[1, 2, 3], [4, 5, 6]]).T')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.T.T')), 'Matrix([[1, 2, 3], [4, 5, 6]]).T.T')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.T.T.T')), 'Matrix([[1, 2, 3], [4, 5, 6]]).T.T.T')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.transpose ()')), 'Matrix([[1, 2, 3], [4, 5, 6]]).transpose()')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), 'Matrix([[1, 2, 3], [4, 5, 6]]).transpose().transpose()')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), 'Matrix([[1, 2, 3], [4, 5, 6]]).transpose().transpose().transpose()')
		self.assertEqual (ast2py (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), 'Matrix([[1, 2, 3], [4, 5, 6]]).transpose().transpose().T.T.transpose().transpose()')
		self.assertEqual (ast2py (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), 'Matrix([[A, B], [C, D]])*Matrix([[x], [y]])')
		self.assertEqual (ast2py (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\beta \\phi \\Sigma')), 'Theta*Lambda*xi*Omega*alpha*theta*Phi*gamma*nu*delta*rho*lambda*iota*chi*psi*Psi*Xi*tau*mu*sigma*omega*kappa*upsilon*eta*Pi*epsilon*Delta*Upsilon*beta*phi*Sigma')
		self.assertEqual (ast2py (p ('1 if 2')), 'Piecewise((1, 2))')
		self.assertEqual (ast2py (p ('1 if 2 else 3')), 'Piecewise((1, 2), (3, True))')
		self.assertEqual (ast2py (p ('1 if 2 else 3 if 4')), 'Piecewise((1, 2), (3, 4))')
		self.assertEqual (ast2py (p ('1 if 2 else 3 if 4 else 5')), 'Piecewise((1, 2), (3, 4), (5, True))')
		self.assertEqual (ast2py (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\end{cases}')), 'Piecewise((1, 2), (3, 4), (5, True))')
		self.assertEqual (ast2py (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\\\ \\end{cases}')), 'Piecewise((1, 2), (3, 4), (5, True))')
		self.assertEqual (ast2py (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{cases}')), 'Piecewise((1, 2), (3, 4), (5, 6))')
		self.assertEqual (ast2py (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\\\ \\end{cases}')), 'Piecewise((1, 2), (3, 4), (5, 6))')
		self.assertEqual (ast2py (p ('x**y.a')), 'x**y.a')
		self.assertEqual (ast2py (p ('x**y.a ()')), 'x**y.a()')
		self.assertEqual (ast2py (p ('x**y.a.b')), 'x**y.a.b')
		self.assertEqual (ast2py (p ('x**y.a.b ()')), 'x**y.a.b()')
		self.assertEqual (ast2py (p ('x**y.a ().b')), 'x**y.a().b')
		self.assertEqual (ast2py (p ('x**y.a ().b ()')), 'x**y.a().b()')
		self.assertEqual (ast2py (p ('{1 if x < 0 else 3} if x < 1 else 5')), 'Piecewise((Piecewise((1, x < 0), (3, True)), x < 1), (5, True))')
		self.assertEqual (ast2py (p ('1 if {True if x < 0 else False} else 5')), 'Piecewise((1, Piecewise((True, x < 0), (False, True))), (5, True))')
		self.assertEqual (ast2py (p ('1 if {True if x < 0 else False} else {7 if x < 1 else 5}')), 'Piecewise((1, Piecewise((True, x < 0), (False, True))), (Piecewise((7, x < 1), (5, True)), True))')
		self.assertEqual (ast2py (p ('{1 if x < 0 else 9} if {True if x < 1 else False} else {7 if x < 2 else 5}')), 'Piecewise((Piecewise((1, x < 0), (9, True)), Piecewise((True, x < 1), (False, True))), (Piecewise((7, x < 2), (5, True)), True))')
		self.assertEqual (ast2py (p ('x.y!')), 'factorial(x.y)')
		self.assertEqual (ast2py (p ('x.y**2')), 'x.y**2')
		self.assertEqual (ast2py (p ('x.y ()!')), 'factorial(x.y())')
		self.assertEqual (ast2py (p ('x.y ()**2')), 'x.y()**2')
		self.assertEqual (ast2py (p ('x**y.a!')), 'x**factorial(y.a)')
		self.assertEqual (ast2py (p ('x**y.a**2')), 'x**y.a**2')
		self.assertEqual (ast2py (p ('x**y.a ()!')), 'x**factorial(y.a())')
		self.assertEqual (ast2py (p ('x**y.a ()**2')), 'x**y.a()**2')
		self.assertEqual (ast2py (p ('lambda: x')), 'lambda: x')
		self.assertEqual (ast2py (p ('lambda x: x**2')), 'lambda x: x**2')
		self.assertEqual (ast2py (p ('lambda x, y: x + y')), 'lambda x, y: x + y')
		self.assertEqual (ast2py (p ('a lambda: x')), 'a*lambda: x')
		self.assertEqual (ast2py (p ('a lambda x: x**2')), 'a*lambda x: x**2')
		self.assertEqual (ast2py (p ('a lambda x, y: x + y')), 'a*lambda x, y: x + y')
		self.assertEqual (ast2py (p ('1, lambda: x')), '1, lambda: x')
		self.assertEqual (ast2py (p ('1, lambda x: x**2')), '1, lambda x: x**2')
		self.assertEqual (ast2py (p ('1, lambda x, y: x + y')), '1, lambda x, y: x + y')
		self.assertEqual (ast2py (p ('1, a lambda: x')), '1, a*lambda: x')
		self.assertEqual (ast2py (p ('1, a lambda x: x**2')), '1, a*lambda x: x**2')
		self.assertEqual (ast2py (p ('1, a lambda x, y: x + y')), '1, a*lambda x, y: x + y')
		self.assertEqual (ast2py (p ('1, a lambda: x, 2')), '1, a*lambda: x, 2')
		self.assertEqual (ast2py (p ('1, a lambda x: x**2, 2')), '1, a*lambda x: x**2, 2')
		self.assertEqual (ast2py (p ('1, a lambda x, y: x + y, 2')), '1, a*lambda x, y: x + y, 2')
		self.assertEqual (ast2py (p ('\\left(\\left(\\right) \\mapsto x \\right)')), '(lambda: x)')
		self.assertEqual (ast2py (p ('\\left(\\left(x \\right) \\mapsto x^2 \\right)')), '(lambda x: x**2)')
		self.assertEqual (ast2py (p ('\\left(\\left(x, y \\right) \\mapsto x + y \\right)')), '(lambda x, y: x + y)')
		self.assertEqual (ast2py (p ('eye (2).is_diagonal ()')), 'eye(2).is_diagonal()')

	def test_ast2tex2ast (self):
		self.assertEqual (ast2tex2ast (p ('1')), ('#', '1'))
		self.assertEqual (ast2tex2ast (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), ('#', '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901'))
		self.assertEqual (ast2tex2ast (p ('x')), ('@', 'x'))
		self.assertEqual (ast2tex2ast (p ('xy')), ('@', 'xy'))
		self.assertEqual (ast2tex2ast (p ('dx')), ('@', 'dx'))
		self.assertEqual (ast2tex2ast (p ('partialx')), ('@', 'partialx'))
		self.assertEqual (ast2tex2ast (p ('\\partial x')), ('@', 'partialx'))
		self.assertEqual (ast2tex2ast (p ('x d  y')), ('*', (('@', 'x'), ('@', 'd'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('x partial y')), ('*', (('@', 'x'), ('@', 'partial'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('x \\partial  y')), ('*', (('@', 'x'), ('@', 'partial'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('x dx dy y')), ('*', (('@', 'x'), ('@', 'dx'), ('@', 'dy'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('x partialx partialy y')), ('*', (('@', 'x'), ('@', 'partialx'), ('@', 'partialy'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ("x'")), ('@', 'x_prime'))
		self.assertEqual (ast2tex2ast (p ("x''")), ('@', 'x_prime_prime'))
		self.assertEqual (ast2tex2ast (p ("x'''")), ('@', 'x_prime_prime_prime'))
		self.assertEqual (ast2tex2ast (p ('-1')), ('#', '-1'))
		self.assertEqual (ast2tex2ast (p ('-x')), ('-', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('{x}')), ('@', 'x'))
		self.assertEqual (ast2tex2ast (p ('{{x}}')), ('@', 'x'))
		self.assertEqual (ast2tex2ast (p ('()')), ('(', (',', ())))
		self.assertEqual (ast2tex2ast (p ('(x)')), ('(', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('(x,)')), ('(', (',', (('@', 'x'),))))
		self.assertEqual (ast2tex2ast (p ('(x,y)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2tex2ast (p ('(x,y,)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2tex2ast (p ('[]')), ('[', ()))
		self.assertEqual (ast2tex2ast (p ('[x]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2tex2ast (p ('[x,]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2tex2ast (p ('[x,y]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('[x,y,]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('"x\\x20\\n"')), ('"', 'x \n'))
		self.assertEqual (ast2tex2ast (p ("'x\\x20\\n'")), ('"', 'x \n'))
		self.assertEqual (ast2tex2ast (p ("x''string'")), ('*', (('@', 'x_prime_prime'), ('@', 'string_prime'))))
		self.assertEqual (ast2tex2ast (p ("x' 'string'")), ('*', (('@', 'x_prime'), ('"', 'string'))))
		self.assertEqual (ast2tex2ast (p ('|x|')), ('|', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('x!')), ('!', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('x+y')), ('+', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('x-y')), ('+', (('@', 'x'), ('-', ('@', 'y')))))
		self.assertEqual (ast2tex2ast (p ('x*y')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('x y')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('x(y)')), ('*', (('@', 'x'), ('(', ('@', 'y')))))
		self.assertEqual (ast2tex2ast (p ('x/y')), ('/', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2tex2ast (p ('x^y')), ('^', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2tex2ast (p ('log x')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('log {x}')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('log (x)')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('\\log_2 x')), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('\\log_2 {x}')), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('\\log_2 (x)')), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('sqrt x')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('sqrt {x}')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('sqrt (x)')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('sqrt[3] x')), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (ast2tex2ast (p ('sqrt[3] {x}')), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (ast2tex2ast (p ('sqrt[3] (x)')), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (ast2tex2ast (p ('sin x')), ('func', 'sin', (('@', 'x'),)))
		self.assertEqual (ast2tex2ast (p ('sin^2 x')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('sin (x)')), ('func', 'sin', (('@', 'x'),)))
		self.assertEqual (ast2tex2ast (p ('sin (x)^2')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('{sin x}^2')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('sin**2 x')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('sin**-1 x')), ('func', 'asin', (('@', 'x'),)))
		self.assertEqual (ast2tex2ast (p ('acos (x)')), ('func', 'acos', (('@', 'x'),)))
		self.assertEqual (ast2tex2ast (p ('\\arccos (x)')), ('func', 'acos', (('@', 'x'),)))
		self.assertEqual (ast2tex2ast (p ('\\lim_{x\\to0} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (ast2tex2ast (p ('\\lim_{x\\to0^+} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (ast2tex2ast (p ('\\lim_{x\\to0**-} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (ast2tex2ast (p ('Limit (1/x, x, 0)')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (ast2tex2ast (p ('Limit (1/x, x, 0, "-")')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (ast2tex2ast (p ('Limit (1/x, x, 0, dir="+-")')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (ast2tex2ast (p ('\\sum_{n=0}^\\infty x^n/n!')), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', 'oo')))
		self.assertEqual (ast2tex2ast (p ('Sum (x^n/n!, (n, 0, oo))')), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', 'oo')))
		self.assertEqual (ast2tex2ast (p ('d/dx x**2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('@', 'dx'),)))
		self.assertEqual (ast2tex2ast (p ('d^2/dx^2 x^2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', 'dx'), ('#', '2')),)))
		self.assertEqual (ast2tex2ast (p ('d^3/dx^2dy x^2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', 'partialx'), ('#', '2')), ('@', 'partialy'))))
		self.assertEqual (ast2tex2ast (p ('\\partial^4 / \\partial x^2\\partial y\\partial z x^2 y**2 z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', 'partialx'), ('#', '2')), ('@', 'partialy'), ('@', 'partialz'))))
		self.assertEqual (ast2tex2ast (p ('Derivative (x^2y**2z, x, 2, y, z)')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', 'partialx'), ('#', '2')), ('@', 'partialy'), ('@', 'partialz'))))
		self.assertEqual (ast2tex2ast (p ('\\int dx')), ('intg', None, ('@', 'dx')))
		self.assertEqual (ast2tex2ast (p ('\\int x dx')), ('intg', ('@', 'x'), ('@', 'dx')))
		self.assertEqual (ast2tex2ast (p ('\\int_0^1 x dx')), ('intg', ('@', 'x'), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2tex2ast (p ('\\int_0^1 \\int y dy dx')), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2tex2ast (p ('Integral (\\int y dy, (x, 0, 1))')), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2tex2ast (p ('{1,}')), ('vec', (('#', '1'),)))
		self.assertEqual (ast2tex2ast (p ('{1,2}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2tex2ast (p ('{1,2,}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2tex2ast (p ('{{1,},}')), ('vec', (('#', '1'),)))
		self.assertEqual (ast2tex2ast (p ('{{1,},{2,}}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2tex2ast (p ('{{1,},{2,},}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2tex2ast (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), ('vec', (('#', '1'),)))
		self.assertEqual (ast2tex2ast (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), ('vec', (('#', '1'),)))
		self.assertEqual (ast2tex2ast (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), ('mat', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (ast2tex2ast (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2tex2ast (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2tex2ast (p ('-1**x')), ('-', ('^', ('#', '1'), ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('{-1}**x')), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('-{-1}**x')), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('(-1)**x')), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('-(-1)**x')), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (ast2tex2ast (p ('{1,2}!')), ('!', ('vec', (('#', '1'), ('#', '2')))))
		self.assertEqual (ast2tex2ast (p ('{{0,1},{1,0}}**x')), ('^', ('mat', ((('#', '0'), ('#', '1')), (('#', '1'), ('#', '0')))), ('@', 'x')))
		self.assertEqual (ast2tex2ast (p ('{{1,2},{3,4}}!')), ('!', ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4'))))))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.T')), ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.T.T')), ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'), 'T'))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.T.T.T')), ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'), 'T'), 'T'))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.transpose ()')), ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', ()))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', ()), 'transpose', ()))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', ()), 'transpose', ()), 'transpose', ()))
		self.assertEqual (ast2tex2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), ('.', ('.', ('.', ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', ()), 'transpose', ()), 'T'), 'T'), 'transpose', ()), 'transpose', ()))
		self.assertEqual (ast2tex2ast (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), ('*', (('mat', ((('@', 'A'), ('@', 'B')), (('@', 'C'), ('@', 'D')))), ('vec', (('@', 'x'), ('@', 'y'))))))
		self.assertEqual (ast2tex2ast (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\beta \\phi \\Sigma')), ('*', (('@', 'Theta'), ('@', 'Lambda'), ('@', 'xi'), ('@', 'Omega'), ('@', 'alpha'), ('@', 'theta'), ('@', 'Phi'), ('@', 'gamma'), ('@', 'nu'), ('@', 'delta'), ('@', 'rho'), ('@', 'lambda'), ('@', 'iota'), ('@', 'chi'), ('@', 'psi'), ('@', 'Psi'), ('@', 'Xi'), ('@', 'tau'), ('@', 'mu'), ('@', 'sigma'), ('@', 'omega'), ('@', 'kappa'), ('@', 'upsilon'), ('@', 'eta'), ('@', 'Pi'), ('@', 'epsilon'), ('@', 'Delta'), ('@', 'Upsilon'), ('@', 'beta'), ('@', 'phi'), ('@', 'Sigma'))))
		self.assertEqual (ast2tex2ast (p ('1 if 2')), ('piece', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (ast2tex2ast (p ('1 if 2 else 3')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), True))))
		self.assertEqual (ast2tex2ast (p ('1 if 2 else 3 if 4')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2tex2ast (p ('1 if 2 else 3 if 4 else 5')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), True))))
		self.assertEqual (ast2tex2ast (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\end{cases}')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), True))))
		self.assertEqual (ast2tex2ast (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\\\ \\end{cases}')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), True))))
		self.assertEqual (ast2tex2ast (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{cases}')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), ('#', '6')))))
		self.assertEqual (ast2tex2ast (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\\\ \\end{cases}')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), ('#', '6')))))
		self.assertEqual (ast2tex2ast (p ('x**y.a')), ('^', ('@', 'x'), ('.', ('@', 'y'), 'a')))
		self.assertEqual (ast2tex2ast (p ('x**y.a ()')), ('^', ('@', 'x'), ('.', ('@', 'y'), 'a', ())))
		self.assertEqual (ast2tex2ast (p ('x**y.a.b')), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a'), 'b')))
		self.assertEqual (ast2tex2ast (p ('x**y.a.b ()')), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a'), 'b', ())))
		self.assertEqual (ast2tex2ast (p ('x**y.a ().b')), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a', ()), 'b')))
		self.assertEqual (ast2tex2ast (p ('x**y.a ().b ()')), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a', ()), 'b', ())))
		self.assertEqual (ast2tex2ast (p ('{1 if x < 0 else 3} if x < 1 else 5')), ('piece', ((('piece', ((('#', '1'), ('=', '<', ('@', 'x'), ('#', '0'))), (('#', '3'), True))), ('=', '<', ('@', 'x'), ('#', '1'))), (('#', '5'), True))))
		self.assertEqual (ast2tex2ast (p ('1 if {True if x < 0 else False} else 5')), ('piece', ((('#', '1'), ('piece', ((('@', 'True'), ('=', '<', ('@', 'x'), ('#', '0'))), (('@', 'False'), True)))), (('#', '5'), True))))
		self.assertEqual (ast2tex2ast (p ('1 if {True if x < 0 else False} else {7 if x < 1 else 5}')), ('piece', ((('#', '1'), ('piece', ((('@', 'True'), ('=', '<', ('@', 'x'), ('#', '0'))), (('@', 'False'), True)))), (('piece', ((('#', '7'), ('=', '<', ('@', 'x'), ('#', '1'))), (('#', '5'), True))), True))))
		self.assertEqual (ast2tex2ast (p ('{1 if x < 0 else 9} if {True if x < 1 else False} else {7 if x < 2 else 5}')), ('piece', ((('piece', ((('#', '1'), ('=', '<', ('@', 'x'), ('#', '0'))), (('#', '9'), True))), ('piece', ((('@', 'True'), ('=', '<', ('@', 'x'), ('#', '1'))), (('@', 'False'), True)))), (('piece', ((('#', '7'), ('=', '<', ('@', 'x'), ('#', '2'))), (('#', '5'), True))), True))))
		self.assertEqual (ast2tex2ast (p ('x.y!')), ('!', ('(', ('.', ('@', 'x'), 'y'))))
		self.assertEqual (ast2tex2ast (p ('x.y**2')), ('^', ('(', ('.', ('@', 'x'), 'y')), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('x.y ()!')), ('!', ('(', ('.', ('@', 'x'), 'y', ()))))
		self.assertEqual (ast2tex2ast (p ('x.y ()**2')), ('^', ('(', ('.', ('@', 'x'), 'y', ())), ('#', '2')))
		self.assertEqual (ast2tex2ast (p ('x**y.a!')), ('^', ('@', 'x'), ('!', ('(', ('.', ('@', 'y'), 'a')))))
		self.assertEqual (ast2tex2ast (p ('x**y.a**2')), ('^', ('@', 'x'), ('^', ('(', ('.', ('@', 'y'), 'a')), ('#', '2'))))
		self.assertEqual (ast2tex2ast (p ('x**y.a ()!')), ('^', ('@', 'x'), ('!', ('(', ('.', ('@', 'y'), 'a', ())))))
		self.assertEqual (ast2tex2ast (p ('x**y.a ()**2')), ('^', ('@', 'x'), ('^', ('(', ('.', ('@', 'y'), 'a', ())), ('#', '2'))))
		self.assertEqual (ast2tex2ast (p ('lambda: x')), ('lamb', ('@', 'x'), ()))
		self.assertEqual (ast2tex2ast (p ('lambda x: x**2')), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))
		self.assertEqual (ast2tex2ast (p ('lambda x, y: x + y')), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2tex2ast (p ('a lambda: x')), ('*', (('@', 'a'), ('(', ('lamb', ('@', 'x'), ())))))
		self.assertEqual (ast2tex2ast (p ('a lambda x: x**2')), ('*', (('@', 'a'), ('(', ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),))))))
		self.assertEqual (ast2tex2ast (p ('a lambda x, y: x + y')), ('*', (('@', 'a'), ('(', ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y')))))))
		self.assertEqual (ast2tex2ast (p ('1, lambda: x')), (',', (('#', '1'), ('lamb', ('@', 'x'), ()))))
		self.assertEqual (ast2tex2ast (p ('1, lambda x: x**2')), (',', (('#', '1'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))))
		self.assertEqual (ast2tex2ast (p ('1, lambda x, y: x + y')), (',', (('#', '1'), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))))
		self.assertEqual (ast2tex2ast (p ('1, a lambda: x')), (',', (('#', '1'), ('*', (('@', 'a'), ('(', ('lamb', ('@', 'x'), ())))))))
		self.assertEqual (ast2tex2ast (p ('1, a lambda x: x**2')), (',', (('#', '1'), ('*', (('@', 'a'), ('(', ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),))))))))
		self.assertEqual (ast2tex2ast (p ('1, a lambda x, y: x + y')), (',', (('#', '1'), ('*', (('@', 'a'), ('(', ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y')))))))))
		self.assertEqual (ast2tex2ast (p ('1, a lambda: x, 2')), (',', (('#', '1'), ('*', (('@', 'a'), ('(', ('lamb', ('@', 'x'), ())))), ('#', '2'))))
		self.assertEqual (ast2tex2ast (p ('1, a lambda x: x**2, 2')), (',', (('#', '1'), ('*', (('@', 'a'), ('(', ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),))))), ('#', '2'))))
		self.assertEqual (ast2tex2ast (p ('1, a lambda x, y: x + y, 2')), (',', (('#', '1'), ('*', (('@', 'a'), ('(', ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y')))))), ('#', '2'))))
		self.assertEqual (ast2tex2ast (p ('\\left(\\left(\\right) \\mapsto x \\right)')), ('(', ('lamb', ('@', 'x'), ())))
		self.assertEqual (ast2tex2ast (p ('\\left(\\left(x \\right) \\mapsto x^2 \\right)')), ('(', ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),))))
		self.assertEqual (ast2tex2ast (p ('\\left(\\left(x, y \\right) \\mapsto x + y \\right)')), ('(', ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2tex2ast (p ('eye (2).is_diagonal ()')), ('.', ('mat', ((('#', '1'), ('#', '0')), (('#', '0'), ('#', '1')))), 'is\\_diagonal', ()))

	def test_ast2nat2ast (self):
		self.assertEqual (ast2nat2ast (p ('1')), ('#', '1'))
		self.assertEqual (ast2nat2ast (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), ('#', '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901'))
		self.assertEqual (ast2nat2ast (p ('x')), ('@', 'x'))
		self.assertEqual (ast2nat2ast (p ('xy')), ('@', 'xy'))
		self.assertEqual (ast2nat2ast (p ('dx')), ('@', 'dx'))
		self.assertEqual (ast2nat2ast (p ('partialx')), ('@', 'partialx'))
		self.assertEqual (ast2nat2ast (p ('\\partial x')), ('@', 'partialx'))
		self.assertEqual (ast2nat2ast (p ('x d  y')), ('*', (('@', 'x'), ('@', 'd'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('x partial y')), ('*', (('@', 'x'), ('@', 'partial'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('x \\partial  y')), ('*', (('@', 'x'), ('@', 'partial'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('x dx dy y')), ('*', (('@', 'x'), ('@', 'dx'), ('@', 'dy'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('x partialx partialy y')), ('*', (('@', 'x'), ('@', 'partialx'), ('@', 'partialy'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ("x'")), ('@', 'x_prime'))
		self.assertEqual (ast2nat2ast (p ("x''")), ('@', 'x_prime_prime'))
		self.assertEqual (ast2nat2ast (p ("x'''")), ('@', 'x_prime_prime_prime'))
		self.assertEqual (ast2nat2ast (p ('-1')), ('#', '-1'))
		self.assertEqual (ast2nat2ast (p ('-x')), ('-', ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('{x}')), ('@', 'x'))
		self.assertEqual (ast2nat2ast (p ('{{x}}')), ('@', 'x'))
		self.assertEqual (ast2nat2ast (p ('()')), ('(', (',', ())))
		self.assertEqual (ast2nat2ast (p ('(x)')), ('(', ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('(x,)')), ('(', (',', (('@', 'x'),))))
		self.assertEqual (ast2nat2ast (p ('(x,y)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2nat2ast (p ('(x,y,)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2nat2ast (p ('[]')), ('[', ()))
		self.assertEqual (ast2nat2ast (p ('[x]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2nat2ast (p ('[x,]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2nat2ast (p ('[x,y]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('[x,y,]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('"x\\x20\\n"')), ('"', 'x \n'))
		self.assertEqual (ast2nat2ast (p ("'x\\x20\\n'")), ('"', 'x \n'))
		self.assertEqual (ast2nat2ast (p ("x''string'")), ('*', (('@', 'x_prime_prime'), ('@', 'string_prime'))))
		self.assertEqual (ast2nat2ast (p ("x' 'string'")), ('*', (('@', 'x_prime'), ('"', 'string'))))
		self.assertEqual (ast2nat2ast (p ('|x|')), ('|', ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('x!')), ('!', ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('x+y')), ('+', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('x-y')), ('+', (('@', 'x'), ('-', ('@', 'y')))))
		self.assertEqual (ast2nat2ast (p ('x*y')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('x y')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('x(y)')), ('*', (('@', 'x'), ('(', ('@', 'y')))))
		self.assertEqual (ast2nat2ast (p ('x/y')), ('/', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2nat2ast (p ('x^y')), ('^', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2nat2ast (p ('log x')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('log {x}')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('log (x)')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('\\log_2 x')), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('\\log_2 {x}')), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('\\log_2 (x)')), ('log', ('(', ('@', 'x')), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('sqrt x')), ('sqrt', ('(', ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('sqrt {x}')), ('sqrt', ('(', ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('sqrt (x)')), ('sqrt', ('(', ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('sqrt[3] x')), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (ast2nat2ast (p ('sqrt[3] {x}')), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (ast2nat2ast (p ('sqrt[3] (x)')), ('sqrt', ('@', 'x'), ('#', '3')))
		self.assertEqual (ast2nat2ast (p ('sin x')), ('func', 'sin', (('@', 'x'),)))
		self.assertEqual (ast2nat2ast (p ('sin^2 x')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('sin (x)')), ('func', 'sin', (('@', 'x'),)))
		self.assertEqual (ast2nat2ast (p ('sin (x)^2')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('{sin x}^2')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('sin**2 x')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('sin**-1 x')), ('func', 'asin', (('@', 'x'),)))
		self.assertEqual (ast2nat2ast (p ('acos (x)')), ('func', 'acos', (('@', 'x'),)))
		self.assertEqual (ast2nat2ast (p ('\\arccos (x)')), ('func', 'acos', (('@', 'x'),)))
		self.assertEqual (ast2nat2ast (p ('\\lim_{x\\to0} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (ast2nat2ast (p ('\\lim_{x\\to0^+} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (ast2nat2ast (p ('\\lim_{x\\to0**-} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (ast2nat2ast (p ('Limit (1/x, x, 0)')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (ast2nat2ast (p ('Limit (1/x, x, 0, "-")')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (ast2nat2ast (p ('Limit (1/x, x, 0, dir="+-")')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (ast2nat2ast (p ('\\sum_{n=0}^\\infty x^n/n!')), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', 'oo')))
		self.assertEqual (ast2nat2ast (p ('Sum (x^n/n!, (n, 0, oo))')), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', 'oo')))
		self.assertEqual (ast2nat2ast (p ('d/dx x**2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('@', 'dx'),)))
		self.assertEqual (ast2nat2ast (p ('d^2/dx^2 x^2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', 'dx'), ('#', '2')),)))
		self.assertEqual (ast2nat2ast (p ('d^3/dx^2dy x^2y**2z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'))))
		self.assertEqual (ast2nat2ast (p ('\\partial^4 / \\partial x^2\\partial y\\partial z x^2 y**2 z')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', 'partialx'), ('#', '2')), ('@', 'partialy'), ('@', 'partialz'))))
		self.assertEqual (ast2nat2ast (p ('Derivative (x^2y**2z, x, 2, y, z)')), ('diff', ('(', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z')))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'), ('@', 'dz'))))
		self.assertEqual (ast2nat2ast (p ('\\int dx')), ('intg', None, ('@', 'dx')))
		self.assertEqual (ast2nat2ast (p ('\\int x dx')), ('intg', ('@', 'x'), ('@', 'dx')))
		self.assertEqual (ast2nat2ast (p ('\\int_0^1 x dx')), ('intg', ('@', 'x'), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2nat2ast (p ('\\int_0^1 \\int y dy dx')), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2nat2ast (p ('Integral (\\int y dy, (x, 0, 1))')), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2nat2ast (p ('{1,}')), ('vec', (('#', '1'),)))
		self.assertEqual (ast2nat2ast (p ('{1,2}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2nat2ast (p ('{1,2,}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2nat2ast (p ('{{1,},}')), ('vec', (('#', '1'),)))
		self.assertEqual (ast2nat2ast (p ('{{1,},{2,}}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2nat2ast (p ('{{1,},{2,},}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2nat2ast (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), ('vec', (('#', '1'),)))
		self.assertEqual (ast2nat2ast (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), ('vec', (('#', '1'),)))
		self.assertEqual (ast2nat2ast (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), ('mat', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (ast2nat2ast (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2nat2ast (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2nat2ast (p ('-1**x')), ('-', ('^', ('#', '1'), ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('{-1}**x')), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('-{-1}**x')), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('(-1)**x')), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('-(-1)**x')), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (ast2nat2ast (p ('{1,2}!')), ('!', ('vec', (('#', '1'), ('#', '2')))))
		self.assertEqual (ast2nat2ast (p ('{{0,1},{1,0}}**x')), ('^', ('mat', ((('#', '0'), ('#', '1')), (('#', '1'), ('#', '0')))), ('@', 'x')))
		self.assertEqual (ast2nat2ast (p ('{{1,2},{3,4}}!')), ('!', ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4'))))))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.T')), ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.T.T')), ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'), 'T'))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.T.T.T')), ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'T'), 'T'), 'T'))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.transpose ()')), ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', ()))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', ()), 'transpose', ()))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', ()), 'transpose', ()), 'transpose', ()))
		self.assertEqual (ast2nat2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), ('.', ('.', ('.', ('.', ('.', ('.', ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))), 'transpose', ()), 'transpose', ()), 'T'), 'T'), 'transpose', ()), 'transpose', ()))
		self.assertEqual (ast2nat2ast (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), ('*', (('mat', ((('@', 'A'), ('@', 'B')), (('@', 'C'), ('@', 'D')))), ('vec', (('@', 'x'), ('@', 'y'))))))
		self.assertEqual (ast2nat2ast (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\beta \\phi \\Sigma')), ('*', (('@', 'Theta'), ('@', 'Lambda'), ('@', 'xi'), ('@', 'Omega'), ('@', 'alpha'), ('@', 'theta'), ('@', 'Phi'), ('func', 'gamma', (('@', 'nu'),)), ('@', 'delta'), ('@', 'rho'), ('@', 'lambda'), ('@', 'iota'), ('@', 'chi'), ('@', 'psi'), ('@', 'Psi'), ('@', 'Xi'), ('@', 'tau'), ('@', 'mu'), ('@', 'sigma'), ('@', 'omega'), ('@', 'kappa'), ('@', 'upsilon'), ('@', 'eta'), ('@', 'Pi'), ('@', 'epsilon'), ('@', 'Delta'), ('@', 'Upsilon'), ('@', 'beta'), ('@', 'phi'), ('@', 'Sigma'))))
		self.assertEqual (ast2nat2ast (p ('1 if 2')), ('piece', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (ast2nat2ast (p ('1 if 2 else 3')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), True))))
		self.assertEqual (ast2nat2ast (p ('1 if 2 else 3 if 4')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2nat2ast (p ('1 if 2 else 3 if 4 else 5')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), True))))
		self.assertEqual (ast2nat2ast (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\end{cases}')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), True))))
		self.assertEqual (ast2nat2ast (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\\\ \\end{cases}')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), True))))
		self.assertEqual (ast2nat2ast (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{cases}')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), ('#', '6')))))
		self.assertEqual (ast2nat2ast (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\\\ \\end{cases}')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), ('#', '6')))))
		self.assertEqual (ast2nat2ast (p ('x**y.a')), ('^', ('@', 'x'), ('.', ('@', 'y'), 'a')))
		self.assertEqual (ast2nat2ast (p ('x**y.a ()')), ('^', ('@', 'x'), ('.', ('@', 'y'), 'a', ())))
		self.assertEqual (ast2nat2ast (p ('x**y.a.b')), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a'), 'b')))
		self.assertEqual (ast2nat2ast (p ('x**y.a.b ()')), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a'), 'b', ())))
		self.assertEqual (ast2nat2ast (p ('x**y.a ().b')), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a', ()), 'b')))
		self.assertEqual (ast2nat2ast (p ('x**y.a ().b ()')), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a', ()), 'b', ())))
		self.assertEqual (ast2nat2ast (p ('{1 if x < 0 else 3} if x < 1 else 5')), ('piece', ((('piece', ((('#', '1'), ('=', '<', ('@', 'x'), ('#', '0'))), (('#', '3'), True))), ('=', '<', ('@', 'x'), ('#', '1'))), (('#', '5'), True))))
		self.assertEqual (ast2nat2ast (p ('1 if {True if x < 0 else False} else 5')), ('piece', ((('#', '1'), ('piece', ((('@', 'True'), ('=', '<', ('@', 'x'), ('#', '0'))), (('@', 'False'), True)))), (('#', '5'), True))))
		self.assertEqual (ast2nat2ast (p ('1 if {True if x < 0 else False} else {7 if x < 1 else 5}')), ('piece', ((('#', '1'), ('piece', ((('@', 'True'), ('=', '<', ('@', 'x'), ('#', '0'))), (('@', 'False'), True)))), (('piece', ((('#', '7'), ('=', '<', ('@', 'x'), ('#', '1'))), (('#', '5'), True))), True))))
		self.assertEqual (ast2nat2ast (p ('{1 if x < 0 else 9} if {True if x < 1 else False} else {7 if x < 2 else 5}')), ('piece', ((('piece', ((('#', '1'), ('=', '<', ('@', 'x'), ('#', '0'))), (('#', '9'), True))), ('piece', ((('@', 'True'), ('=', '<', ('@', 'x'), ('#', '1'))), (('@', 'False'), True)))), (('piece', ((('#', '7'), ('=', '<', ('@', 'x'), ('#', '2'))), (('#', '5'), True))), True))))
		self.assertEqual (ast2nat2ast (p ('x.y!')), ('!', ('(', ('.', ('@', 'x'), 'y'))))
		self.assertEqual (ast2nat2ast (p ('x.y**2')), ('^', ('(', ('.', ('@', 'x'), 'y')), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('x.y ()!')), ('!', ('(', ('.', ('@', 'x'), 'y', ()))))
		self.assertEqual (ast2nat2ast (p ('x.y ()**2')), ('^', ('(', ('.', ('@', 'x'), 'y', ())), ('#', '2')))
		self.assertEqual (ast2nat2ast (p ('x**y.a!')), ('^', ('@', 'x'), ('!', ('(', ('.', ('@', 'y'), 'a')))))
		self.assertEqual (ast2nat2ast (p ('x**y.a**2')), ('^', ('@', 'x'), ('^', ('(', ('.', ('@', 'y'), 'a')), ('#', '2'))))
		self.assertEqual (ast2nat2ast (p ('x**y.a ()!')), ('^', ('@', 'x'), ('!', ('(', ('.', ('@', 'y'), 'a', ())))))
		self.assertEqual (ast2nat2ast (p ('x**y.a ()**2')), ('^', ('@', 'x'), ('^', ('(', ('.', ('@', 'y'), 'a', ())), ('#', '2'))))
		self.assertEqual (ast2nat2ast (p ('lambda: x')), ('lamb', ('@', 'x'), ()))
		self.assertEqual (ast2nat2ast (p ('lambda x: x**2')), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))
		self.assertEqual (ast2nat2ast (p ('lambda x, y: x + y')), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2nat2ast (p ('a lambda: x')), ('*', (('@', 'a'), ('(', ('lamb', ('@', 'x'), ())))))
		self.assertEqual (ast2nat2ast (p ('a lambda x: x**2')), ('*', (('@', 'a'), ('(', ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),))))))
		self.assertEqual (ast2nat2ast (p ('a lambda x, y: x + y')), ('*', (('@', 'a'), ('(', ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y')))))))
		self.assertEqual (ast2nat2ast (p ('1, lambda: x')), (',', (('#', '1'), ('lamb', ('@', 'x'), ()))))
		self.assertEqual (ast2nat2ast (p ('1, lambda x: x**2')), (',', (('#', '1'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))))
		self.assertEqual (ast2nat2ast (p ('1, lambda x, y: x + y')), (',', (('#', '1'), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))))
		self.assertEqual (ast2nat2ast (p ('1, a lambda: x')), (',', (('#', '1'), ('*', (('@', 'a'), ('(', ('lamb', ('@', 'x'), ())))))))
		self.assertEqual (ast2nat2ast (p ('1, a lambda x: x**2')), (',', (('#', '1'), ('*', (('@', 'a'), ('(', ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),))))))))
		self.assertEqual (ast2nat2ast (p ('1, a lambda x, y: x + y')), (',', (('#', '1'), ('*', (('@', 'a'), ('(', ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y')))))))))
		self.assertEqual (ast2nat2ast (p ('1, a lambda: x, 2')), (',', (('#', '1'), ('*', (('@', 'a'), ('(', ('lamb', ('@', 'x'), ())))), ('#', '2'))))
		self.assertEqual (ast2nat2ast (p ('1, a lambda x: x**2, 2')), (',', (('#', '1'), ('*', (('@', 'a'), ('(', ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),))))), ('#', '2'))))
		self.assertEqual (ast2nat2ast (p ('1, a lambda x, y: x + y, 2')), (',', (('#', '1'), ('*', (('@', 'a'), ('(', ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y')))))), ('#', '2'))))
		self.assertEqual (ast2nat2ast (p ('\\left(\\left(\\right) \\mapsto x \\right)')), ('(', ('lamb', ('@', 'x'), ())))
		self.assertEqual (ast2nat2ast (p ('\\left(\\left(x \\right) \\mapsto x^2 \\right)')), ('(', ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),))))
		self.assertEqual (ast2nat2ast (p ('\\left(\\left(x, y \\right) \\mapsto x + y \\right)')), ('(', ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2nat2ast (p ('eye (2).is_diagonal ()')), ('.', ('func', 'eye', (('#', '2'),)), 'is_diagonal', ()))

	def test_ast2py2ast (self):
		self.assertEqual (ast2py2ast (p ('1')), ('#', '1'))
		self.assertEqual (ast2py2ast (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), ('#', '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901'))
		self.assertEqual (ast2py2ast (p ('x')), ('@', 'x'))
		self.assertEqual (ast2py2ast (p ('xy')), ('@', 'xy'))
		self.assertEqual (ast2py2ast (p ('dx')), ('@', 'dx'))
		self.assertEqual (ast2py2ast (p ('partialx')), ('@', 'partialx'))
		self.assertEqual (ast2py2ast (p ('\\partial x')), ('@', 'partialx'))
		self.assertEqual (ast2py2ast (p ('x d  y')), ('*', (('@', 'x'), ('@', 'd'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('x partial y')), ('*', (('@', 'x'), ('@', 'partial'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('x \\partial  y')), ('*', (('@', 'x'), ('@', 'partial'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('x dx dy y')), ('*', (('@', 'x'), ('@', 'dx'), ('@', 'dy'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('x partialx partialy y')), ('*', (('@', 'x'), ('@', 'partialx'), ('@', 'partialy'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ("x'")), ('@', 'x_prime'))
		self.assertEqual (ast2py2ast (p ("x''")), ('@', 'x_prime_prime'))
		self.assertEqual (ast2py2ast (p ("x'''")), ('@', 'x_prime_prime_prime'))
		self.assertEqual (ast2py2ast (p ('-1')), ('#', '-1'))
		self.assertEqual (ast2py2ast (p ('-x')), ('-', ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('{x}')), ('@', 'x'))
		self.assertEqual (ast2py2ast (p ('{{x}}')), ('@', 'x'))
		self.assertEqual (ast2py2ast (p ('()')), ('(', (',', ())))
		self.assertEqual (ast2py2ast (p ('(x)')), ('(', ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('(x,)')), ('(', (',', (('@', 'x'),))))
		self.assertEqual (ast2py2ast (p ('(x,y)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2py2ast (p ('(x,y,)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2py2ast (p ('[]')), ('[', ()))
		self.assertEqual (ast2py2ast (p ('[x]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2py2ast (p ('[x,]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2py2ast (p ('[x,y]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('[x,y,]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('"x\\x20\\n"')), ('"', 'x \n'))
		self.assertEqual (ast2py2ast (p ("'x\\x20\\n'")), ('"', 'x \n'))
		self.assertEqual (ast2py2ast (p ("x''string'")), ('*', (('@', 'x_prime_prime'), ('@', 'string_prime'))))
		self.assertEqual (ast2py2ast (p ("x' 'string'")), ('*', (('@', 'x_prime'), ('"', 'string'))))
		self.assertEqual (ast2py2ast (p ('|x|')), ('|', ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('x!')), ('!', ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('x+y')), ('+', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('x-y')), ('+', (('@', 'x'), ('-', ('@', 'y')))))
		self.assertEqual (ast2py2ast (p ('x*y')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('x y')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('x(y)')), ('*', (('@', 'x'), ('(', ('@', 'y')))))
		self.assertEqual (ast2py2ast (p ('x/y')), ('/', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2py2ast (p ('x^y')), ('^', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2py2ast (p ('log x')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('log {x}')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('log (x)')), ('log', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('\\log_2 x')), ('/', ('log', ('(', ('@', 'x'))), ('log', ('(', ('#', '2')))))
		self.assertEqual (ast2py2ast (p ('\\log_2 {x}')), ('/', ('log', ('(', ('@', 'x'))), ('log', ('(', ('#', '2')))))
		self.assertEqual (ast2py2ast (p ('\\log_2 (x)')), ('/', ('log', ('(', ('@', 'x'))), ('log', ('(', ('#', '2')))))
		self.assertEqual (ast2py2ast (p ('sqrt x')), ('sqrt', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('sqrt {x}')), ('sqrt', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('sqrt (x)')), ('sqrt', ('(', ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('sqrt[3] x')), ('^', ('@', 'x'), ('(', ('/', ('#', '1'), ('#', '3')))))
		self.assertEqual (ast2py2ast (p ('sqrt[3] {x}')), ('^', ('@', 'x'), ('(', ('/', ('#', '1'), ('#', '3')))))
		self.assertEqual (ast2py2ast (p ('sqrt[3] (x)')), ('^', ('@', 'x'), ('(', ('/', ('#', '1'), ('#', '3')))))
		self.assertEqual (ast2py2ast (p ('sin x')), ('func', 'sin', (('@', 'x'),)))
		self.assertEqual (ast2py2ast (p ('sin^2 x')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2py2ast (p ('sin (x)')), ('func', 'sin', (('@', 'x'),)))
		self.assertEqual (ast2py2ast (p ('sin (x)^2')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2py2ast (p ('{sin x}^2')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2py2ast (p ('sin**2 x')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2py2ast (p ('sin**-1 x')), ('func', 'asin', (('@', 'x'),)))
		self.assertEqual (ast2py2ast (p ('acos (x)')), ('func', 'acos', (('@', 'x'),)))
		self.assertEqual (ast2py2ast (p ('\\arccos (x)')), ('func', 'acos', (('@', 'x'),)))
		self.assertEqual (ast2py2ast (p ('\\lim_{x\\to0} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (ast2py2ast (p ('\\lim_{x\\to0^+} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (ast2py2ast (p ('\\lim_{x\\to0**-} 1/x')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (ast2py2ast (p ('Limit (1/x, x, 0)')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '+'))
		self.assertEqual (ast2py2ast (p ('Limit (1/x, x, 0, "-")')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0'), '-'))
		self.assertEqual (ast2py2ast (p ('Limit (1/x, x, 0, dir="+-")')), ('lim', ('/', ('#', '1'), ('@', 'x')), ('@', 'x'), ('#', '0')))
		self.assertEqual (ast2py2ast (p ('\\sum_{n=0}^\\infty x^n/n!')), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', 'oo')))
		self.assertEqual (ast2py2ast (p ('Sum (x^n/n!, (n, 0, oo))')), ('sum', ('/', ('^', ('@', 'x'), ('@', 'n')), ('!', ('@', 'n'))), ('@', 'n'), ('#', '0'), ('@', 'oo')))
		self.assertEqual (ast2py2ast (p ('d/dx x**2y**2z')), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('@', 'dx'),)))
		self.assertEqual (ast2py2ast (p ('d^2/dx^2 x^2y**2z')), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')),)))
		self.assertEqual (ast2py2ast (p ('d^3/dx^2dy x^2y**2z')), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'))))
		self.assertEqual (ast2py2ast (p ('\\partial^4 / \\partial x^2\\partial y\\partial z x^2 y**2 z')), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'), ('@', 'dz'))))
		self.assertEqual (ast2py2ast (p ('Derivative (x^2y**2z, x, 2, y, z)')), ('diff', ('*', (('^', ('@', 'x'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')), ('@', 'z'))), (('^', ('@', 'dx'), ('#', '2')), ('@', 'dy'), ('@', 'dz'))))
		self.assertEqual (ast2py2ast (p ('\\int dx')), ('intg', ('#', '1'), ('@', 'dx')))
		self.assertEqual (ast2py2ast (p ('\\int x dx')), ('intg', ('@', 'x'), ('@', 'dx')))
		self.assertEqual (ast2py2ast (p ('\\int_0^1 x dx')), ('intg', ('@', 'x'), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2py2ast (p ('\\int_0^1 \\int y dy dx')), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2py2ast (p ('Integral (\\int y dy, (x, 0, 1))')), ('intg', ('intg', ('@', 'y'), ('@', 'dy')), ('@', 'dx'), ('#', '0'), ('#', '1')))
		self.assertEqual (ast2py2ast (p ('{1,}')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2py2ast (p ('{1,2}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2py2ast (p ('{1,2,}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2py2ast (p ('{{1,},}')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2py2ast (p ('{{1,},{2,}}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2py2ast (p ('{{1,},{2,},}')), ('mat', ((('#', '1'),), (('#', '2'),))))
		self.assertEqual (ast2py2ast (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2py2ast (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), ('mat', ((('#', '1'),),)))
		self.assertEqual (ast2py2ast (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), ('mat', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (ast2py2ast (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2py2ast (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2py2ast (p ('-1**x')), ('-', ('^', ('#', '1'), ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('{-1}**x')), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('-{-1}**x')), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('(-1)**x')), ('^', ('(', ('#', '-1')), ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('-(-1)**x')), ('-', ('^', ('(', ('#', '-1')), ('@', 'x'))))
		self.assertEqual (ast2py2ast (p ('{1,2}!')), ('!', ('mat', ((('#', '1'),), (('#', '2'),)))))
		self.assertEqual (ast2py2ast (p ('{{0,1},{1,0}}**x')), ('^', ('mat', ((('#', '0'), ('#', '1')), (('#', '1'), ('#', '0')))), ('@', 'x')))
		self.assertEqual (ast2py2ast (p ('{{1,2},{3,4}}!')), ('!', ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4'))))))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.T')), ('.', ('func', 'Matrix', (('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'T'),)), 'T'))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.T.T')), ('func', 'Matrix', (('.', ('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'T'), 'T'),)))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.T.T.T')), ('func', 'Matrix', (('.', ('.', ('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'T'), 'T'), 'T'),)))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.transpose ()')), ('.', ('func', 'Matrix', (('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'transpose'),)), 'transpose', ()))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), ('.', ('.', ('func', 'Matrix', (('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'transpose'),)), 'transpose', ()), 'transpose', ()))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), ('.', ('.', ('.', ('func', 'Matrix', (('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'transpose'),)), 'transpose', ()), 'transpose', ()), 'transpose', ()))
		self.assertEqual (ast2py2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), ('.', ('.', ('.', ('.', ('.', ('.', ('func', 'Matrix', (('.', ('(', ('[', (('[', (('#', '1'), ('#', '2'), ('#', '3'))), ('[', (('#', '4'), ('#', '5'), ('#', '6')))))), 'transpose'),)), 'transpose', ()), 'transpose', ()), 'T'), 'T'), 'transpose', ()), 'transpose', ()))
		self.assertEqual (ast2py2ast (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), ('*', (('mat', ((('@', 'A'), ('@', 'B')), (('@', 'C'), ('@', 'D')))), ('mat', ((('@', 'x'),), (('@', 'y'),))))))
		self.assertEqual (ast2py2ast (p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\beta \\phi \\Sigma')), None)
		self.assertEqual (ast2py2ast (p ('1 if 2')), ('piece', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (ast2py2ast (p ('1 if 2 else 3')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), True))))
		self.assertEqual (ast2py2ast (p ('1 if 2 else 3 if 4')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2py2ast (p ('1 if 2 else 3 if 4 else 5')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), True))))
		self.assertEqual (ast2py2ast (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\end{cases}')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), True))))
		self.assertEqual (ast2py2ast (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\\\ \\end{cases}')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), True))))
		self.assertEqual (ast2py2ast (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{cases}')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), ('#', '6')))))
		self.assertEqual (ast2py2ast (p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\\\ \\end{cases}')), ('piece', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')), (('#', '5'), ('#', '6')))))
		self.assertEqual (ast2py2ast (p ('x**y.a')), ('^', ('@', 'x'), ('.', ('@', 'y'), 'a')))
		self.assertEqual (ast2py2ast (p ('x**y.a ()')), ('^', ('@', 'x'), ('.', ('@', 'y'), 'a', ())))
		self.assertEqual (ast2py2ast (p ('x**y.a.b')), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a'), 'b')))
		self.assertEqual (ast2py2ast (p ('x**y.a.b ()')), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a'), 'b', ())))
		self.assertEqual (ast2py2ast (p ('x**y.a ().b')), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a', ()), 'b')))
		self.assertEqual (ast2py2ast (p ('x**y.a ().b ()')), ('^', ('@', 'x'), ('.', ('.', ('@', 'y'), 'a', ()), 'b', ())))
		self.assertEqual (ast2py2ast (p ('{1 if x < 0 else 3} if x < 1 else 5')), ('piece', ((('piece', ((('#', '1'), ('=', '<', ('@', 'x'), ('#', '0'))), (('#', '3'), True))), ('=', '<', ('@', 'x'), ('#', '1'))), (('#', '5'), True))))
		self.assertEqual (ast2py2ast (p ('1 if {True if x < 0 else False} else 5')), ('piece', ((('#', '1'), ('piece', ((('@', 'True'), ('=', '<', ('@', 'x'), ('#', '0'))), (('@', 'False'), True)))), (('#', '5'), True))))
		self.assertEqual (ast2py2ast (p ('1 if {True if x < 0 else False} else {7 if x < 1 else 5}')), ('piece', ((('#', '1'), ('piece', ((('@', 'True'), ('=', '<', ('@', 'x'), ('#', '0'))), (('@', 'False'), True)))), (('piece', ((('#', '7'), ('=', '<', ('@', 'x'), ('#', '1'))), (('#', '5'), True))), True))))
		self.assertEqual (ast2py2ast (p ('{1 if x < 0 else 9} if {True if x < 1 else False} else {7 if x < 2 else 5}')), ('piece', ((('piece', ((('#', '1'), ('=', '<', ('@', 'x'), ('#', '0'))), (('#', '9'), True))), ('piece', ((('@', 'True'), ('=', '<', ('@', 'x'), ('#', '1'))), (('@', 'False'), True)))), (('piece', ((('#', '7'), ('=', '<', ('@', 'x'), ('#', '2'))), (('#', '5'), True))), True))))
		self.assertEqual (ast2py2ast (p ('x.y!')), ('!', ('.', ('@', 'x'), 'y')))
		self.assertEqual (ast2py2ast (p ('x.y**2')), ('^', ('.', ('@', 'x'), 'y'), ('#', '2')))
		self.assertEqual (ast2py2ast (p ('x.y ()!')), ('!', ('.', ('@', 'x'), 'y', ())))
		self.assertEqual (ast2py2ast (p ('x.y ()**2')), ('^', ('.', ('@', 'x'), 'y', ()), ('#', '2')))
		self.assertEqual (ast2py2ast (p ('x**y.a!')), ('^', ('@', 'x'), ('!', ('.', ('@', 'y'), 'a'))))
		self.assertEqual (ast2py2ast (p ('x**y.a**2')), ('^', ('@', 'x'), ('^', ('.', ('@', 'y'), 'a'), ('#', '2'))))
		self.assertEqual (ast2py2ast (p ('x**y.a ()!')), ('^', ('@', 'x'), ('!', ('.', ('@', 'y'), 'a', ()))))
		self.assertEqual (ast2py2ast (p ('x**y.a ()**2')), ('^', ('@', 'x'), ('^', ('.', ('@', 'y'), 'a', ()), ('#', '2'))))
		self.assertEqual (ast2py2ast (p ('lambda: x')), ('lamb', ('@', 'x'), ()))
		self.assertEqual (ast2py2ast (p ('lambda x: x**2')), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))
		self.assertEqual (ast2py2ast (p ('lambda x, y: x + y')), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2py2ast (p ('a lambda: x')), ('*', (('@', 'a'), ('lamb', ('@', 'x'), ()))))
		self.assertEqual (ast2py2ast (p ('a lambda x: x**2')), ('*', (('@', 'a'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))))
		self.assertEqual (ast2py2ast (p ('a lambda x, y: x + y')), ('*', (('@', 'a'), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))))
		self.assertEqual (ast2py2ast (p ('1, lambda: x')), (',', (('#', '1'), ('lamb', ('@', 'x'), ()))))
		self.assertEqual (ast2py2ast (p ('1, lambda x: x**2')), (',', (('#', '1'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))))
		self.assertEqual (ast2py2ast (p ('1, lambda x, y: x + y')), (',', (('#', '1'), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))))
		self.assertEqual (ast2py2ast (p ('1, a lambda: x')), (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('@', 'x'), ()))))))
		self.assertEqual (ast2py2ast (p ('1, a lambda x: x**2')), (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))))))
		self.assertEqual (ast2py2ast (p ('1, a lambda x, y: x + y')), (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))))))
		self.assertEqual (ast2py2ast (p ('1, a lambda: x, 2')), (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('@', 'x'), ()))), ('#', '2'))))
		self.assertEqual (ast2py2ast (p ('1, a lambda x: x**2, 2')), (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))), ('#', '2'))))
		self.assertEqual (ast2py2ast (p ('1, a lambda x, y: x + y, 2')), (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y'))))), ('#', '2'))))
		self.assertEqual (ast2py2ast (p ('\\left(\\left(\\right) \\mapsto x \\right)')), ('(', ('lamb', ('@', 'x'), ())))
		self.assertEqual (ast2py2ast (p ('\\left(\\left(x \\right) \\mapsto x^2 \\right)')), ('(', ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),))))
		self.assertEqual (ast2py2ast (p ('\\left(\\left(x, y \\right) \\mapsto x + y \\right)')), ('(', ('lamb', ('+', (('@', 'x'), ('@', 'y'))), (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2py2ast (p ('eye (2).is_diagonal ()')), ('.', ('func', 'eye', (('#', '2'),)), 'is_diagonal', ()))

	def test_ast2spt2ast (self):
		self.assertEqual (ast2spt2ast (p ('1')), ('#', '1'))
		self.assertEqual (ast2spt2ast (p ('-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901')), ('#', '-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901'))
		self.assertEqual (ast2spt2ast (p ('x')), ('@', 'x'))
		self.assertEqual (ast2spt2ast (p ('xy')), ('@', 'xy'))
		self.assertEqual (ast2spt2ast (p ('dx')), ('@', 'dx'))
		self.assertEqual (ast2spt2ast (p ('partialx')), ('@', 'partialx'))
		self.assertEqual (ast2spt2ast (p ('\\partial x')), ('@', 'partialx'))
		self.assertEqual (ast2spt2ast (p ('x d  y')), ('*', (('@', 'd'), ('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('x partial y')), ('*', (('@', 'partial'), ('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('x \\partial  y')), ('*', (('@', 'partial'), ('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('x dx dy y')), ('*', (('@', 'dx'), ('@', 'dy'), ('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('x partialx partialy y')), ('*', (('@', 'partialx'), ('@', 'partialy'), ('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ("x'")), ('@', 'x_prime'))
		self.assertEqual (ast2spt2ast (p ("x''")), ('@', 'x_prime_prime'))
		self.assertEqual (ast2spt2ast (p ("x'''")), ('@', 'x_prime_prime_prime'))
		self.assertEqual (ast2spt2ast (p ('-1')), ('#', '-1'))
		self.assertEqual (ast2spt2ast (p ('-x')), ('-', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('{x}')), ('@', 'x'))
		self.assertEqual (ast2spt2ast (p ('{{x}}')), ('@', 'x'))
		self.assertEqual (ast2spt2ast (p ('()')), ('(', (',', ())))
		self.assertEqual (ast2spt2ast (p ('(x)')), ('@', 'x'))
		self.assertEqual (ast2spt2ast (p ('(x,)')), ('(', (',', (('@', 'x'),))))
		self.assertEqual (ast2spt2ast (p ('(x,y)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2spt2ast (p ('(x,y,)')), ('(', (',', (('@', 'x'), ('@', 'y')))))
		self.assertEqual (ast2spt2ast (p ('[]')), ('[', ()))
		self.assertEqual (ast2spt2ast (p ('[x]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2spt2ast (p ('[x,]')), ('[', (('@', 'x'),)))
		self.assertEqual (ast2spt2ast (p ('[x,y]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('[x,y,]')), ('[', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('"x\\x20\\n"')), ('"', 'x \n'))
		self.assertEqual (ast2spt2ast (p ("'x\\x20\\n'")), ('"', 'x \n'))
		self.assertEqual (ast2spt2ast (p ("x''string'")), ('*', (('@', 'string_prime'), ('@', 'x_prime_prime'))))
		self.assertRaises (SympifyError, ast2spt2ast, p ("x' 'string'"))
		self.assertEqual (ast2spt2ast (p ('|x|')), ('|', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('x!')), ('!', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('x+y')), ('+', (('@', 'y'), ('@', 'x'))))
		self.assertEqual (ast2spt2ast (p ('x-y')), ('+', (('-', ('@', 'y')), ('@', 'x'))))
		self.assertEqual (ast2spt2ast (p ('x*y')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('x y')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('x(y)')), ('*', (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('x/y')), ('/', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2spt2ast (p ('x^y')), ('^', ('@', 'x'), ('@', 'y')))
		self.assertEqual (ast2spt2ast (p ('log x')), ('log', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('log {x}')), ('log', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('log (x)')), ('log', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('\\log_2 x')), ('/', ('log', ('@', 'x')), ('log', ('#', '2'))))
		self.assertEqual (ast2spt2ast (p ('\\log_2 {x}')), ('/', ('log', ('@', 'x')), ('log', ('#', '2'))))
		self.assertEqual (ast2spt2ast (p ('\\log_2 (x)')), ('/', ('log', ('@', 'x')), ('log', ('#', '2'))))
		self.assertEqual (ast2spt2ast (p ('sqrt x')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('sqrt {x}')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('sqrt (x)')), ('sqrt', ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('sqrt[3] x')), ('^', ('@', 'x'), ('/', ('#', '1'), ('#', '3'))))
		self.assertEqual (ast2spt2ast (p ('sqrt[3] {x}')), ('^', ('@', 'x'), ('/', ('#', '1'), ('#', '3'))))
		self.assertEqual (ast2spt2ast (p ('sqrt[3] (x)')), ('^', ('@', 'x'), ('/', ('#', '1'), ('#', '3'))))
		self.assertEqual (ast2spt2ast (p ('sin x')), ('func', 'sin', (('@', 'x'),)))
		self.assertEqual (ast2spt2ast (p ('sin^2 x')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2spt2ast (p ('sin (x)')), ('func', 'sin', (('@', 'x'),)))
		self.assertEqual (ast2spt2ast (p ('sin (x)^2')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2spt2ast (p ('{sin x}^2')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2spt2ast (p ('sin**2 x')), ('^', ('func', 'sin', (('@', 'x'),)), ('#', '2')))
		self.assertEqual (ast2spt2ast (p ('sin**-1 x')), ('func', 'asin', (('@', 'x'),)))
		self.assertEqual (ast2spt2ast (p ('acos (x)')), ('func', 'acos', (('@', 'x'),)))
		self.assertEqual (ast2spt2ast (p ('\\arccos (x)')), ('func', 'acos', (('@', 'x'),)))
		self.assertRaises (ValueError, ast2spt2ast, p ('\\lim_{x\\to0} 1/x'))
		self.assertEqual (ast2spt2ast (p ('\\lim_{x\\to0^+} 1/x')), ('@', 'oo'))
		self.assertEqual (ast2spt2ast (p ('\\lim_{x\\to0**-} 1/x')), ('-', ('@', 'oo')))
		self.assertEqual (ast2spt2ast (p ('Limit (1/x, x, 0)')), ('@', 'oo'))
		self.assertEqual (ast2spt2ast (p ('Limit (1/x, x, 0, "-")')), ('-', ('@', 'oo')))
		self.assertRaises (ValueError, ast2spt2ast, p ('Limit (1/x, x, 0, dir="+-")'))
		self.assertEqual (ast2spt2ast (p ('\\sum_{n=0}^\\infty x^n/n!')), ('^', ('@', 'e'), ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('Sum (x^n/n!, (n, 0, oo))')), ('^', ('@', 'e'), ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('d/dx x**2y**2z')), ('*', (('#', '2'), ('@', 'x'), ('@', 'z'), ('^', ('@', 'y'), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('d^2/dx^2 x^2y**2z')), ('*', (('#', '2'), ('@', 'z'), ('^', ('@', 'y'), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('d^3/dx^2dy x^2y**2z')), ('*', (('#', '4'), ('@', 'y'), ('@', 'z'))))
		self.assertEqual (ast2spt2ast (p ('\\partial^4 / \\partial x^2\\partial y\\partial z x^2 y**2 z')), ('*', (('#', '4'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('Derivative (x^2y**2z, x, 2, y, z)')), ('*', (('#', '4'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('\\int dx')), ('@', 'x'))
		self.assertEqual (ast2spt2ast (p ('\\int x dx')), ('*', (('/', ('#', '1'), ('#', '2')), ('^', ('@', 'x'), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('\\int_0^1 x dx')), ('/', ('#', '1'), ('#', '2')))
		self.assertEqual (ast2spt2ast (p ('\\int_0^1 \\int y dy dx')), ('*', (('/', ('#', '1'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('Integral (\\int y dy, (x, 0, 1))')), ('*', (('/', ('#', '1'), ('#', '2')), ('^', ('@', 'y'), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('{1,}')), ('#', '1'))
		self.assertEqual (ast2spt2ast (p ('{1,2}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2spt2ast (p ('{1,2,}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2spt2ast (p ('{{1,},}')), ('#', '1'))
		self.assertEqual (ast2spt2ast (p ('{{1,},{2,}}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2spt2ast (p ('{{1,},{2,},}')), ('vec', (('#', '1'), ('#', '2'))))
		self.assertEqual (ast2spt2ast (p ('\\left[\\begin{matrix} 1 \\end{matrix}\\right]')), ('#', '1'))
		self.assertEqual (ast2spt2ast (p ('\\begin{bmatrix} 1 \\\\ \\end{bmatrix}')), ('#', '1'))
		self.assertEqual (ast2spt2ast (p ('\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}')), ('mat', ((('#', '1'), ('#', '2')),)))
		self.assertEqual (ast2spt2ast (p ('\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2spt2ast (p ('\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}')), ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4')))))
		self.assertEqual (ast2spt2ast (p ('-1**x')), ('#', '-1'))
		self.assertEqual (ast2spt2ast (p ('{-1}**x')), ('^', ('#', '-1'), ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('-{-1}**x')), ('-', ('^', ('#', '-1'), ('@', 'x'))))
		self.assertEqual (ast2spt2ast (p ('(-1)**x')), ('^', ('#', '-1'), ('@', 'x')))
		self.assertEqual (ast2spt2ast (p ('-(-1)**x')), ('-', ('^', ('#', '-1'), ('@', 'x'))))
		self.assertEqual (ast2spt2ast (p ('{1,2}!')), ('!', ('vec', (('#', '1'), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('{{0,1},{1,0}}**x')), ('mat', ((('+', (('*', (('/', ('#', '1'), ('#', '2')), ('^', ('#', '-1'), ('@', 'x')))), ('/', ('#', '1'), ('#', '2')))), ('+', (('*', (('-', ('/', ('#', '1'), ('#', '2'))), ('^', ('#', '-1'), ('@', 'x')))), ('/', ('#', '1'), ('#', '2'))))), (('+', (('*', (('-', ('/', ('#', '1'), ('#', '2'))), ('^', ('#', '-1'), ('@', 'x')))), ('/', ('#', '1'), ('#', '2')))), ('+', (('*', (('/', ('#', '1'), ('#', '2')), ('^', ('#', '-1'), ('@', 'x')))), ('/', ('#', '1'), ('#', '2'))))))))
		self.assertEqual (ast2spt2ast (p ('{{1,2},{3,4}}!')), ('!', ('mat', ((('#', '1'), ('#', '2')), (('#', '3'), ('#', '4'))))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.T')), ('mat', ((('#', '1'), ('#', '4')), (('#', '2'), ('#', '5')), (('#', '3'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.T.T')), ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.T.T.T')), ('mat', ((('#', '1'), ('#', '4')), (('#', '2'), ('#', '5')), (('#', '3'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.transpose ()')), ('mat', ((('#', '1'), ('#', '4')), (('#', '2'), ('#', '5')), (('#', '3'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ()')), ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()')), ('mat', ((('#', '1'), ('#', '4')), (('#', '2'), ('#', '5')), (('#', '3'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()')), ('mat', ((('#', '1'), ('#', '2'), ('#', '3')), (('#', '4'), ('#', '5'), ('#', '6')))))
		self.assertEqual (ast2spt2ast (p ('\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}')), ('vec', (('+', (('*', (('@', 'B'), ('@', 'y'))), ('*', (('@', 'A'), ('@', 'x'))))), ('+', (('*', (('@', 'D'), ('@', 'y'))), ('*', (('@', 'C'), ('@', 'x'))))))))
		self.assertRaises (TypeError, ast2spt2ast, p ('\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\beta \\phi \\Sigma'))
		self.assertRaises (TypeError, ast2spt2ast, p ('1 if 2'))
		self.assertRaises (TypeError, ast2spt2ast, p ('1 if 2 else 3'))
		self.assertRaises (TypeError, ast2spt2ast, p ('1 if 2 else 3 if 4'))
		self.assertRaises (TypeError, ast2spt2ast, p ('1 if 2 else 3 if 4 else 5'))
		self.assertRaises (TypeError, ast2spt2ast, p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\end{cases}'))
		self.assertRaises (TypeError, ast2spt2ast, p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\\\ \\end{cases}'))
		self.assertRaises (TypeError, ast2spt2ast, p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{cases}'))
		self.assertRaises (TypeError, ast2spt2ast, p ('\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\\\ \\end{cases}'))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x**y.a'))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x**y.a ()'))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x**y.a.b'))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x**y.a.b ()'))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x**y.a ().b'))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x**y.a ().b ()'))
		self.assertEqual (ast2spt2ast (p ('{1 if x < 0 else 3} if x < 1 else 5')), ('piece', ((('#', '1'), ('=', '<', ('@', 'x'), ('#', '0'))), (('#', '3'), ('=', '<', ('@', 'x'), ('#', '1'))), (('#', '5'), True))))
		self.assertEqual (ast2spt2ast (p ('1 if {True if x < 0 else False} else 5')), ('piece', ((('#', '1'), ('=', '<', ('@', 'x'), ('#', '0'))), (('#', '5'), True))))
		self.assertEqual (ast2spt2ast (p ('1 if {True if x < 0 else False} else {7 if x < 1 else 5}')), ('piece', ((('#', '1'), ('=', '<', ('@', 'x'), ('#', '0'))), (('#', '7'), ('=', '<', ('@', 'x'), ('#', '1'))), (('#', '5'), True))))
		self.assertEqual (ast2spt2ast (p ('{1 if x < 0 else 9} if {True if x < 1 else False} else {7 if x < 2 else 5}')), ('piece', ((('#', '1'), ('=', '<', ('@', 'x'), ('#', '0'))), (('#', '9'), ('=', '<', ('@', 'x'), ('#', '1'))), (('#', '7'), ('=', '<', ('@', 'x'), ('#', '2'))), (('#', '5'), True))))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x.y!'))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x.y**2'))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x.y ()!'))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x.y ()**2'))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x**y.a!'))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x**y.a**2'))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x**y.a ()!'))
		self.assertRaises (AttributeError, ast2spt2ast, p ('x**y.a ()**2'))
		self.assertEqual (ast2spt2ast (p ('lambda: x')), ('lamb', ('@', 'x'), ()))
		self.assertEqual (ast2spt2ast (p ('lambda x: x**2')), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))
		self.assertEqual (ast2spt2ast (p ('lambda x, y: x + y')), ('lamb', ('+', (('@', 'y'), ('@', 'x'))), (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('a lambda: x')), ('*', (('@', 'a'), ('lamb', ('@', 'x'), ()))))
		self.assertEqual (ast2spt2ast (p ('a lambda x: x**2')), ('*', (('@', 'a'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))))
		self.assertEqual (ast2spt2ast (p ('a lambda x, y: x + y')), ('*', (('@', 'a'), ('lamb', ('+', (('@', 'y'), ('@', 'x'))), (('@', 'x'), ('@', 'y'))))))
		self.assertEqual (ast2spt2ast (p ('1, lambda: x')), ('(', (',', (('#', '1'), ('lamb', ('@', 'x'), ())))))
		self.assertEqual (ast2spt2ast (p ('1, lambda x: x**2')), ('(', (',', (('#', '1'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),))))))
		self.assertEqual (ast2spt2ast (p ('1, lambda x, y: x + y')), ('(', (',', (('#', '1'), ('lamb', ('+', (('@', 'y'), ('@', 'x'))), (('@', 'x'), ('@', 'y')))))))
		self.assertEqual (ast2spt2ast (p ('1, a lambda: x')), ('(', (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('@', 'x'), ())))))))
		self.assertEqual (ast2spt2ast (p ('1, a lambda x: x**2')), ('(', (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),))))))))
		self.assertEqual (ast2spt2ast (p ('1, a lambda x, y: x + y')), ('(', (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('+', (('@', 'y'), ('@', 'x'))), (('@', 'x'), ('@', 'y')))))))))
		self.assertEqual (ast2spt2ast (p ('1, a lambda: x, 2')), ('(', (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('@', 'x'), ()))), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('1, a lambda x: x**2, 2')), ('(', (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('1, a lambda x, y: x + y, 2')), ('(', (',', (('#', '1'), ('*', (('@', 'a'), ('lamb', ('+', (('@', 'y'), ('@', 'x'))), (('@', 'x'), ('@', 'y'))))), ('#', '2')))))
		self.assertEqual (ast2spt2ast (p ('\\left(\\left(\\right) \\mapsto x \\right)')), ('lamb', ('@', 'x'), ()))
		self.assertEqual (ast2spt2ast (p ('\\left(\\left(x \\right) \\mapsto x^2 \\right)')), ('lamb', ('^', ('@', 'x'), ('#', '2')), (('@', 'x'),)))
		self.assertEqual (ast2spt2ast (p ('\\left(\\left(x, y \\right) \\mapsto x + y \\right)')), ('lamb', ('+', (('@', 'y'), ('@', 'x'))), (('@', 'x'), ('@', 'y'))))
		self.assertEqual (ast2spt2ast (p ('eye (2).is_diagonal ()')), ('@', 'True'))

_EXPRESSIONS = """
1
-1.23456789012345678901234567890123456789012345678901234567890123456789012345678901
x
xy
dx
partialx
\\partial x
x d  y
x partial y
x \\partial  y
x dx dy y
x partialx partialy y
x'
x''
x'''
-1
-x
{x}
{{x}}
()
(x)
(x,)
(x,y)
(x,y,)
[]
[x]
[x,]
[x,y]
[x,y,]
"x\\x20\\n"
'x\\x20\\n'
x''string'
x' 'string'
|x|
x!
x+y
x-y
x*y
x y
x(y)
x/y
x^y
log x
log {x}
log (x)
\\log_2 x
\\log_2 {x}
\\log_2 (x)
sqrt x
sqrt {x}
sqrt (x)
sqrt[3] x
sqrt[3] {x}
sqrt[3] (x)
sin x
sin^2 x
sin (x)
sin (x)^2
{sin x}^2
sin**2 x
sin**-1 x
acos (x)
\\arccos (x)
\\lim_{x\\to0} 1/x
\\lim_{x\\to0^+} 1/x
\\lim_{x\\to0**-} 1/x
Limit (1/x, x, 0)
Limit (1/x, x, 0, "-")
Limit (1/x, x, 0, dir="+-")
\\sum_{n=0}^\\infty x^n/n!
Sum (x^n/n!, (n, 0, oo))
d/dx x**2y**2z
d^2/dx^2 x^2y**2z
d^3/dx^2dy x^2y**2z
\\partial^4 / \\partial x^2\\partial y\\partial z x^2 y**2 z
Derivative (x^2y**2z, x, 2, y, z)
\\int dx
\\int x dx
\\int_0^1 x dx
\\int_0^1 \\int y dy dx
Integral (\\int y dy, (x, 0, 1))
{1,}
{1,2}
{1,2,}
{{1,},}
{{1,},{2,}}
{{1,},{2,},}
\\left[\\begin{matrix} 1 \\end{matrix}\\right]
\\begin{bmatrix} 1 \\\\ \\end{bmatrix}
\\begin{vmatrix} 1 & 2 \\\\ \\end{vmatrix}
\\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}
\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\\\ \\end{matrix}
-1**x
{-1}**x
-{-1}**x
(-1)**x
-(-1)**x
{1,2}!
{{0,1},{1,0}}**x
{{1,2},{3,4}}!
{{1,2,3},{4,5,6}}.T
{{1,2,3},{4,5,6}}.T.T
{{1,2,3},{4,5,6}}.T.T.T
{{1,2,3},{4,5,6}}.transpose ()
{{1,2,3},{4,5,6}}.transpose ().transpose ()
{{1,2,3},{4,5,6}}.transpose ().transpose ().transpose ()
{{1,2,3},{4,5,6}}.transpose ().transpose ().T.T.transpose ().transpose ()
\\begin{matrix} A & B \\\\ C & D \\end{matrix} * {x, y}
\\Theta \\Lambda \\xi \\Omega \\alpha \\theta \\Phi \\gamma \\nu \\delta \\rho \\lambda \\iota \\chi \\psi \\Psi \\Xi \\tau \\mu \\sigma \\omega \\kappa \\upsilon \\eta \\Pi \\epsilon \\Delta \\Upsilon \\beta \\phi \\Sigma
1 if 2
1 if 2 else 3
1 if 2 else 3 if 4
1 if 2 else 3 if 4 else 5
\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\end{cases}
\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & \\\\ \\end{cases}
\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{cases}
\\begin{cases} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\\\ \\end{cases}
x**y.a
x**y.a ()
x**y.a.b
x**y.a.b ()
x**y.a ().b
x**y.a ().b ()
{1 if x < 0 else 3} if x < 1 else 5
1 if {True if x < 0 else False} else 5
1 if {True if x < 0 else False} else {7 if x < 1 else 5}
{1 if x < 0 else 9} if {True if x < 1 else False} else {7 if x < 2 else 5}
x.y!
x.y**2
x.y ()!
x.y ()**2
x**y.a!
x**y.a**2
x**y.a ()!
x**y.a ()**2
lambda: x
lambda x: x**2
lambda x, y: x + y
a lambda: x
a lambda x: x**2
a lambda x, y: x + y
1, lambda: x
1, lambda x: x**2
1, lambda x, y: x + y
1, a lambda: x
1, a lambda x: x**2
1, a lambda x, y: x + y
1, a lambda: x, 2
1, a lambda x: x**2, 2
1, a lambda x, y: x + y, 2
\\left(\\left(\\right) \\mapsto x \\right)
\\left(\\left(x \\right) \\mapsto x^2 \\right)
\\left(\\left(x, y \\right) \\mapsto x + y \\right)
eye (2).is_diagonal ()
"""

if __name__ == '__main__':
	import os.path
	import subprocess
	import sys

	if len (sys.argv) == 1:
		subprocess.run ([sys.executable, '-m', 'unittest', '-v', os.path.basename (sys.argv [0])])
		sys.exit (0)

	elif sys.argv [1] == '--print':
		exprs = [s.strip () for s in _EXPRESSIONS.strip ().split ('\n')]

		for func in (sparser, ast2tex, ast2nat, ast2py, ast2tex2ast, ast2nat2ast, ast2py2ast, ast2spt2ast):
			print ()
			print (f'\tdef test_{func.__name__} (self):')

			for expr in exprs:
				try:
					if func == sparser:
						print (f'\t\tself.assertEqual (p ({expr!r}),', repr (p (expr)).replace ('\n', '') + ')')
					else:
						print (f'\t\tself.assertEqual ({func.__name__} (p ({expr!r})),', repr (func (p (expr))).replace ('\n', '') + ')')

				except Exception as e:
					print (f'\t\tself.assertRaises ({e.__class__.__name__}, {func.__name__}, p ({expr!r}))')

# \Theta \Lambda \xi \Omega \alpha \theta \Phi \gamma \nu \Gamma \delta \rho \lambda \iota \chi \psi \Psi \Xi \tau \mu \sigma \omega \kappa \upsilon \eta \Pi \epsilon \Delta \Upsilon \zeta \beta \phi \Sigma

# \sqrt[{{1} / {1.0}}]{({oo},{partial})}
# sqrt{{-1.0}**{0}}
# {{\frac{1.0}{dx}} \cdot {{partial} / {partialx}} \cdot {{d} >= {oo}}}
# \frac{{partial}**{1}}{{{partialx}*{dx}*{1.0}}}
# {{\frac{1.0}{partialx}} \cdot {\exp({0},{a})} \cdot {{{d}+{oo}}}}
# {\arcsin({-1.0},{dx},{oo})}^{{d} <= {-1}}
# @({{d}**{1}},{\arcsech({partial},{partial})})
# Limit ({d} > {-1.0}, x, {{1.0}*{partial}*{dx}})
# {{d}^{1}} / {{{dx}  {oo}}}
# {{{d}*{1}}} / {d^{5} / dy^{1} dy^{2} dz^{2} {oo}}
# {{{0}!} \cdot {partial^{1} / partialx^{1} {dx}} \cdot {{d}**{d}}}
# {{partial^{4} / partialy^{3} partialy^{1} {a}} \cdot {{'str'}^{d}}}
# {\int {-1} dx} / {\int {1} dx}
# {\int_{dx}^{a'} {-1} dx}!
# \int {partial^{3} / partialy^{3} {a'}} dx
# {{\int {partial} dx}  {partial^{4} / partialy^{1} partialz^{1} partialz^{2} {a}}}
# \int_{[{-1.0}]}^{\int {partialx} dx} {{{oo}+{-1}}} dx
# \int_{partial^{6} / partialy^{2} partialx^{2} partialz^{2} {partialx}}^{partial^{4} / partialz^{1} partialz^{2} partialx^{1} {0}} {{a} != {'str'}} dx
# {{{oo}**{'str'}}+{\int {oo} dx}+{partial^{7} / partialz^{3} partialx^{2} partialx^{2} {0}}}
# [{{{-1} \cdot {oo}}},{{{dx},{1.0},{oo}}},{partial^{8} / partialx^{3} partialx^{2} partialz^{3} {oo}}]
# -{lambda x, y, z: {dx}}
# ('-', ('lamb', ('@', 'dx'), (('@', 'x'), ('@', 'y'), ('@', 'z'))))
# {{lambda x, y, z: {1}}+{{1.0} > {1.0}}+{{oo} / {'str'}}}
# {{lambda: {-1}} \cdot {\frac{partialx}{oo}} \cdot {{1.0} if {1} else {a'} if {0}}}
# {{{a'} / {-1}} {\lim_{x \to partial} {-1}} {lambda x, y, z: {partialx}}}
# {{{{d}*{0}}}+{{'str'}**{d}}+{lambda x, y: {partialx}}}
# \int_{\sqrt[{a}]{1.0}}^{[]} {lambda x: {partialx}} dx
# lambda x: {{dx} = {dx}}
# {{\lim_{x \to {{oo},}} {\frac{d}{d}}}  {{{{{partialx} \cdot {a'}}} \cdot {{{a'}*{'str'}}}}}}
# \int {{{{a} / {dx}}  {partial^{2} / partialz^{2} {partialx}}}} dx
# \int \frac{d}{dx} x dx
# \int d / dx x dx
# \int_{{partial^{4} / partialx^{1} partialy^{3} {partial}}**{\sqrt[{oo}]{0}}}^{{{{-1} == {0}}*{({partial},{'str'},{a'})}*{{1} / {1}}}} {-{partial^{6} / partialy^{3} partialx^{3} {0}}} dx
# \int {-{partial^{6} / partialy^{3} partialx^{3} {0}}} dx
# \lim_{x \to \frac{lambda x, y, z: {-{0}}}{partial^{5} / partialz^{2} partialz^{1} partialx^{2} {Limit (a', x, 1)}}} {\arctan()}
# {{{|{{0}**{1.0}}|} / {lambda x, y: {\int_{a'}^{a'} {0} dx}}},{\int_{\sqrt{()}}^{lambda x, y, z: {Sum (partial, (x, a, partial))}} {lambda x, y: {{{1}*{a'}}}} dx},}
# -{{{{{{partialx},{partial},{oo},},{{dx},{-1.0},{a},},}}**{StrictGreaterThan({1.0})}} > {partial^{4} / partialz^{1} partialx^{2} partialy^{1} {{1.0}^{1}}}}
# -{{{{{\sum_{x = 0}^{-1.0} {oo}} \cdot {({0})}}},}}
# \int {{{{d}+{partialx}+{1}}} if {lambda x, y, z: {a}} else {{1} / {partialx}}} dx
# |{\log_{partial^{1} / partialy^{1} {{{0}*{'str'}}}}{[{{-1.0} / {'str'}}]}}|
# |{Limit ({\frac{1}{-1.0}}!, x, ({{{{-1.0},},{{1},},}},{{{'str'} \cdot {1} \cdot {dx}}},{-{1}}))}|
# ('|', ('lim', ('!', ('/', ('#', '1'), ('#', '-1.0'))), ('@', 'x'), ('(', (',', (('vec', (('#', '-1.0'), ('#', '1'))), ('*', (('"', 'str'), ('#', '1'), ('@', 'dx'))), ('-', ('#', '1'))))), '+'))
# {\lim_{x \to -1.0} {dx}} > {{oo} if {-1.0} else {d} if {d} else {1}}
# \frac{{-1.0} > {oo}}{\ln{-1.0}}
# {{{{{{0},},}},{|{d}|},},{{({1.0},{1})},{[{oo}]},},}
# 1/2 * {a+b} lambda: {d}
# {{{'str'} < {1.0}} \cdot {({a'})} \cdot {{1} if {a'}}}
# -{1.0 if partial else d if 1 else oo if 1.0 else 'str'}
# {partial^{5} / partialy^{2} partialy^{2} partialy^{1} {partial}}^{{-1.0} > {d}}
# {lambda x: {a}} if {{{'str'}*{a}*{1}}}
# \int_{{-1.0} <= {1}}^{-{1}} {{-1.0} <= {1.0}} dx
# {{({{{a'},},{{1.0},},})}+{{a}!}+{{d} if {1} else {dx}}}
# \int_{{{a}+{a}+{0}}}^{{'str'} / {a}} {\int {1} dx} dx
# lambda x: {lambda x, y: {oo}}
# \sqrt[3]{({oo},{a'})}
# Limit (\sum_{x = oo}^{partial} {-1.0}, x, \sec({-1.0},{-1},{partialx}))
# {{a} = {partial}} if {{{oo}+{0}+{-1}}} else {\int {a} dx}
# \sum_{x = {{1}*{d}*{oo}}}^{\exp({a'},{1})} {\log_{1.0}{a}}
# lambda x: {{a} = {dx}}
# {{{d}^{oo}}*{{a}^{d}}}
# {{oo} if {oo}} = {is_mersenne_prime({'str'})}
# \lim_{x \to 0} {sqrt(dx) lambda x, y: -1.0}
# {{\frac{\int_{a}^{1} {dx} dx}{{{oo} \cdot {d} \cdot {dx}}}}}
# \frac{{{lambda x, y: {({{1},{partial},})}}*{lambda: {-{1}}}}}{\sum_{x = {({{d},})} / {{partialx} if {0} else {dx} if {partialx} else {d} if {partial}}}^{{{{1} = {partial}}  {\sum_{x = partial}^{-1} {oo}}}} {-{{{'str'}  {1}}}}}
# \int d/dx dx
# (((-1)**partial)**({a_prime, oo, 'str'}))**-{-{0}}
# Limit ({{{0}^{'str'}}  {\left|{a}\right|}  {({a},{a'})}}, x, lambda x: {{1}!})
# \left(\left(\text{'str'} \right)! \le \left(\left(x, y \right) \mapsto -1.0 \right) \right) == \int_{\left[-1.0, \partial, -1 \right]}^{\log_{-1.0}\left(-1 \right)} \begin{cases} 1 & \text{for}\: \infty \\ 1.0 & \text{for}\: 1.0 \end{cases} \ dx
# x^{-{{1} / {1.0}}}
# cofactors( 1 , {lambda x: 1 = lambda: 2} )
# ({{{-{cse()}},{{{{partial} != {-1}}*{{{-1.0}  {1.0}}}}},{lambda: {{-1.0} == {dx}}},},{{\lim_{x \to \log_{0}{d}} {[{-1.0}]}},{partial^{7} / partialx^{3} partialy^{1} partialx^{3} {{partialx} if {a'} else {-1.0} if {a} else {d} if {1.0} else {partialx}}},{{lambda x, y, z: {oo}} = {\tanh()}},},{{partial^{3} / partialz^{3} {{oo} / {'str'}}},{({{{\left|{dx}\right|},{{a} if {d}},},{{-{oo}},{({{-1.0},{oo},{-1.0},})},},})},{partial^{5} / partialx^{1} partialy^{1} partialz^{3} {{-1}!}},},})
# {\left|{a}\right|} if {\int {'str'} dx} else {({-1},{-1},{a})} if {\left|{1.0}\right|}
